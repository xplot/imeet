this["JST"] = this["JST"] || {};

this["JST"]["add-group.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="modal addGroup-modal" tabindex="-1" >\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header">\n            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&amp;times;</button>\n            <h4 class="modal-title" id="myModalLabel">Add New Group</h4>\n            </div>\n            <div class="modal-body">\n                <input type="text" class="form-control new-group-input" />\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-default close-dialog" data-dismiss="modal">Close</button>\n                <button type="button" class="btn btn-primary new-group-btn">Create</button>\n        </div>\n    </div>\n  </div>\n</div>';
    }
    return __p;
};

this["JST"]["contact-item-invite-create.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += "<!--<div id='" + __e(unique_id) + "'  class='contact-row col-md-12' data-contact='" + __e(name) + ";" + __e(email) + " " + __e(phone) + "'>-->\n    <!--<div class='col-xs-8 col-xs-offset-2 col-md-10 col-md-offset-0'>-->\n        <!--<b>" + __e(name) + "</b> " + __e(email) + " " + __e(phone) + "-->\n    <!--</div>-->\n    <!--<div class='col-xs-8 col-xs-offset-2 col-md-2 col-md-offset-0'>-->\n        <!--<button type='button' class='btn btn-danger remove-contact' data-rowid='" + __e(unique_id) + "'>-</button>-->\n    <!--</div>-->\n<!--</div>-->\n\n<div class=\"col-md-12 contact-item-details\" id='" + __e(unique_id) + '\'>\n    <span class="details"><b>' + __e(name) + "</b> " + __e(email) + " " + __e(phone) + "</span>\n    <button type='button' class='btn btn-danger remove-contact pull-right' data-rowid='" + __e(unique_id) + "'>-</button>\n</div>\n";
    }
    return __p;
};

this["JST"]["contact_item.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="contact-row col-md-12 col-xs-12 col-sm-12" data-id="' + __e(unique_id) + '" draggable="true">\n    <div class="editable col-md-3 col-xs-8 col-sm-4" >\n        ' + __e(name) + '\n    </div>\n    <div class="editable desktop tablet col-md-3 col-sm-3">' + __e(email) + '</div>\n    <div class="editable desktop tablet col-md-3 col-sm-3">' + __e(phone) + '</div>\n    <div class="col-md-2 col-xs-4 update-column pull-right col-sm-2">\n        <a class="editable" href="#"><i class="fa-pen fa-1_2x"></i></a>\n        <a class="delete-contact" href="#"><i data-id="' + __e(unique_id) + '" class="fa-delete-garbage-streamline fa-1_2x"></i></a>\n    </div>\n</div>';
    }
    return __p;
};

this["JST"]["contact_item_edit.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="row" data-id="' + __e(unique_id) + '">\n    <div class="editable col-md-3 col-xs-8">\n        <input id="edit-name" value="' + __e(name) + '" placeholder="Name...">\n    </div>\n    <div class="desktop tablet col-md-3">\n        <input id="edit-email" value="' + __e(email) + '" placeholder="Email...">\n    </div>\n    <div class="desktop tablet col-md-3">\n        <input id="edit-phone" value="' + __e(phone) + '" placeholder="Phone...">\n    </div>\n    <div class="col-md-3 update-column">\n        <a href="#" class="finish-edit">OK</a>\n    </div>\n</div>';
    }
    return __p;
};

this["JST"]["contact_item_typeahead.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="details" data-id="' + __e(unique_id) + '">\n    <i class="fa fa-happy-face fa-2x"></i>\n    <b>' + __e(name) + "</b> " + __e(email) + " " + __e(phone) + "\n</div>";
    }
    return __p;
};

this["JST"]["editProfile.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="edit-profile-view medium-margin-top">\n\n   <div class="col-xs-12 text-center">\n       <h4>Edit your profile</h4>\n   </div>\n\n   <div class="col-xs-12 text-center">\n       <div id="edit-profile-email"></div>\n   </div>\n\n   <div class="col-xs-12 text-center">\n       <input id="edit-profile-name" type="text" class="form-control valid-before-submit" placeholder="John Smith..." data-validation="required">\n   </div>\n\n   <div class="col-xs-12 text-center">\n       <input id="edit-profile-username" type="text" class="form-control valid-before-submit" placeholder="username..." data-validation="required">\n   </div>\n\n   <div class="col-xs-12 text-center">\n       <input id="edit_profile_password" name="edit_profile_password" type="password" class="form-control" placeholder="password...">\n   </div>\n\n    <div class="col-xs-12 text-center">\n       <input name="edit_profile_password_confirm" id="edit_profile_password_confirm" type="password" class="form-control" placeholder=" confirm password...">\n   </div>\n\n    <div class="col-xs-12 text-center">\n       <button type=\'button\' class=\'save-profile btn btn-info form-control\'>Save</button>\n    </div>\n\n</div>\n';
    }
    return __p;
};

this["JST"]["edit_contact.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="form-horizontal contacts-form">\n  <div class="form-group">\n    <label for="nameInput">Name</label>\n    <input type="text" class="form-control contact_input" id="nameInput" placeholder="Jane Doe" data-validation="required">\n  </div>\n\n  <div class="form-group">\n    <label for="emailInput">Email contact</label>\n    <input type="email" class="form-control contact_input" id="emailInput" placeholder="jane.doe@example.com" data-validation="email">\n  </div>\n  <div class="form-group">\n    <label for="phoneInput">Phone number</label>\n    <input type="text" class="form-control contact_input" id="phoneInput" placeholder="123-456-7890" data-validation="phone">\n  </div>\n\n  <div class="form-group">\n    <a class="add-contact btn" id="save-contact">Add contact</a>\n  </div>\n</div>';
    }
    return __p;
};

this["JST"]["group-item.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        var color = randomColor();
        var inverse = colorInverter(color);
        __p += '\n<div class="panel panel-default ' + __e(panel_class) + '" data-id="' + __e(unique_id) + '" id="panel_' + __e(unique_id) + '">\n    <div class="panel-heading group-drop-area" role="tab" id="heading_' + __e(unique_id) + '" data-id="' + __e(unique_id) + '">\n        <div class="panel-title group-drop-area" data-id="' + __e(unique_id) + '">\n            <a class="collapsed group-drop-area" data-toggle="collapse" data-parent="#groups_accordion" href="#collapse_' + __e(unique_id) + '"\n               aria-expanded="false" aria-controls="collapse_' + __e(unique_id) + '" data-id="' + __e(unique_id) + '">\n                <div data-id="' + __e(unique_id) + '" class="group-drop-area">\n                    ' + __e(cut(name)) + '<i style="float: right" class="fa fa-angle-down fa-1_5x"></i>\n                </div>\n            </a>\n      </div>\n    </div>\n    <div id="collapse_' + __e(unique_id) + '" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne" >\n        <div class="panel-body group-box group-drop-area" data-id="' + __e(unique_id) + '" id="groupbox_' + __e(unique_id) + '">\n            Drop Here!!! <br/>\n            ';
        _.each(contacts, function(a) {
            __p += '\n\n                <div class="col-md-5 group-contact">\n                    ' + __e(cut(a.name, 8)) + "\n                </div>\n            ";
        });
        __p += "\n        </div>\n    </div>\n</div>\n\n";
    }
    return __p;
};

this["JST"]["group_item_typeahead.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="details" data-id="' + __e(unique_id) + '">\n    <i class="fa fa-group fa-2x"></i>\n    <b>' + __e(name) + "</b>\n</div>";
    }
    return __p;
};

this["JST"]["invite.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="invite-view">\n    <div class="row">\n        <div id="invite-header">\n            <!--using invite_header.html subview-->\n        </div>\n    </div>\n    <div class="row invite-subheader-banner">\n        <div class="col-md-2"></div>\n\n        <div class=\'col-md-2 col-xs-12 mobile-padding\'>\n            <div class="title">Event Start Time</div>\n            <div class="details invite-date"></div>\n        </div>\n        <div class=\'col-md-2  col-xs-12 mobile-padding\'>\n            <div class="title">Event End Time</div>\n            <div class="details invite-end-date"></div>\n        </div>\n         <div class=\'col-md-4 col-xs-12 mobile-padding invite-location-container\'>\n             <div class="location-image"><i class="fa fa-map-pin-streamline fa-15x"></i></div>\n             <div class="title location-title">Location</div>\n            <div id="invite-location" class="details"></div>\n         </div>\n    </div>\n\n    <div class="row mobile tablet mobile-description">\n        <div class="col-md-12">\n            <h4>Message from the host</h4>\n            <div class="invite-description"/>\n        </div>\n    </div>\n\n    <div class="row invite-body">\n        <div class="col-md-2"/>\n        <div class="col-md-4 attendees">\n            <div id="invite-attendees">\n                <!--using invite_attendees.html subview-->\n            </div>\n        </div>\n\n        <div class="col-md-4 hangout">\n            <div class="row small-margin-top desktop desktop-description">\n                <div class="col-md-12">\n                    <h4>Message from the host</h4>\n                    <div class="invite-description"/>\n                </div>\n            </div>\n\n            <div id="invite-comments"></div>\n\n        </div>\n        <div class="col-md-2"/>\n    </div>\n</div>\n\n\n\n';
    }
    return __p;
};

this["JST"]["invite_admin.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="invite-view">\n    <div class="row">\n        <div id="invite-header"></div>\n    </div>\n    <div class="row">\n        <div id="invite-details" class="invite-subheader-banner"></div>\n    </div>\n    <div class="row">\n        <div class="row invite-body">\n        <div class="col-md-2"/>\n        <div class="col-md-4 attendees">\n            <div id="invite-admin-attendees">\n                <!--using invite_attendees.html subview-->\n            </div>\n        </div>\n\n        <div class="col-md-4 hangout">\n            <div class="row small-margin-top desktop desktop-description">\n                <div class="col-md-12">\n                    <h4>Description</h4>\n                    <div class="invite-description"/>\n                </div>\n            </div>\n\n            <div id="invite-comments"></div>\n\n        </div>\n        <div class="col-md-2"/>\n    </div>\n    </div>\n</div>\n\n';
    }
    return __p;
};

this["JST"]["invite_admin_attendees.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="invite-attendees-box">\n<div class="row text-center">\n    <div class="col-md-12 text-left">\n        <button type=\'button\' class=\'notify-all btn btn-success pull-right\'>Notify All</button>\n    </div>\n</div>\n<div class="row text-center">\n    <div class="col-md-12 text-left"><h4>Invite People</h4></div>\n</div>\n<div class="row">\n    <div class="contact-input-container col-md-12">\n        <input type="text" class="contact-input form-control"\n        ';
        if (features.indexOf("voice") != -1) {
            __p += "\n        data-validation='required,email|phone' placeholder='Name, Phone Number, Email'\n        ";
        } else {
            __p += "\n        data-validation='required,email' placeholder='Email Address'\n        ";
        }
        __p += '>\n        <button type="button" class="btn new-contact-button form-control">+</button>\n    </div>\n</div>\n<div class="row contact-table-container">\n    <div class="contact-table">\n        ';
        _.each(attendees, function(a) {
            __p += '\n            <div class="col-md-12 contact-item-details" id=\'' + __e(a.unique_id) + '\'>\n                <span class="details"><b>' + __e(a.name) + "</b> " + __e(a.email) + " " + __e(a.phone) + "</span>\n                <button type='button' class='btn btn-danger remove-contact pull-right' data-rowid='" + __e(a.unique_id) + "'>-</button>\n            </div>\n        ";
        });
        __p += "\n\n    </div>\n</div>\n</div>";
    }
    return __p;
};

this["JST"]["invite_attendees.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="row rsvp small-margin-top">\n  <div class="panel panel-default">\n      ';
        if (attendee != null && attendee.status != "deleted") {
            __p += '\n          <div class="panel-heading">\n              ';
            if (attendee.status == "no_response") {
                __p += "\n                    Are you coming?\n              ";
            } else if (attendee.status == "no") {
                __p += "\n                    Sad you can't attend :(\n              ";
            } else if (attendee.status == "yes") {
                __p += "\n                    Glad you're coming :)\n              ";
            }
            __p += '\n          </div>\n\n          <div class="panel-body">\n            <div class="col-md-6 yes-button">\n                <button type="button" class="btn form-control btn-success invite-attendees-acknowledge-yes response-' + __e(attendee.status) + '">YES</button>\n            </div>\n            <div class="col-md-6 no-button">\n                <button type="button" class="btn form-control btn-danger invite-attendees-acknowledge-no response-' + __e(attendee.status) + '">NO</button>\n            </div>\n          </div>\n      ';
        } else if (attendee != null && attendee.status == "deleted") {
            __p += '\n        <div class="panel-heading"></div>\n          <div class="panel-body">\n            <b>The organizer removed you from this event</b>\n        </div>\n\n      ';
        } else {
            __p += "\n\n      ";
        }
        __p += '\n   </div>\n</div>\n\n<div class="row rsvp">\n    <div class="panel panel-default no-border">\n      <div class="panel-heading yes">Who is coming?</div>\n      <div class="panel-body">\n        <table class="table">\n            <tbody>\n                ';
        _.each(confirmed, function(a) {
            __p += '\n                <tr><td><span class="details"><b>' + __e(a.name) + "</b> " + __e(a.email) + " " + __e(a.phone) + "</span></td></tr>\n            </tbody>\n        ";
        });
        __p += '\n        </table>\n      </div>\n   </div>\n\n    <div class="panel panel-default no-border">\n      <div class="panel-heading no">Who is not coming?</div>\n      <div class="panel-body">\n        <table class="table">\n            <tbody>\n                ';
        _.each(negated, function(a) {
            __p += '\n                <tr><td><span class="details"><b>' + __e(a.name) + "</b> " + __e(a.email) + " " + __e(a.phone) + "</span></td></tr>\n            </tbody>\n        ";
        });
        __p += '\n        </table>\n      </div>\n   </div>\n\n    <div class="panel panel-default no-border">\n      <div class="panel-heading">Who is invited?</div>\n      <div class="panel-body">\n        <table class="table">\n            <tbody>\n                ';
        _.each(no_response, function(a) {
            __p += '\n                <tr><td><span class="details"><b>' + __e(a.name) + "</b> " + __e(a.email) + " " + __e(a.phone) + "</span></td></tr>\n            </tbody>\n        ";
        });
        __p += "\n        </table>\n      </div>\n   </div>\n\n\n</div>\n\n";
    }
    return __p;
};

this["JST"]["invite_comment.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="row ">\n    <span class="comment-date pull-right">' + __e(on) + '</span>\n    <div class="col-md-12 invite-comment-row">\n        <span class="comment-author">\n            ';
        if (author == null) {
            __p += "\n                Anonymous\n            ";
        } else {
            __p += "\n                " + __e(author) + "\n            ";
        }
        __p += "\n            </span> : " + __e(comment) + "\n    </div>\n</div>";
    }
    return __p;
};

this["JST"]["invite_comments.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="row small-margin-top">\n    <div class="col-md-12 no-margin">\n        <h4>Comments</h4>\n    </div>\n</div>\n\n<div class="row ">\n    <div class="col-md-12 no-margin">\n        <textarea class="invite-comment-input" placeholder="Add comment"></textarea>\n    </div>\n</div>\n\n<div class="row">\n    <div class="col-md-6 no-margin">\n        <button type="button" class="btn form-control btn-success add-comment">Add Comment</button>\n    </div>\n</div>\n\n<div class="row invite-comments">\n    <div class="col-md-12 invite-comments-container">\n        ';
        _.each(comments, function(a) {
            __p += "\n            " + ((__t = partial("invite_comment.html", a)) == null ? "" : __t) + "\n        ";
        });
        __p += "\n    </div>\n</div>\n\n";
    }
    return __p;
};

this["JST"]["invite_details.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="col-md-2"></div>\n\n<div class=\'col-md-2 col-xs-12 mobile-padding\'>\n    <div class="title">Event Start Time</div>\n    ';
        if (!is_editing_start_date) {
            __p += '\n        <div class="details invite-date">' + __e(start_date) + " " + __e(start_time) + "</div>\n    ";
        } else {
            __p += '\n        <div class="date-group" id="start-date-group">\n            <input readonly="true" required type="text" class="date event-start-date valid-before-submit" placeholder="01/01/2000" data-validation="required,date"  value="' + __e(start_date) + '">\n            <input readonly="true" required type="int" class="time event-start-time  valid-before-submit" placeholder="00:00 AM" data-validation="required"  value="' + __e(start_time) + '">\n        </div>\n    ';
        }
        __p += "\n</div>\n<div class='col-md-2  col-xs-12 mobile-padding'>\n    <div class=\"title\">Event End Time</div>\n    ";
        if (!is_editing_end_date) {
            __p += '\n        <div class="details invite-end-date">' + __e(end_date) + " " + __e(end_time) + "</div>\n    ";
        } else {
            __p += '\n        <div class="date-group" id="end-date-group">\n            <input readonly="true" required type="text" class="date event-end-date" placeholder="01/01/2000" data-validation="date"  value="' + __e(end_date) + '">\n            <input readonly="true" required type="int" class="time event-end-time" placeholder="00:00 AM" data-validation=""  value="' + __e(end_time) + '">\n        </div>\n    ';
        }
        __p += '\n</div>\n <div class=\'col-md-4 col-xs-12 mobile-padding invite-location-container\'>\n     <div class="location-image"><i class="fa fa-map-pin-streamline fa-15x"></i></div>\n     ';
        if (!is_editing_location) {
            __p += '\n        <div class="title location-title">\n            ' + __e(where) + "\n        </div>\n     ";
        } else {
            __p += '\n        <div><input type="text" class="form-control event-location-input" placeholder="Location...."  ></div>\n     ';
        }
        __p += "\n </div>";
    }
    return __p;
};

this["JST"]["invite_header.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="block block1 invite-background"\n     ';
        if (poster_image_id != null) {
            print("style='background-image: url(/image/" + poster_image_id + ")'");
        } else {
            print("style='background-image: url(/img/default_image.jpg)'");
        }
        __p += '\n>\n    <div class="center-block">\n       <div class="invite-title-container">\n       </div>\n       <div class="upload">\n            <form id="upload_image_form" data-id="' + __e(unique_id) + '" method="POST" enctype="multipart/form-data">\n                <input type="file" name="upload_image_file" id="upload_image_file" >\n            </form>\n            <button id="image_select_btn" class="btn btn-success">Change cover</button>\n       </div>\n\n    </div>\n\n</div>\n';
    }
    return __p;
};

this["JST"]["invite_search.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '\n<div class="search-view">\n    <div class="controls zero-margin">\n        <div class="col-sm-10">\n            <input id="searchBox" type="text" class="form-control event-name" placeholder="Invite Title" data-validation="required">\n        </div>\n        <div class="col-sm-2">\n            <button type="button" class="btn btn-success form-control search">Search</button>\n        </div>\n    </div>\n    <div class="" style="height: 50px"></div>\n    <div class="controls" id="search-result">\n\n        ';
        if (invites.length == 0) {
            __p += '\n            Your search didn\'t resolved any iMeets. <a href="/new" type="button" class="btn btn-success">Start sending!</a>\n        ';
        }
        __p += "\n\n        ";
        _.each(invites, function(a) {
            __p += '\n                <div class="col-md-3 invite-card">\n                    <div class="row title"><a href="#" class="invite-link" data-id=\'' + __e(a.unique_id) + "'>" + __e(a.title) + '</a> </div>\n                    <div class="row date">' + __e(a.start) + ' </div>\n                    <div class="row description">' + __e(a.description) + " </div>\n                    <div class=\"row actions\">\n                        <button type='button' class='btn btn-success btn-duplicate' data-id='" + __e(a.unique_id) + "'>DUPLICATE</button>\n                        <button type='button' class='btn btn-warning btn-edit' data-id='" + __e(a.unique_id) + "'>EDIT</button>\n                        <button type='button' class='btn btn-danger btn-cancel' data-id='" + __e(a.unique_id) + "'>CANCEL</button>\n                    </div>\n                </div>\n        ";
        });
        __p += "\n    </div>\n</div>\n\n";
    }
    return __p;
};

this["JST"]["invite_sent.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="modal-content">\n    <form id="registerForm">\n        <div class="close-modal" data-action="dismiss">\n            <div class="lr">\n                <div class="rl">\n                </div>\n            </div>\n        </div>\n\n        <div class="container">\n            <div class="row">\n                Invite Link <a href="http://imeet.io/invite/';
        print(invite_id);
        __p += '"><h5 class="text-lowercase">http://imeet.io/invite/';
        print(invite_id);
        __p += '</h5></a>\n            </div>\n            <div class="row small-margin-top"></div>\n            <div class="row">\n               Register\n               <div class="controls">\n                   <div class="col-sm-3"></div>\n                    <div class="col-sm-6">\n                        <div class="col-sm-9">\n                            <input required type="email" class="form-control register-email" placeholder="Enter email..." data-validation="email">\n                        </div>\n                        <div class="col-sm-3">\n                            <button type="button" class="btn btn-success form-control submit-register">Go</button>\n                        </div>\n                    </div>\n                    <div class="col-sm-3"></div>\n                </div>\n           </div>\n        </div>\n    </form>\n</div>\n';
    }
    return __p;
};

this["JST"]["login.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="row medium-margin-top">\n   <div class="col-md-12 section-item contact-table equidistant">\n      <form id="loginForm" action="/login" method="post">\n          <section class="section">\n              <div class="row controls">\n                  <div class="col-sm-4"></div>\n                  <div class="col-sm-4 medium-margin">\n                      <h4>Login</h4>\n                      <fieldset>\n                          <div class="row">\n                              <div class="col-sm-1"></div>\n                              <div class="col-sm-10">\n                                  <input id="username" name="username" required type="text" class="form-control small-margin" placeholder="Username">\n                                  <input id="password" name="password" required type="password" class="form-control small-margin" placeholder="Password">\n                              </div>\n                              <div class="col-sm-1"></div>\n\n                          </div>\n                          <div class="row">\n                              <div class="col-sm-1"></div>\n                              <div class="col-sm-10">\n                                  <label class="remember pull-right" style="padding: 10px">\n                                    Remember me?\n                                    <input type="checkbox" name="remember_me" id="remember_me" value="on">\n                                  </label>\n                              </div>\n                              <div class="col-sm-1"></div>\n                          </div>\n                          <div class="row">\n                              <div class="col-sm-1"></div>\n                              <div class="col-sm-10"><button type="submit" class="btn btn-success form-control pull-right">Login</button></div>\n                              <div class="col-sm-1"></div>\n                          </div>\n\n                          <div class="row" style="margin-top: 20px">\n                              <div class="col-sm-1"></div>\n                              <div class="col-sm-10">\n                                  <div id="third_party_login">\n                                      <ul class="social-login-icons">\n                                          <li style="width: auto">\n\n                                          </li>\n                                          <li>\n                                              <a href="/social_login/google">\n                                                  <i class="fa fa-google fa-2x"></i>\n                                              </a>\n                                          </li>\n                                          <li>\n\n                                              <a href="/social_login/facebook">\n                                                  <i class="fa fa-facebook fa-2x"></i>\n                                              </a>\n                                          </li>\n                                      </ul>\n                                  </div>\n                              </div>\n                              <div class="col-sm-1"></div>\n                          </div>\n\n                          <div class="row" style="margin-top: 20px">\n                              <div class="col-sm-1"></div>\n\n                              <div class="col-sm-1"></div>\n                          </div>\n\n                          <div class="row">\n                              <div class="col-sm-1"></div>\n                              <div class="col-sm-10">\n                                  <label class="remember pull-right">\n                                      Don\'t have an account?\n                                      <a href="/register" class="">Sign Up - It\'s Free.</a>\n                                  </label>\n                              </div>\n                              <div class="col-sm-1"></div>\n                          </div>\n                      </fieldset>\n                  </div>\n                  <div class="col-sm-4"></div>\n              </div>\n          </section>\n        </form>\n    </div>\n</div>';
    }
    return __p;
};

this["JST"]["new.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="snap-panel invite-create">\n    <section data-panel="first" class="invite first">\n        <div class="zero-margin text-center invite-content ">\n            <div class="zero-margin">\n                <div class="col-xs-12 col-md-8 col-md-offset-2">\n                    <h4>Event</h4>\n                </div>\n            </div>\n            <div class="">\n\n                ';
        if (currentUser == null) {
            __p += '\n                    <label class="small-text">\n                    Note: For sms/calls to work, you have to be a registered\n                    <br/>\n                    Note2: Sms/calls will be free only during the beta phase. After that a subscription base fee will be offered\n                    </label>\n                ';
        }
        __p += '\n            </div>\n\n            <div class="zero-margin">\n                <div class="col-xs-12 col-md-8 col-md-offset-2">\n                    <input type="text" class="form-control event-name-input valid-before-submit" placeholder="Event" autofocus data-validation="required" value="' + __e(title) + '" >\n                </div>\n            </div>\n\n            <div class="zero-margin">\n                <div class="col-xs-12 col-md-8 col-md-offset-2">\n                    <h4>Details</h4>\n                </div>\n            </div>\n\n            <div class="zero-margin">\n                <div class="col-xs-12 col-md-8 col-md-offset-2">\n                  <input type="text" class="form-control event-location-input" placeholder="Location...."  >\n                </div>\n            </div>\n\n            <div class="zero-margin">\n                <div class="col-xs-12  col-md-3 col-md-offset-2">\n                    <div class="date-group" id="start-date-group">\n                        <input readonly="true" required type="text" class="date event-start-date valid-before-submit" placeholder="01/01/2000" data-validation="required,date"  value="' + __e(start_date) + '">\n                        <input readonly="true" required type="int" class="time event-start-time  valid-before-submit" placeholder="00:00 AM" data-validation="required"  value="' + __e(start_time) + '">\n                    </div>\n                </div>\n                <div class="col-xs-12 col-md-2 text-center label-text">\n                    <h4>To</h4>\n                </div>\n                <div class="col-xs-12 col-md-3">\n                    <div class="date-group">\n                        <input readonly="true" required type="text" class="date event-end-date" placeholder="01/01/2000" value="' + __e(end_date) + '">\n                        <input readonly="true" required type="text" class="time event-end-time" placeholder="00:00 AM"  value="' + __e(end_time) + '">\n                    </div>\n                </div>\n            </div>\n            <div class="zero-margin desktop tablet small-margin-top">\n                <div class="col-xs-12 col-md-8 col-md-offset-2 ">\n                  <textarea class="form-control event-description-input" rows="6"></textarea>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\'row send-container col-xs-offset-0 col-xs-12 col-md-8 col-md-offset-2\'>\n            <div class="facebook_share pull-right">\n                <div>Share on Facebook</div>\n                <div><input type="checkbox"\n                   data-toggle="toggle"\n                   id="bt_toggle"\n                   class="share_to_facebook"\n                   data-style="android"\n                   data-on=" " data-off=" "\n                   data-onstyle="info"\n                   data-onstyle="success" data-offstyle="danger" />\n                </div>\n            </div>\n            <div class="">\n                <button type="button" class="btn form-control btn-success send">Create</button>\n            </div>\n\n        </div>\n    </section>\n</div>\n';
    }
    return __p;
};

this["JST"]["register.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="signup-container">\n    <div class="signup">\n        <h4>I want in!</h4>\n       <div class="row controls">\n           <div class="col-sm-3"></div>\n            <div class="col-sm-6">\n                <div class="col-sm-9">\n                    <input required type="email" class="form-control register-email" placeholder="Enter email..." data-validation="email">\n                </div>\n                <div class="col-sm-3">\n                    <button type="button" class="btn btn-success form-control submit-register">Go</button>\n                </div>\n            </div>\n            <div class="col-sm-3"></div>\n        </div>\n    </div>\n</div>\n\n<!-- Footer -->\n<div class="section-container footer desktop navbar-fixed-bottom">\n<div class="footer-below">\n    <div class="container">\n      <div class="row">\n          <div class="col-lg-12">\n              Miami, FL<br/>\n              Copyright 2014 &copy; iMeet Inc. All rights reserved.\n          </div>\n      </div>\n    </div>\n</div>\n</div>\n';
    }
    return __p;
};

if (!String.prototype.format) {
    String.prototype.format = function() {
        var a = arguments;
        return this.replace(/{(\d+)}/g, function(b, c) {
            return typeof a[c] != "undefined" ? a[c] : b;
        });
    };
}

function isNullOrEmpty(a) {
    return a == null || a === "";
}

Backbone.Model.prototype.toJSON2 = function() {
    var a = _.clone(this.attributes);
    for (var b in a) {
        if (a[b] instanceof Backbone.Model || a[b] instanceof Backbone.Collection) {
            a[b] = a[b].toJSON();
        }
    }
    return a;
};

function guid() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(a) {
        var b = Math.random() * 16 | 0, c = a == "x" ? b : b & 3 | 8;
        return c.toString(16);
    });
}

function alert_notification(a, b) {
    $(".alert").remove();
    var c = "" + '<div class="alert alert-{0} alert-dismissible flyover flyover-in" role="alert">' + '<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>' + "{1}" + "</div>";
    var d = $("body");
    a.forEach(function(a) {
        d.prepend(c.format(a.alertType, a.message));
    });
    if (b != null) {
        setTimeout(function() {
            $(".alert").fadeOut(2e3, function() {
                $(".alert").remove();
            });
        }, b);
    }
}

var validator = {
    digitsRegex: new RegExp("^[0-9]{10}$"),
    charsRegex: new RegExp(".*"),
    emailRegex: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    validateItems: function(a) {
        var b = true;
        var c = $(a);
        c.each(function(a) {
            var d = $(c[a]);
            b = validator.validateItem(d) && b;
        });
        return b;
    },
    validateString: function(a, b) {
        var c = false;
        switch (b) {
          case "required":
            c = a.length > 0;
            break;

          case "digits":
            c = validator.digitsRegex.test(a);
            break;

          case "non_numerics":
            c = validator.charsRegex.test(a);
            break;

          case "email":
            c = a.length == 0 || validator.emailRegex.test(a);
            break;

          case "phone":
            c = validator.digitsRegex.test(a) || a.length == 0;
            break;

          case "date":
            var d = new Date(a);
            c = d instanceof Date && !isNaN(d.valueOf());
            break;

          case "time":
            c = true;
            break;
        }
        return c;
    },
    validateItem: function(a) {
        var b = true;
        var c = a.data("validation");
        c.split(",").forEach(function(c) {
            var d = -1;
            if (c.indexOf(":") >= 0) {
                var e = c.split(":");
                c = e[0];
                d = parseInt(e[1]);
            }
            var f;
            try {
                var g = a.val();
                if (a.is(":checkbox")) {
                    if (!a.is(":checked")) g = "";
                }
                if (c.indexOf("|") != -1) {
                    var h = function(a, b) {
                        var b = c.split("|");
                        var d = a.split(",");
                        if (d.length == 0 || b.length == 0) return true;
                        var e = true;
                        d.forEach(function(a) {
                            a = a.trim();
                            var c = false;
                            b.forEach(function(b) {
                                c = validator.validateString(a, b) || c;
                            });
                            e = e && c;
                        });
                        return e;
                    };
                    f = h(g, c);
                } else f = validator.validateString(g, c);
                if (d != -1) f = f && g.length == d;
            } catch (i) {
                f = false;
            }
            b = f && b;
        });
        if (a.is(":checkbox")) {
            a = a.parent();
        }
        if (!b) this.errorValidationForItem(a); else this.succeedValidationForItem(a);
        return b;
    },
    errorValidationForItem: function(a) {
        this.validationUI(a, true);
    },
    succeedValidationForItem: function(a) {
        this.validationUI(a, false);
    },
    validationUI: function(a, b) {
        if (b) a.addClass("failed-validation"); else a.removeClass("failed-validation");
        var c = a.data("validation-siblings");
        if (c != null) {
            c.split(",").forEach(function(a) {
                var c = $(a);
                if (b) c.addClass("failed-validation"); else c.removeClass("failed-validation");
            });
        }
    }
};

var randomColor = function a() {
    var a = "0123456789ABCDEF".split("");
    var b = "";
    for (var c = 0; c < 6; c++) {
        b += a[Math.floor(Math.random() * 16)];
    }
    return b;
};

var cut = function b(a, b) {
    if (b == null) b = 8;
    if (a.length >= b) return a.substring(0, b) + "...";
    return a;
};

var colorInverter = function c(a) {
    if (a.length != 6) {
        console.error("Hex color must be six hex numbers in length.");
        return false;
    }
    a = a.toUpperCase();
    var b = a.split("");
    var c = "";
    var d = "FEDCBA9876".split("");
    var e = new Array();
    e.A = "5";
    e.B = "4";
    e.C = "3";
    e.D = "2";
    e.E = "1";
    e.F = "0";
    for (i = 0; i < 6; i++) {
        if (!isNaN(b[i])) {
            c += d[b[i]];
        } else if (e[b[i]]) {
            c += e[b[i]];
        } else {
            console.error("Hex colors must only include hex numbers 0-9, and A-F");
            return false;
        }
    }
    return c;
};

window.partial = function(a, b) {
    return JST[a](b);
};

var fetchGroupDistributionForCurrentUser = function(a) {
    if (currentUser == null) {
        a({
            contacts: [],
            groups: []
        });
    } else {
        $.ajax({
            url: "/api/contacts/groups?user_id=" + currentUser.id,
            type: "GET",
            success: function(b) {
                if (a != null) a(b);
            },
            error: function(a) {}
        });
    }
};

IMeetCollection = Backbone.Collection.extend({
    getById: function(a) {
        var b = this.filter(function(b) {
            return b.get("unique_id") === a;
        });
        if (b.length > 0) return b[0];
        return null;
    },
    removeBy: function(a) {
        this.remove(this.getById(a));
    },
    collectionToJSON: function() {
        return this.map(function(a) {
            return a.toJSON2();
        });
    }
});

Contact = Backbone.Model.extend({
    defaults: {
        unique_id: "",
        name: "",
        email: "",
        phone: ""
    },
    includeInInvite: function(a, b, c) {
        var d = "/api/invite/" + a + "/attendees/";
        var e = [ this.toJSON() ];
        var f = {
            attendees: e
        };
        if (currentUser != null) {
            f.user_id = currentUser.id;
        }
        $.ajax({
            url: d,
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(f),
            cache: false,
            success: function(a) {
                if (c) c(b, a);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    removeFromInvite: function(a, b) {
        var c = "/api/invite/" + a + "/attendees/" + this.get("unique_id");
        $.ajax({
            url: c,
            type: "DELETE",
            contentType: "application/json",
            cache: false,
            success: function(a) {
                if (b) b(view, a);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    acknowledgeInvite: function(a, b) {
        var c = "/api/invite/attendees/" + this.get("unique_id") + "/response";
        var d = {
            response: a,
            channel: "web"
        };
        $.ajax({
            url: c,
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(d),
            cache: false,
            success: function(a) {
                if (b != null) b(a);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    someIdentifier: function() {
        var a = this.get("name");
        if (a != null && a !== "") return a;
        a = this.get("email");
        if (a != null && a !== "") return a;
        a = this.get("phone");
        return a;
    }
});

ContactList = IMeetCollection.extend({
    model: Contact
});

Group = Backbone.Model.extend({
    defaults: {
        unique_id: "",
        name: "",
        contacts: new ContactList()
    },
    fetchContacts: function(a) {
        $.ajax({
            url: "/api/group/" + this.get("unique_id") + "?user_id=" + currentUser.id,
            type: "GET",
            success: function(b) {
                var c = new ContactList();
                b.forEach(function(a) {
                    c.add(new Contact(a));
                });
                a(c);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: "There was an error getting the contacts for the group"
                } ]);
            }
        });
    },
    includeInInvite: function(a, b) {
        var c = "/api/invite/" + a + "/group/";
        var d = {
            user_id: currentUser.id,
            unique_id: this.get("unique_id")
        };
        $.ajax({
            url: c,
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(d),
            cache: false,
            success: function(a) {
                if (b) b(view, a);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

GroupList = IMeetCollection.extend({
    model: Group,
    localStorage: new Store("backbone-group")
});

InviteModel = Backbone.Model.extend({
    defaults: {
        unique_id: "",
        title: "",
        start_date: "",
        start_time: "",
        end_date: "",
        end_time: "",
        description: "",
        where: "",
        poster_image_id: "",
        attendees: new ContactList(),
        all_contacts: new ContactList(),
        all_groups: new ContactList(),
        utc_offset: 0
    },
    initialize: function(a) {
        if (a == null) return;
        var b = this.parse_datetime(a.start);
        var c = this.parse_datetime(a.end);
        this.set("start_date", b.date);
        this.set("start_time", b.time);
        this.set("end_date", c.date);
        this.set("end_time", c.time);
        var d = new ContactList();
        if (a.attendees != null) a.attendees.forEach(function(a) {
            d.push(new Contact(a));
        });
        this.set("attendees", d);
    },
    format_date: function(a, b) {
        var c = this.get(a);
        if (isNullOrEmpty(c)) return null;
        return moment(c).format(b);
    },
    get_datetime: function(a) {
        var b = this.get(a + "_time");
        var c = this.get(a + "_date");
        if (isNullOrEmpty(b) || isNullOrEmpty(c)) return null;
        return c + " " + b;
    },
    parse_datetime: function(a) {
        if (isNullOrEmpty(a)) return {
            date: null,
            time: null
        };
        var b = moment(a);
        return {
            date: b.format("MM/D/YYYY"),
            time: b.format("hh:mm A")
        };
    },
    toJSON: function() {
        var a = Backbone.Model.prototype.toJSON.apply(this, arguments);
        a["start"] = this.get_datetime("start");
        a["end"] = this.get_datetime("end");
        return a;
    },
    fetch: function(a) {
        var b = this;
        $.ajax({
            url: "/api/invite/" + this.get("unique_id"),
            type: "GET",
            cache: false,
            success: function(c) {
                a(b.get("unique_id"), c);
            }
        });
    },
    submit: function(a, b, c) {
        var d = this;
        var e = new Date();
        this.set("utc_offset", e.getTimezoneOffset());
        var f = this.toJSON();
        if (currentUser != null) f.user_id = currentUser.id;
        var g = "/api/invite/";
        if (this.get("unique_id") !== null) g += this.get("unique_id");
        $.ajax({
            url: g,
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(f),
            cache: false,
            success: function(d) {
                if (c) alert_notification([ {
                    alertType: "success",
                    message: "Event saved successfully!"
                } ], 3e3);
                a(b, d);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    notifyAll: function(a) {
        var b = this.toJSON();
        $.ajax({
            url: "/api/invite/" + this.get("unique_id") + "/attendees/notify/all",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(b),
            cache: false,
            success: function(b) {
                a(b);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

InviteList = IMeetCollection.extend({
    model: InviteModel
});

CommentModel = Backbone.Model.extend({
    defaults: {
        on: null,
        comment: "",
        author: ""
    },
    initialize: function(a) {
        if (typeof a == "string") this.set("comment", a);
    },
    submit: function(a, b) {
        var c = "/api/invite/{0}/comment".format(a);
        if (b != null) c = "/api/invite/{0}/attendees/{1}/comment".format(a, b);
        $.ajax({
            url: c,
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({
                comment: this.get("comment")
            }),
            cache: false,
            success: function(a) {},
            error: function(a) {
                if (a.status != 200) alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

CommentList = IMeetCollection.extend({
    model: CommentModel,
    fetchFromInvite: function(a) {
        $.ajax({
            url: "/api/invite/{0}/comment".format(a),
            type: "GET",
            contentType: "application/json",
            cache: false,
            success: function(a) {
                var b = new CommentList();
                a.forEach(function(a) {
                    b.add(new CommentModel(a));
                });
                return b;
            },
            error: function(a) {}
        });
    }
});

SimpleView = Backbone.View.extend({
    initialize: function(a) {
        this.options = a || {};
    },
    hidePanels: function() {
        $("#body-container").hide();
        $("#view-container").show();
        $("#modal_container").hide();
        $("#invite-body").hide();
    },
    clearTemplate: function() {
        $("#view-container").html("");
    },
    block: function(a, b) {
        var c = $(window).height();
        if (b === "half") c = c / 2; else if (b == "quarter") c = c / 3; else c = c;
        $(a).css("height", c);
    }
});

ContactsView = SimpleView.extend({
    first_time: true,
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .add-contact": "navigateToAddContact",
        "change #import-csv": "importFromCsv",
        "click .add-group": "addGroup",
        "mouseup div": "mouseUp"
    },
    render: function(a) {
        $("#contact-list").show();
        $("#contact-new").hide();
        if (!this.first_time) {
            return;
        }
        this.contactList = a.contactList;
        this.groupList = a.groupList;
        this.listenTo(this.contactList, "add", this.addContact);
        this.listenTo(this.contactList, "remove", this.removeContact);
        var b = $(".groups_table");
        var c = $("#contacts_table");
        contactList.each(function(a) {
            c.append(new ContactItemView({
                model: a
            }).render().el);
        });
        this.groupListView = new GroupListView({
            el: ".groups_table"
        });
        this.groupListView.render({
            groupList: this.groupList,
            contactList: this.contactList
        });
        this.first_time = false;
    },
    addContact: function(a) {
        var b = $("#contacts_table");
        b.append(new ContactItemView({
            model: a
        }).render().el);
    },
    removeContact: function(a) {
        var b = $('div[data-id="' + a.get("unique_id") + '"');
        b.remove();
    },
    navigateToAddContact: function(a) {
        a.preventDefault();
        Backbone.history.navigate("/contacts/new", true);
    },
    importFromCsv: function(a) {
        var b = new FileReader();
        b.onload = function(a, b) {
            return function(b) {
                $.ajax({
                    url: "/api/contacts/csv",
                    type: "POST",
                    contentType: "application/json",
                    data: '{"user_id" : "{0}", "file_name": "{1}", "file": "{2}"}'.format(currentUser.id, a.name, b.target.result),
                    cache: false,
                    success: function() {
                        location.reload();
                        console.info("file uploaded correctly.");
                    },
                    error: function(a) {
                        alert_notification([ {
                            alertType: "danger",
                            message: a.responseText
                        } ]);
                    }
                });
            };
        }(a.target.files[0], this);
        b.readAsDataURL(a.target.files[0]);
    },
    addGroup: function() {
        this.groupListView.showDialog();
    }
});

ContactsNewView = SimpleView.extend({
    template: JST["edit_contact.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click #save-contact": "saveContact"
    },
    render: function(a) {
        $("#contact-list").hide();
        console.log(a);
        this.contactList = a.contactList;
        var b = this.template({});
        this.$el.html(b);
        this.$el.show();
    },
    saveContact: function() {
        if (!validator.validateItems(".contact_input")) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var a = new Contact({
            name: $("#nameInput").val(),
            email: $("#emailInput").val(),
            phone: $("#phoneInput").val()
        });
        var b = $("#contacts_table");
        var c = this;
        $.ajax({
            url: "/api/contacts",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({
                user_id: currentUser.id,
                contact: a
            }),
            cache: false,
            success: function(b) {
                alert_notification([ {
                    alertType: "success",
                    message: "Contact created!"
                } ]);
                a.set("unique_id", b);
                c.contactList.add(a);
                Backbone.history.navigate("contacts", true);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

ContactItemView = SimpleView.extend({
    template: JST["contact_item.html"],
    editTemplate: JST["contact_item_edit.html"],
    model: null,
    editMode: false,
    events: {
        "dragstart .contact-row": "enterDragMode",
        "click .editable": "enterEditMode",
        "click .finish-edit": "finishEditMode",
        "click .delete-contact": "deleteContact"
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    enterDragMode: function(a) {
        var b = this.model.get("unique_id");
        a.originalEvent.dataTransfer.setData("contact_id", b);
    },
    enterEditMode: function(a) {
        if (this.editMode) return;
        this.editMode = true;
        this.$el.html(this.editTemplate(this.model.toJSON()));
    },
    finishEditMode: function(a) {
        if (!this.editMode) return;
        this.editMode = false;
        this.model.set("name", $("#edit-name").val());
        this.model.set("email", $("#edit-email").val());
        this.model.set("phone", $("#edit-phone").val());
        this.saveContact();
        this.$el.html(this.template(this.model.toJSON()));
    },
    saveContact: function() {
        var a = this.model.get("unique_id");
        $.ajax({
            url: api.url + "api/contacts/" + a + "/edit",
            data: JSON.stringify({
                name: this.model.get("name"),
                email: this.model.get("email"),
                phone: this.model.get("phone")
            }),
            type: "PUT",
            contentType: "application/json",
            cache: false,
            success: function(a) {},
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    deleteContact: function(a) {
        a.preventDefault();
        var b = $(a.target);
        var c = this.model.get("unique_id");
        $.ajax({
            url: api.url + "api/contacts/" + currentUser.id + "/delete/" + c,
            type: "DELETE",
            contentType: "application/json",
            cache: false,
            success: function(a) {
                alert_notification([ {
                    alertType: "success",
                    message: "Contact deleted!"
                } ]);
                contactList.removeBy(c);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

GroupListView = Backbone.View.extend({
    events: {
        "dragover .group-drop-area": "contactDragOver",
        "dragenter .group-drop-area": "contactDragEnter",
        "dragleave .group-drop-area": "contactDragLeave",
        "drop .group-drop-area": "contactDropped"
    },
    newGroupView: null,
    render: function(a) {
        this.groupList = a.groupList;
        this.contactList = a.contactList;
        var b = this;
        var c = 0;
        if (groupList.length > 0) this.groupList.forEach(function(a) {
            var d = a.toJSON2();
            d.panel_class = false && c % 2 == 0 ? "group-panel-even" : "group-panel-odd";
            b.$el.append(JST["group-item.html"](d));
            c++;
        }); else {
            b.$el.append("<div class='empty-groups'>You have no groups. Create one!</div>");
        }
        this.$groupsTable = this.$el;
        this.listenTo(this.groupList, "add", this.newGroupAdded);
        this.listenTo(this.groupList, "remove", this.removedGroup);
        this.newGroupView = new GroupCreateView();
        this.$el.append(this.newGroupView.render({
            groupList: this.groupList
        }));
        return this.$el;
    },
    showDialog: function() {
        this.newGroupView.show();
    },
    newGroupAdded: function(a) {
        $("empty-groups").hide();
        var b = a.toJSON();
        b.panel_class = this.groupList.length % 2 == 0 ? "group-panel-even" : "group-panel-odd";
        this.$el.prepend(JST["group-item.html"](b));
    },
    removedGroup: function() {},
    contactDragEnter: function(a) {
        a.preventDefault();
        var b = $(a.target);
        if (b.hasClass("group-drag-hover") || !b.hasClass("group-drop-area")) return;
        b.addClass("group-drag-hover");
    },
    contactDragLeave: function(a) {
        a.preventDefault();
        var b = $(a.target);
        if (!b.hasClass("group-drag-hover") || !b.hasClass("group-drop-area")) return;
        b.removeClass("group-drag-hover");
    },
    contactDragOver: function(a) {
        a.preventDefault();
    },
    contactDropped: function(a) {
        var b = $(a.target);
        if (!b.hasClass("group-drop-area")) return;
        a.preventDefault();
        a.stopPropagation();
        var c = b.data("id");
        var d = this.groupList.getById(c);
        if (d != null) {
            var e = a.originalEvent.dataTransfer.getData("contact_id");
            var f = this.contactList.getById(e);
            if (f != null) this.addContactToGroup(f, d);
        }
        b.removeClass("group-drag-hover");
    },
    addContactToGroup: function(a, b) {
        $.ajax({
            url: "/api/group/" + b.attributes.unique_id + "/" + a.attributes.unique_id + "?user_id=" + currentUser.id,
            type: "POST",
            contentType: "application/json",
            success: function(c) {
                $("#groupbox_" + b.get("unique_id")).append('<div class="col-md-5 group-contact">' + cut(a.get("name"), 8) + "</div>");
            },
            error: function(a) {
                console.log(a);
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

GroupCreateView = Backbone.View.extend({
    template: JST["add-group.html"],
    events: {
        "click .new-group-btn": "newGroup",
        "keyup .new-group-input": "newGroupKeyEvent"
    },
    render: function(a) {
        this.groupList = a.groupList;
        this.$el.html(this.template());
        this.$groupInput = this.$el.find(".new-group-input");
        return this.$el;
    },
    show: function() {
        this.$el.find(".addGroup-modal").modal({
            show: true,
            backdrop: true,
            keyboard: true
        });
        this.$groupInput.focus();
    },
    hide: function() {
        this.$el.find(".addGroup-modal").hide();
    },
    newGroupKeyEvent: function(a) {
        if (a.keyCode != 13) {
            return;
        }
        this.newGroup();
    },
    newGroup: function() {
        var a = this;
        var b = this.$groupInput.val();
        if (b == "") {
            alert_notification([ {
                alertType: "warning",
                message: "Type a name for the group!"
            } ]);
            return;
        }
        this.hide();
        $.ajax({
            url: "/api/group/" + b + "?user_id=" + currentUser.id,
            type: "POST",
            success: function(b) {
                alert_notification([ {
                    alertType: "success",
                    message: "Group Added!"
                } ]);
                a.groupList.add(new Group(b));
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: "Problem adding the Group!"
                } ]);
            }
        });
    }
});

IndexView = Backbone.View.extend({
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .imeet-btn": "createNew",
        "keypress .invite-title-input": "type_key"
    },
    type_key: function(a) {
        if (a.keyCode == 13) {
            this.createNew();
            a.preventDefault();
            return false;
        }
    },
    render: function(a) {
        $("#view-container").hide();
        this.$el.show();
        this.$inviteTitle = this.$el.find(".invite-title-input");
        this.$headerImage = this.$el.find(".header-section");
    },
    createNew: function() {
        var a = this.$inviteTitle.val();
        if (a != null && a != "") Backbone.history.navigate("/new/" + a, true); else alert("type a title!");
    }
});

InviteAdminAttendeesView = Backbone.View.extend({
    template: JST["invite_admin_attendees.html"],
    el: "#invite-admin-attendees",
    contacts: null,
    last_selected_item: null,
    initialize: function(a) {
        this.options = a || {};
        this.invite_id = this.options.id;
    },
    events: {
        "click .new-contact": "newAttendee",
        "click .remove-contact": "removeAttendee",
        "keyup .contact-input": "newAttendeeEnter",
        "click .new-contact-button": "newAttendeeButtonClick",
        "click .contact-input-container": "focusOnClick"
    },
    render: function(a) {
        this.model = a.attendees;
        this.invite_id = a.invite_id;
        var b = {
            attendees: this.model.toJSON()
        };
        this.$el.html(this.template(b));
        this.$table = this.$el.find(".contact-table");
        this.$newContact = $(".contact-input");
        this.listenTo(this.model, "add", this.newAttendee);
        this.listenTo(this.model, "remove", this.removeAttendee_DOM);
        var c = this;
        fetchGroupDistributionForCurrentUser(function(a) {
            c.all_contacts = new ContactList(a.contacts);
            c.all_groups = new GroupList(a.groups);
            c.setupContactsTypeahead();
        });
        return this.$el.html();
    },
    newAttendeeEnter: function(a) {
        if (a.keyCode != 13) {
            return;
        }
        this.$newContact.trigger("blur");
        this.newAttendeeButtonClick();
    },
    newAttendeeButtonClick: function() {
        var a = null;
        var b = null;
        if (this.last_selected_item != null && this.last_selected_item.is_group) b = this.last_selected_item; else if (this.last_selected_item != null) {
            a = this.last_selected_item;
        }
        if (this.last_selected_item == null && this.$newContact.val() != "") {
            if (!validator.validateItem(this.$newContact)) {
                alert_notification([ {
                    alertType: "warning",
                    message: "You have incorrect or missing fields!"
                } ]);
                return;
            }
            var c = this.parsePhoneAndEmail(this.$newContact.val());
            a = {
                unique_id: guid(),
                name: "",
                email: c.email,
                phone: c.phone
            };
        }
        if (a != null) {
            var d = new Contact(a);
            this.model.add(d);
            d.includeInInvite(this.invite_id);
        }
        if (b != null) {
            var b = new Group({
                unique_id: b.unique_id
            });
            b.fetchContacts($.proxy(this.addAttendeesFromGroup, this));
            b.includeInInvite(this.invite_id);
        }
        this.last_selected_item = null;
        this.$newContact.val("");
        this.$newContact.typeahead("val", "");
        this.$newContact.focus();
    },
    addAttendeesFromGroup: function(a) {
        var b = this;
        a.forEach(function(a) {
            b.model.add(a);
        });
    },
    newAttendee: function(a) {
        if (this.$table == null) this.$table = this.$el.find(".contact-table");
        this.$table.prepend(JST["contact-item-invite-create.html"](a.toJSON()));
        return false;
    },
    removeAttendee: function(a) {
        var b = $(a.currentTarget).data("rowid");
        var c = this.model.getById(b);
        c.removeFromInvite(this.invite_id);
        this.model.removeBy(b);
    },
    removeAttendee_DOM: function(a) {
        if (this.$table == null) this.$table = this.$el.find(".contact-table");
        this.$table.find("#" + a.attributes.unique_id).remove();
    },
    setupContactsTypeahead: function() {
        var a = this;
        var b = function(a) {
            return function b(b, c) {
                var d, e;
                d = [];
                e = new RegExp(b, "i");
                a.each(function(a) {
                    if (e.test(a.get("name")) || e.test(a.get("email")) || e.test(a.get("phone"))) d.push(a.toJSON());
                });
                c(d);
            };
        };
        var c = function(a) {
            return function b(b, c) {
                var d, e;
                d = [];
                e = new RegExp(b, "i");
                a.each(function(a) {
                    if (e.test(a.get("name"))) {
                        a.set("is_group", true);
                        d.push(a.toJSON());
                    }
                });
                c(d);
            };
        };
        var d = function(d, e) {
            a.$newContact.typeahead({
                hint: true,
                highlight: true,
                minLength: 1
            }, {
                autoselect: true,
                name: "contacts",
                displayKey: "name",
                source: b(d),
                templates: {
                    suggestion: JST["contact_item_typeahead.html"]
                }
            }, {
                autoselect: true,
                name: "groups",
                displayKey: "name",
                source: c(e),
                templates: {
                    suggestion: JST["group_item_typeahead.html"]
                }
            }).on("typeahead:selected", function(b, c) {
                a.last_selected_item = c;
            }).on("keypress keydown input", function(a) {
                a.stopPropagation();
            });
        };
        d(a.all_contacts, a.all_groups);
    },
    parsePhoneAndEmail: function(a) {
        var b = a.trim();
        var c = a.split(";");
        if (c.length == 1) c = a.split(",");
        for (var d = 0; d < c.length; d++) c[d] = c[d].trim();
        if (c.length == 1) {
            if (isNaN(c[0])) return {
                email: c[0],
                phone: ""
            }; else return {
                phone: c[0],
                email: ""
            };
        } else {
            if (isNaN(c[0])) return {
                email: c[0],
                phone: c[1]
            }; else return {
                phone: c[0],
                email: c[1]
            };
        }
    }
});

InviteAdminView = SimpleView.extend({
    template: JST["invite_admin.html"],
    author: "Organizer",
    contacts: null,
    initialize: function(a) {
        this.options = a || {};
        this.inviteId = this.options.id;
    },
    events: {
        "keypress .invite-newComment": "addNewComment",
        "click .notify-all": "notifyAll",
        "change .share_to_facebook": "share_on_facebook_auth"
    },
    hidePanels: function() {
        $("#body-container").hide();
        $("#view-container").hide();
        $("#modal_container").hide();
        $("#invite-body").show();
    },
    render: function(a, b) {
        this.hidePanels();
        this.unique_id = a;
        if (this.unique_id == null) console.error("Invite Id is null, check routing");
        if (b == null) {
            var c = new InviteModel({
                unique_id: this.unique_id
            });
            c.fetch($.proxy(this.render, this));
            return;
        }
        this.validateInviteIsCurrent(b.start);
        this.model = new InviteModel(b);
        var d = this.model.toJSON();
        this.$el.html(this.template(d));
        var e = new InviteAdminAttendeesView();
        var f = new InviteHeaderView({
            is_admin: true
        });
        var g = new InviteDetailsView();
        var h = new InviteCommentsView();
        e.render({
            invite_id: this.unique_id,
            attendees: this.model.get("attendees")
        });
        f.render(this.model);
        g.render(this.model);
        h.render({
            invite_id: this.unique_id,
            current_attendee: this.current_attendee,
            comments: new CommentList(b.comments)
        });
        this.plugins();
    },
    notifyAll: function() {
        this.model.notifyAll($.proxy(this.notifyAllCallback, this));
    },
    notifyAllCallback: function(a) {
        alert_notification([ {
            alertType: "success",
            message: "Everyone in the invite is going to be notified in the next few minutes"
        } ], 5e3);
    },
    plugins: function() {
        var a = this;
        a.block(".invite-background", "half");
        $(window).resize(function() {
            a.block(".invite-background", "half");
        });
    },
    validateInviteIsCurrent: function(a) {
        var b = moment(a);
        var c = moment();
        if (b < c) {
            alert_notification([ {
                alertType: "warning",
                message: "This invite is in the Past you cannot edit it anymore"
            } ], 5e3);
        }
    }
});

InviteAttendeesView = Backbone.View.extend({
    template: JST["invite_attendees.html"],
    el: "#invite-attendees",
    confirmed: null,
    negated: null,
    no_response: null,
    current_attendee: null,
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .invite-attendees-acknowledge-yes": "yesButtonClick",
        "click .invite-attendees-acknowledge-no": "noButtonClick"
    },
    render: function(a) {
        this.model = a.attendees;
        this.current_attendee = a.current_attendee;
        this.separateAttendees();
        var b = {
            no_response: this.no_response.collectionToJSON(),
            confirmed: this.confirmed.collectionToJSON(),
            negated: this.negated.collectionToJSON(),
            attendee: this.current_attendee != null ? this.current_attendee.toJSON() : null
        };
        this.$el.html(this.template(b));
        this.$table = this.$el.find(".contact-table");
        this.$newContact = $(".contact-input");
        return this.$el.html();
    },
    separateAttendees: function() {
        this.no_response = new ContactList();
        this.negated = new ContactList();
        this.confirmed = new ContactList();
        var a = this;
        this.model.forEach(function(b) {
            var c = b.get("status");
            if (c == "yes") {
                a.confirmed.add(b);
            } else if (c == "no") {
                a.negated.add(b);
            } else {
                a.no_response.add(b);
            }
        });
    },
    yesButtonClick: function(a) {
        this.attendeeRSVP("yes");
    },
    noButtonClick: function(a) {
        this.attendeeRSVP("no");
    },
    attendeeRSVP: function(a) {
        if (this.current_attendee == null) {
            alert_notification([ {
                alertType: "danger",
                message: "Something wrong happened, you shouldnt be able to SAY " + a + " You are nobody!!!"
            } ]);
            return;
        }
        this.current_attendee.set("status", a);
        this.current_attendee.acknowledgeInvite(a, $.proxy(this.attendeeRSVPCallback, this));
    },
    attendeeRSVPCallback: function() {
        var a = this.model.getById(this.current_attendee.get("unique_id"));
        a.set("status", this.current_attendee.get("status"));
        this.render({
            attendees: this.model,
            current_attendee: this.current_attendee
        });
    }
});

InviteCommentsView = Backbone.View.extend({
    template: JST["invite_comments.html"],
    el: "#invite-comments",
    invite_id: null,
    current_attendee: null,
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .add-comment": "addComment",
        "keyup .invite-comment-input": "addCommentEnter"
    },
    render: function(a) {
        console.log(a.invite_id);
        this.invite_id = a.invite_id;
        this.current_attendee = a.current_attendee;
        this.model = a.comments;
        var b = {
            comments: this.model.collectionToJSON()
        };
        this.$el.html(this.template(b));
        this.$comment_container = this.$el.find(".invite-comments-container");
        this.$comment_input = this.$el.find(".invite-comment-input");
        this.listenTo(this.model, "add", this.newCommentModel);
    },
    addCommentEnter: function(a) {
        if (a.keyCode != 13) {
            return;
        }
        this.addComment();
    },
    addComment: function() {
        if (this.$comment_input.val() == "") return;
        var a = new CommentModel({
            comment: this.$comment_input.val(),
            author: this.current_attendee != null ? this.current_attendee.someIdentifier() : null
        });
        a.submit(this.invite_id, this.current_attendee != null ? this.current_attendee.get("unique_id") : null);
        this.model.add(a);
        this.$comment_input.val("");
        this.$comment_input.focus();
    },
    newCommentModel: function(a) {
        this.$comment_container.prepend(JST["invite_comment.html"](a.toJSON()));
    }
});

InviteDetailsView = SimpleView.extend({
    template: JST["invite_details.html"],
    el: "#invite-details",
    bindings: {
        ".event-name": "title",
        ".event-name-input": "title",
        ".event-description": "description",
        ".event-description-input": "description",
        ".event-where": "where",
        ".event-location-input": "where",
        ".event-start-date": "start_date",
        ".event-start-time": "start_time",
        ".event-end-date": "end_date",
        ".event-end-time": "end_time"
    },
    initialize: function(a) {
        this.options = a || {};
        this.inviteId = this.options.id;
    },
    events: {
        "click .invite-date": "edit_start_date",
        "click .invite-end-date": "edit_end_date",
        "click .location-title": "edit_location",
        "click .edit-button": "edit",
        "blur .event-location-input": "save"
    },
    render: function(a, b) {
        if (b == null) b = {};
        this.model = a;
        var c = this.model.toJSON();
        c["is_editing_start_date"] = b.is_editing_start_date;
        c["is_editing_end_date"] = b.is_editing_end_date;
        c["is_editing_location"] = b.is_editing_location;
        this.$el.html(this.template(c));
        if (b.is_editing_start_date || b.is_editing_end_date) {
            this.edit_plugins();
            this.stickit();
        } else {
            this.read_plugins();
        }
    },
    edit_start_date: function() {
        this.render(this.model, {
            is_editing_start_date: true
        });
        this.edit_plugins();
    },
    edit_end_date: function() {
        this.render(this.model, {
            is_editing_end_date: true
        });
        this.edit_plugins();
    },
    edit_location: function() {
        this.render(this.model, {
            is_editing_location: true
        });
        this.edit_plugins();
    },
    save: function() {
        if (!validator.validateItems(".valid-before-submit")) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        this.model.submit(this.submitSuccess, this);
    },
    submitSuccess: function(a, b) {
        a.render(a.model, false);
    },
    read_plugins: function() {
        $("#bt_toggle").bootstrapToggle();
    },
    edit_plugins: function() {
        this.$el.find(".event-start-date, .event-end-date").datetimepicker({
            pickTime: false
        });
        this.$el.find(".event-start-time, .event-end-time").datetimepicker({
            pickDate: false
        });
        this.initWhere();
        $("#bt_toggle").bootstrapToggle();
    },
    initWhere: function() {
        var a = this;
        if (typeof google === "undefined") return;
        a.$where = this.$el.find(".event-location-input");
        autocomplete = new google.maps.places.Autocomplete(a.$where[0], {
            types: [ "geocode" ]
        });
        var b = function() {
            var b = autocomplete.getPlace();
            a.model.set("where", b.formatted_address);
        };
        google.maps.event.addListener(autocomplete, "place_changed", function() {
            b();
        });
    },
    geoLocateWhere: function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(a) {
                var b = new google.maps.LatLng(a.coords.latitude, a.coords.longitude);
                var c = new google.maps.Circle({
                    center: b,
                    radius: a.coords.accuracy
                });
                autocomplete.setBounds(c.getBounds());
            });
        }
    },
    share_on_facebook_auth: function() {
        if (currentUser != null && currentUser.social_sharing.facebook || !$("#bt_toggle").is(":checked")) return;
        window.open(api.url + "/social_sharing/facebook", "_blank", "toolbar=yes, scrollbars=no, resizable=yes, top=500, left=500");
    }
});

InviteHeaderView = SimpleView.extend({
    template: JST["invite_header.html"],
    el: "#invite-header",
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "#upload_image_file change": "image_changed"
    },
    upload_image: function(a) {
        var b = $("#upload_image_form");
        var c = $(".invite-background");
        $.ajax({
            url: a,
            type: "POST",
            data: new FormData(b[0]),
            processData: false,
            contentType: false,
            success: function(a) {
                var b = "/image/" + a + "?" + new Date().getTime();
                c.css("background-image", "url(" + b + ")");
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: "Image couldnt be uploaded"
                } ]);
            }
        });
    },
    render: function(a) {
        this.model = a;
        var b = this.model.toJSON();
        this.$el.html(this.template(b));
        if (this.options.is_admin) $("#image_select_btn").show(); else $("#image_select_btn").hide();
        this.$image_file = this.$el.find("#upload_image_file");
        this.$image_form = this.$el.find("#upload_image_form");
        var c = this;
        var d = new InviteTitleView({
            el: ".invite-title-container",
            is_editable: this.options.is_admin
        });
        d.render(this.model);
        this.$image_file.on("change", function() {
            $.ajax({
                url: "/image/" + c.$image_form.data("id") + "/upload_url",
                type: "GET",
                success: function(a) {
                    c.upload_image(a);
                },
                error: function(a) {
                    alert_notification([ {
                        alertType: "danger",
                        message: "Image couldnt be uploaded"
                    } ]);
                }
            });
        });
        this.$el.find("#image_select_btn").click(function() {
            c.$image_file.click();
        });
    }
});

InviteTitleView = Backbone.View.extend({
    initialize: function(a) {
        this.options = a || {
            is_editable: false
        };
    },
    render: function(a, b) {
        var c = this;
        this.model = a;
        if (!b) {
            var d = '<h1 class="main-h1">' + c.model.get("title") + "</h1>";
            this.$el.html(d);
            if (this.options.is_editable) {
                var e = this.$el.find(".main-h1");
                e.on("click", function() {
                    c.render(c.model, true);
                });
            }
        } else {
            var f = '<input type="text" class="edit-title-input" value="' + c.model.get("title") + '">';
            this.$el.html(f);
            this.$input = this.$el.find(".edit-title-input");
            var g = function(a) {
                c.model.set("title", a);
                c.model.submit(c.submitSuccess, c);
            };
            this.$input.on("blur", function() {
                g(c.$input.val());
            });
            this.$input.on("keyup", function(a) {
                if (a.keyCode != 13) {
                    return;
                }
                g(c.$input.val());
            });
        }
    },
    submitSuccess: function(a, b) {
        a.render(a.model, false);
    }
});

SearchView = SimpleView.extend({
    template: JST["invite_search.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .search": "search_value",
        "keypress #searchBox": "type_key",
        "click .btn-duplicate": "duplicate",
        "click .btn-edit": "edit",
        "click .btn-cancel": "cancel",
        "click .invite-link": "navigate"
    },
    render: function(a, b) {
        this.hidePanels();
        this.model = a;
        if (this.model != null) {
            this.$el.html(this.template({
                invites: this.model.collectionToJSON()
            }));
        } else {
            this.$el.html(this.template({
                invites: {}
            }));
            this.search();
        }
        if (b != null) {
            var c = this.$el.find("#searchBox");
            c.val(b);
            c.focus();
        }
    },
    type_key: function(a) {
        if (a.keyCode == 13) {
            var b = this.$el.find("#searchBox");
            this.search(b.val());
            a.preventDefault();
            return false;
        }
    },
    search_value: function(a) {
        var b = this.$el.find("#searchBox");
        this.search(b.val());
    },
    search: function(a) {
        var b = this;
        var c = "/api/invite/search/" + currentUser.id + "?term=";
        if (a != null) c += a;
        $.ajax({
            url: c,
            type: "GET",
            cache: false,
            success: function(c) {
                var d = new InviteList();
                if (c != null) {
                    c.forEach(function(a) {
                        d.add(new InviteModel(a));
                    });
                }
                b.render(d, a);
            }
        });
    },
    duplicate: function(a) {
        var b = $(a.target);
        var c = b.data("id");
        Backbone.history.navigate("new/from/" + c, true);
    },
    edit: function(a) {
        var b = $(a.target);
        var c = b.data("id");
        Backbone.history.navigate("invite/" + c + "/edit", true);
    },
    navigate: function(a) {
        var b = $(a.target);
        var c = b.data("id");
        Backbone.history.navigate("invite/" + c, true);
    },
    cancel: function(a) {
        alert("not ready yet");
    }
});

InviteView = SimpleView.extend({
    template: JST["invite.html"],
    invite_id: null,
    current_attendee: null,
    initialize: function(a) {
        this.options = a || {};
        this.inviteId = this.options.id;
    },
    hidePanels: function() {
        $("#body-container").hide();
        $("#view-container").hide();
        $("#modal_container").hide();
        $("#invite-body").show();
    },
    render: function(a, b, c) {
        this.hidePanels();
        var d = this;
        this.invite_id = a;
        if (c != null) this.current_attendee = new Contact(c);
        if (this.invite_id == null) console.error("Invite Id is null, check routing");
        if (b == null) {
            var e = new InviteModel({
                unique_id: this.invite_id
            });
            e.fetch($.proxy(this.render, this));
            return;
        }
        var e = new InviteModel(b);
        this.$el.html(this.template());
        var f = new InviteHeaderView();
        var g = new InviteAttendeesView();
        var h = new InviteCommentsView();
        f.render(e);
        g.render({
            invite_id: this.invite_id,
            attendees: e.get("attendees"),
            current_attendee: this.current_attendee
        });
        h.render({
            invite_id: this.invite_id,
            current_attendee: this.current_attendee,
            comments: new CommentList(b.comments)
        });
        $("#invite-location").html(b.where);
        $(".invite-date").html(b.start);
        $(".invite-end-date").html(b.end);
        $(".invite-description").html(b.description);
        this.plugins();
    },
    events: {
        "keypress .invite-newComment": "addNewComment"
    },
    plugins: function() {
        var a = this;
        a.block(".invite-background", "half");
        $(window).resize(function() {
            a.block(".invite-background", "half");
        });
    }
});

LoginView = SimpleView.extend({
    template: JST["login.html"],
    render: function(a) {
        this.hidePanels();
        this.$el.html(this.template());
    }
});

ModalView = Backbone.View.extend({
    childView: null,
    template: null,
    initialize: function(a) {
        this.options = a || {};
        this.childView = this.options.childView;
        this.template = this.options.template;
        if (Backbone.pubSub._events == null || Backbone.pubSub._events["childClose"] == null) Backbone.pubSub.on("childClose", this.onChildClose, this);
    },
    render: function(a) {
        var b = this.$el;
        var c = this;
        if (this.options.templateId != null) {
            var d = _.template($(this.options.templateId).html(), {});
            this.$el.html(d);
        } else if (this.template != null) this.$el.html(this.template());
        if (this.childView != null) {
            this.childView.render(a);
        }
        this.$el.find(".close-modal").click(function(a) {
            c.onChildClose({
                view: c.childView
            });
        });
        this.$el.show();
        return this;
    },
    onChildClose: function(a) {
        if (this.$el != null) this.$el.hide();
        Backbone.history.navigate("", true);
    }
});

NewView = SimpleView.extend({
    el: "#view-container",
    initialize: function(a) {
        this.options = a || {};
        this.model = new InviteModel();
    },
    events: {
        "click .send": "submitNew",
        "change .share_to_facebook": "share_on_facebook_auth"
    },
    bindings: {
        ".event-name": "title",
        ".event-name-input": "title",
        ".event-description": "description",
        ".event-description-input": "description",
        ".event-where": "where",
        ".event-location-input": "where",
        ".event-start-date": "start_date",
        ".event-start-time": "start_time",
        ".event-end-date": "end_date",
        ".event-end-time": "end_time"
    },
    template: JST["new.html"],
    contacts: null,
    render: function(a) {
        this.hidePanels();
        if (a.title != null) this.model.set("title", a.title);
        if (a.id != null) this.createFromInvite(a.id);
        this.$el.html(this.template(this.model.toJSON()));
        this.plugins();
        this.stickit();
        return this;
    },
    createFromInvite: function(a) {
        var b = this;
        $.ajax({
            url: "/api/invite/" + a,
            type: "GET",
            cache: false,
            success: function(a) {
                b.model = new InviteModel(a);
                b.model.set("unique_id", "");
                b.render(a);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    submitNew: function(a) {
        var b = this;
        if (!validator.validateItems(".valid-before-submit")) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        this.model.submit(this.inviteSubmitted, this, true);
    },
    inviteSubmitted: function(a, b) {
        Backbone.history.navigate("invite/" + b + "/edit", true);
    },
    share_on_facebook_auth: function() {
        if (currentUser != null && currentUser.social_sharing.facebook || !$("#bt_toggle").is(":checked")) return;
        window.open(api.url + "/social_sharing/facebook", "_blank", "toolbar=yes, scrollbars=no, resizable=yes, top=500, left=500");
    },
    plugins: function() {
        $("#bt_toggle").bootstrapToggle();
        this.$el.find(".event-start-date, .event-end-date").datetimepicker({
            pickTime: false,
            minDate: moment()
        });
        this.$el.find(".event-start-time, .event-end-time").datetimepicker({
            pickDate: false,
            minDate: moment().add(-10, "m")
        });
        this.initWhere();
    },
    initWhere: function() {
        var a = this;
        if (typeof google === "undefined") return;
        this.$where = this.$el.find(".event-location-input");
        autocomplete = new google.maps.places.Autocomplete(a.$where[0], {
            types: [ "geocode" ]
        });
        var b = function() {
            var b = autocomplete.getPlace();
            a.model.set("where", b.formatted_address);
        };
        google.maps.event.addListener(autocomplete, "place_changed", function() {
            b();
        });
    },
    geoLocateWhere: function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(a) {
                var b = new google.maps.LatLng(a.coords.latitude, a.coords.longitude);
                var c = new google.maps.Circle({
                    center: b,
                    radius: a.coords.accuracy
                });
                autocomplete.setBounds(c.getBounds());
            });
        }
    }
});

UserProfileView = SimpleView.extend({
    template: JST["editProfile.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .save-profile": "save"
    },
    render: function() {
        this.hidePanels();
        this.$el.html(this.template());
        this.$name = this.$el.find("#edit-profile-name");
        this.$username = this.$el.find("#edit-profile-username");
        this.$password = this.$el.find("#edit_profile_password");
        this.$password_confirm = this.$el.find("#edit_profile_password_confirm");
        this.$email = this.$el.find("#edit-profile-email");
        var a = this;
        $.ajax({
            url: "/api/profile/" + currentUser.id,
            type: "GET",
            cache: false,
            success: function(b) {
                console.log(b);
                if (b.email != null) {
                    a.$email.html(b.email);
                    a.$email.parent().addClass("floating-label-form-group-with-value");
                }
                if (b.username != null) {
                    a.$username.val(b.username);
                    a.$username.parent().addClass("floating-label-form-group-with-value");
                }
                if (b.name != null) {
                    a.$name.val(b.name + " " + b.last_name);
                    a.$name.parent().addClass("floating-label-form-group-with-value");
                }
            }
        });
    },
    save: function() {
        if (!validator.validateItems(".valid-before-submit")) return;
        if (this.$password.val() != null && this.$password.val() != this.$password_confirm.val()) {
            alert_notification([ {
                alertType: "warning",
                message: "Password and Password confirm don't match!!!"
            } ]);
        }
        var a = {
            username: this.$username.val()
        };
        a.name = this.$name.val().split(" ")[0];
        a.last_name = this.$name.val().split(" ")[1];
        if (this.$password.val() != null && this.$password.val() != "") a.password = this.$password.val();
        var b = this;
        $.ajax({
            url: "/api/profile/" + currentUser.id,
            type: "POST",
            data: JSON.stringify(a),
            cache: false,
            success: function(a) {
                Backbone.history.navigate("/search", true);
            }
        });
    }
});

SentView = Backbone.View.extend({
    template: JST["invite_sent.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .submit-register": "registerEmail"
    },
    render: function() {
        this.$el.html(this.template({
            invite_id: this.model
        }));
        this.$email = this.$el.find(".register-email");
    },
    registerEmail: function() {
        if (!validator.validateItem(this.$email)) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var a = this;
        $.ajax({
            url: "/register/email/" + this.$email.val(),
            type: "POST",
            cache: false,
            success: function(b) {
                alert_notification([ {
                    alertType: "success",
                    message: "Account Created Successfully, please check your email"
                } ]);
                Backbone.pubSub.trigger("childClose", {
                    view: a
                });
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

UserRegisterView = SimpleView.extend({
    template: JST["register.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .submit-register": "registerEmail"
    },
    render: function() {
        this.hidePanels();
        this.$el.html(this.template());
        this.$email = this.$el.find(".register-email");
    },
    registerEmail: function() {
        if (!validator.validateItem(this.$email)) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var a = this;
        $.ajax({
            url: "/register/email/" + this.$email.val(),
            type: "POST",
            cache: false,
            success: function(a) {
                alert_notification([ {
                    alertType: "success",
                    message: "Account Created Successfully, please check your email"
                } ]);
                window.location.href = "/";
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

function init_app() {
    window.App = {
        Models: {},
        Collections: {},
        Views: {},
        Router: {}
    };
    Backbone.pubSub = _.extend({}, Backbone.Events);
    Backbone.pubSub.publish = Backbone.pubSub.trigger;
    Backbone.pubSub.subscribe = Backbone.pubSub.bind;
    Backbone.pubSub.unsubscribe = Backbone.pubSub.unbind;
    index_view = new IndexView({
        el: "#body-container"
    });
    login_view = new LoginView({
        el: "#view-container",
        templateId: "#login"
    });
    user_register_view = new UserRegisterView({
        el: "#view-container"
    });
    user_profile_view = new UserProfileView({
        el: "#view-container"
    });
    search_view = new SearchView({
        el: "#view-container"
    });
    admin_view = new InviteAdminView({
        el: "#invite-body"
    });
    invite_view = new InviteView({
        el: "#invite-body"
    });
    sent_view = new SentView({
        el: "#modal_container"
    });
    sent_view_modal = new ModalView({
        el: $("#modal_container"),
        childView: sent_view
    });
    contacts_view = new ContactsView({
        el: "#contact-list"
    });
    contactsNew_view = new ContactsNewView({
        el: "#contact-new"
    });
    App.Router = Backbone.Router.extend({
        routes: {
            "": "index",
            "_=_": "index",
            "new": "new",
            "new/:title": "new",
            "new/:title/from/:id": "new",
            "new/from/:id": "new_no_title",
            "sent/:id": "sent",
            search: "search",
            login: "login",
            "profile/edit": "edit_profile",
            register: "register",
            "invite/:id/edit": "view_as_organizer",
            "invite/:id": "view_as_attendee",
            "invite/:id/:invite_attendee_id": "view_as_attendee",
            contacts: "contacts",
            "contacts/new": "contacts_new"
        },
        index: function() {
            index_view.render();
        },
        login: function() {
            login_view.render();
        },
        register: function() {
            user_register_view.render();
        },
        edit_profile: function() {
            user_profile_view.render();
        },
        "new": function(a, b) {
            var c = new NewView({
                el: "#view-container"
            });
            c.render({
                title: a,
                id: b
            });
        },
        new_no_title: function(a) {
            this.new(null, a);
        },
        sent: function(a) {
            sent_view_modal.childView.model = a;
            sent_view_modal.render();
        },
        search: function() {
            search_view.render();
        },
        view_as_organizer: function(a) {
            var b = typeof invite != "undefined" ? invite : null;
            admin_view.render(a, b);
        },
        view_as_attendee: function(a, b) {
            var c = typeof invite != "undefined" ? invite : null;
            var d = typeof invite_attendee != "undefined" ? invite_attendee : null;
            invite_view.render(a, c, d);
        },
        contacts: function() {
            contacts_view.render({
                contactList: contactList,
                groupList: groupList
            });
        },
        contacts_new: function() {
            contactsNew_view.render({
                contactList: contactList
            });
        }
    });
    if (window.location.hash && window.location.hash == "#_=_") {
        window.location.hash = "";
    }
    new App.Router();
    Backbone.history.start({
        pushState: true
    });
    $("#notification-alerts").toggleClass("in");
    $("body").on("click", ".navigate", function(a) {
        var b = $(this).data("where");
        if (b != null) Backbone.history.navigate(b, true); else Backbone.history.navigate("/", true);
    });
    $("body").on("input propertychange", ".floating-label-form-group", function(a) {
        $(this).toggleClass("floating-label-form-group-with-value", !!$(a.target).val());
    }).on("focu s", ".floating-label-form-group", function() {
        $(this).addClass("floating-label-form-group-with-focus");
    }).on("blur", ".floating-label-form-group", function() {
        $(this).removeClass("floating-label-form-group-with-focus");
    });
}

$(function() {
    init_app();
});