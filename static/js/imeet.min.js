this["JST"] = this["JST"] || {};

this["JST"]["add-group.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="modal addGroup-modal" tabindex="-1" >\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header">\n            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&amp;times;</button>\n            <h4 class="modal-title" id="myModalLabel">Add New Group</h4>\n            </div>\n            <div class="modal-body">\n                <input type="text" class="form-control new-group-input" />\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-default close-dialog" data-dismiss="modal">Close</button>\n                <button type="button" class="btn btn-primary new-group-btn">Create</button>\n        </div>\n    </div>\n  </div>\n</div>';
    }
    return __p;
};

this["JST"]["comment.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="col-md-12 invite-comment-row">\n    <div class="col-xs-4 col-md-2 invite-comment-author">' + __e(author) + '</div>\n    <div class="col-xs-8 col-md-10">' + __e(comment) + "</div>\n</div>";
    }
    return __p;
};

this["JST"]["contact_item.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="contact-row col-sm-12" data-id="' + __e(unique_id) + '" draggable="true">\n    <div class="editable col-sm-4 col-xs-8" >\n        ' + __e(name) + '\n    </div>\n    <div class="editable desktop tablet col-sm-4">' + __e(email) + '</div>\n    <div class="editable desktop tablet col-sm-2">' + __e(phone) + '</div>\n    <div class="col-sm-2 col-xs-4 update-column">\n        <a class="editable" href="#"><i class="fa-pen fa-1_2x"></i></a>\n        <a class="delete-contact" href="#"><i data-id="' + __e(unique_id) + '" class="fa-delete-garbage-streamline fa-1_2x"></i></a>\n    </div>\n</div>';
    }
    return __p;
};

this["JST"]["contact_item_edit.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="row" data-id="' + __e(unique_id) + '">\n    <div class="editable col-sm-4 col-xs-8">\n        <input id="edit-name" value="' + __e(name) + '" placeholder="Name...">\n    </div>\n    <div class="desktop tablet col-sm-4">\n        <input id="edit-email" value="' + __e(email) + '" placeholder="Email...">\n    </div>\n    <div class="desktop tablet col-sm-2">\n        <input id="edit-phone" value="' + __e(phone) + '" placeholder="Phone...">\n    </div>\n    <div class="col-sm-2 col-xs-4 update-column">\n        <a href="#" class="finish-edit">OK</a>\n    </div>\n</div>';
    }
    return __p;
};

this["JST"]["contact_item_typeahead.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="row" data-id="' + __e(unique_id) + '">\n    <div class="editable col-sm-4 col-xs-8">\n        ' + __e(name) + '\n    </div>\n    <div class="editable desktop tablet col-sm-4">' + __e(email) + '</div>\n    <div class="editable desktop tablet col-sm-2">' + __e(phone) + "</div>\n</div>";
    }
    return __p;
};

this["JST"]["editProfile.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="edit-profile-view">\n\n   <div class="col-xs-12 text-center">\n       <h4>Edit your profile</h4>\n   </div>\n\n   <div class="col-xs-12 text-center">\n       <div id="edit-profile-email">Email</div>\n   </div>\n\n   <div class="col-xs-12 text-center">\n       <input id="edit-profile-name" type="text" class="form-control valid-before-submit" placeholder="John Smith..." data-validation="required">\n   </div>\n\n   <div class="col-xs-12 text-center">\n       <input id="edit-profile-username" type="text" class="form-control valid-before-submit" placeholder="username..." data-validation="required">\n   </div>\n\n   <div class="col-xs-12 text-center">\n       <input id="edit_profile_password" name="edit_profile_password" type="password" class="form-control" placeholder="password...">\n   </div>\n\n    <div class="col-xs-12 text-center">\n       <input name="edit_profile_password_confirm" id="edit_profile_password_confirm" type="password" class="form-control" placeholder=" confirm password...">\n   </div>\n\n    <div class="col-xs-12 text-center">\n       <button type=\'button\' class=\'save-profile btn btn-info form-control\'>Save</button>\n    </div>\n\n</div>\n';
    }
    return __p;
};

this["JST"]["edit_contact.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="form-horizontal contacts-form">\n  <div class="form-group">\n    <label for="nameInput">Name</label>\n    <input type="text" class="form-control contact_input" id="nameInput" placeholder="Jane Doe" data-validation="required">\n  </div>\n\n  <div class="form-group">\n    <label for="emailInput">Email contact</label>\n    <input type="email" class="form-control contact_input" id="emailInput" placeholder="jane.doe@example.com" data-validation="email">\n  </div>\n  <div class="form-group">\n    <label for="phoneInput">Phone number</label>\n    <input type="text" class="form-control contact_input" id="phoneInput" placeholder="123-456-7890" data-validation="phone">\n  </div>\n\n  <div class="form-group">\n    <a class="add-contact btn" id="save-contact">Add contact</a>\n  </div>\n</div>';
    }
    return __p;
};

this["JST"]["group.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="container groups">\n';
        _.each(groupList, function(a) {
            __p += "\n    ";
            var b = randomColor();
            var c = colorInverter(b);
            __p += '\n      <div data-id="' + __e(a.unique_id) + '" class="group col-md-1" style="background-color: #' + __e(b) + ";color: #" + __e(c) + '">' + __e(cut(a.name)) + "</div>\n";
        });
        __p += "\n</div>\n";
    }
    return __p;
};

this["JST"]["invite.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '\n\n<div class="snap-panel invite-create">\n    <section data-panel="first" class="container invite first">\n        <div class="row text-center invite-content ">\n            <div class="">\n                <h4>Event</h4>\n            </div>\n            <div class="">\n\n                ';
        if (currentUser == null) {
            __p += '\n                    <label class="small-text">\n                    Note: For sms/calls to work, you have to be a registered\n                    <br/>\n                    Note2: Sms/calls will be free only during the beta phase. After that a subscription base fee will be offered\n                    </label>\n                ';
        }
        __p += '\n            </div>\n            <div class="row">\n                <div class="col-xs-12 col-md-8 col-md-offset-2">\n                    <input required type="text" class="form-control event-name valid-before-submit" placeholder="Event" autofocus data-validation="required" >\n                </div>\n            </div>\n\n            <div class="row small-margin-top">\n                <h4>Details</h4>\n            </div>\n\n            <div class="row">\n                <div class="col-xs-12 col-md-8 col-md-offset-2">\n                  <input type="text" class="form-control event-where" placeholder="Location...."  >\n                </div>\n            </div>\n\n            <div class="row">\n                <div class="col-xs-12  col-md-3 col-md-offset-2">\n                    <div class="date-group" id="start-date-group">\n                        <input readonly="true" required type="text" class="date event-start-date valid-before-submit" placeholder="01/01/2000"\n                               data-validation="required,date"\n                        >\n                        <input readonly="true" required type="int" class="time event-start-time  valid-before-submit" placeholder="00:00 AM" data-validation="required" >\n                    </div>\n                </div>\n                <div class="col-xs-12 col-md-2 text-center label-text">\n                    To\n                </div>\n                <div class="col-xs-12 col-md-3">\n                    <div class="date-group">\n                        <input readonly="true" required type="text" class="date event-end-date" placeholder="01/01/2000">\n                        <input readonly="true" required type="text" class="time event-end-time" placeholder="00:00 AM"  >\n                    </div>\n                </div>\n            </div>\n            <div class="row desktop tablet small-margin-top">\n                <div class="col-xs-12 col-md-8 col-md-offset-2">\n                  <textarea class="form-control event-description" rows="6"></textarea>\n                </div>\n            </div>\n\n        </div>\n        <div class="row  menu-container menu-down">\n            <ul class="menu">\n                <li>\n                    <a href="" data-panel="second"><i class="fa fa-angle-down fa-5x"></i></a>\n                </li>\n            </ul>\n        </div>\n    </section>\n\n        <section data-panel="second" class="container invite third">\n            <div class="text-center invite-content invite-contacts-setup ">\n                <div class="row">\n                    <div class="col-xs-12 col-md-8 col-md-offset-2 text-center">\n                        <h4>Who is invited?</h4>\n                    </div>\n                </div>\n\n                <div class="row">\n                    <div class="text-center col-xs-8 col-md-7 col-md-offset-2 contact-input-container">\n                        <input type="text" class="contact-input form-control"\n                            ';
        if (features.indexOf("voice") != -1) {
            __p += "\n                                data-validation='required,email|phone' placeholder='Name, Phone Number, Email'\n                            ";
        } else {
            __p += "\n                                data-validation='required,email' placeholder='Email Address'\n                            ";
        }
        __p += '>\n                    </div>\n                    <div class="col-xs-3 col-md-1">\n                        <button type="button" class="btn new-contact-button form-control">+</button>\n                    </div>\n                </div>\n\n                <div class="row">\n                    <div class="contact-table text-center col-xs-12 col-md-8 col-md-offset-2">\n\n                    </div>\n                </div>\n            </div>\n\n            <div class="row menu-container menu-down  desktop tablet">\n                <ul class="menu">\n                    <li>\n                        <a href="" data-panel="third"><i class="fa fa-angle-down fa-5x"></i></a>\n                    </li>\n                </ul>\n            </div>\n        </section>\n\n        <section data-panel="third" class="container invite fourth">\n            <div class="row text-center invite-content">\n                <div id="reportXXX"></div>\n            </div>\n\n             <div class="row  menu-container menu-down">\n                 <div class="row bt_toggle_parent">\n                    <label for="bt_toggle">Share on Facebook</label>\n                    <input type="checkbox"\n                       data-toggle="toggle"\n                       id="bt_toggle"\n                       class="share_to_facebook"\n                       data-style="android"\n                       data-onstyle="info"\n                       data-onstyle="success" data-offstyle="danger" />\n                </div>\n                <button type="button" class="btn form-control btn-success send">Send</button>\n            </div>\n        </section>\n</div>\n\n\n<!-- Footer -->\n<div class="section-container footer desktop navbar-fixed-bottom">\n<div class="footer-below">\n    <div class="container">\n      <div class="row">\n          <div class="col-lg-12">\n              Miami, FL<br/>\n              Copyright 2014 &copy; iMeet Inc. All rights reserved.\n          </div>\n      </div>\n    </div>\n</div>\n</div>\n';
    }
    return __p;
};

this["JST"]["inviteReport.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="invite-view">\n    <div class="panel">\n         <div class="panel-heading" >\n            <div class="row">\n                 <div class=\'pull-left col-xs-3 col-md-6\'><h2 class=\'invite-title\'></h2></div>\n                 <div class=\'col-xs-9 col-md-4 text-right\'>\n                    <div class=\'col-xs-12 col-md-12 invite-date\'></div>\n                 </div>\n            </div>\n         </div>\n     </div>\n\n    <div class="invite-location"></div>\n\n    <div class="invite-content row small-margin-top">\n        <div class="col-md-6 attendees">\n            <div class="row">\n                <h4><b>Attendees</b></h4>\n            </div>\n            <div class="row invite-table">\n\n            </div>\n        </div>\n        <div class="col-md-6 hangout">\n            <h4><b>Hangout</b></h4>\n            <div class="row invite-comments">\n            </div>\n            <input placeholder="Write a comment..." class="invite-newComment form-control ">\n        </div>\n    </div>\n</div>\n\n\n<!-- Footer -->\n<div class="section-container footer desktop navbar-fixed-bottom">\n<div class="footer-below">\n    <div class="container">\n      <div class="row">\n          <div class="col-lg-12">\n              Miami, FL<br/>\n              Copyright 2014 &copy; iMeet Inc. All rights reserved.\n          </div>\n      </div>\n      <div class="row">\n        <div class="col-lg-12 quiet">\n            <br/>Built with love, Internet style\n        </div>\n      </div>\n    </div>\n</div>\n</div>\n\n';
    }
    return __p;
};

this["JST"]["invite_report.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += "<style>\n  .toggle.android { border-radius: 0px;}\n  .toggle.android .toggle-handle { border-radius: 0px; }\n</style>\n\n<div class=\"row equidistant invite_report\">\n    <div class=\"col-xs-12 col-md-8 col-md-offset-2\">\n        <div class=\"panel\">\n         <div class=\"panel-heading\" >\n                <div class=\"row\">\n                     <div class='pull-left col-xs-3 col-md-6'><h4 class='event-name'></h4></div>\n\n                     <div class='col-xs-9 col-md-6 text-right'>\n                        <div class='col-xs-12 col-md-12 event-start-date-formatted'></div>\n                        <div class='col-xs-12 col-md-12 event-end-date-formatted'></div>\n                     </div>\n                </div>\n             </div>\n         </div>\n\n         <div class=\"panel-body container text-left\">\n            <div class='col-md-6'>\n                <div class='pull-left event-description col-xs-12 col-md-12'></div>\n                <div class='pull-left event-where col-md-12'></div>\n            </div>\n            <div class='col-xs-12 col-md-6'>\n                <ul class=\"contact-read-table\" style=\"list-style: none\">\n                </ul>\n            </div>\n          </div>\n        </div>\n    </div>\n</div>\n";
    }
    return __p;
};

this["JST"]["invite_sent.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="modal-content">\n    <form id="registerForm">\n        <div class="close-modal" data-action="dismiss">\n            <div class="lr">\n                <div class="rl">\n                </div>\n            </div>\n        </div>\n\n        <div class="container">\n            <div class="row">\n                Invite Link <a href="http://imeet.io/view/';
        print(invite_id);
        __p += '"><h5 class="text-lowercase">http://imeet.io/view/';
        print(invite_id);
        __p += '</h5></a>\n            </div>\n            <div class="row small-margin-top"></div>\n            <div class="row">\n               Register\n               <div class="controls">\n                   <div class="col-sm-3"></div>\n                    <div class="col-sm-6">\n                        <div class="col-sm-9">\n                            <input required type="email" class="form-control register-email" placeholder="Enter email..." data-validation="email">\n                        </div>\n                        <div class="col-sm-3">\n                            <button type="button" class="btn btn-success form-control submit-register">Go</button>\n                        </div>\n                    </div>\n                    <div class="col-sm-3"></div>\n                </div>\n           </div>\n        </div>\n    </form>\n</div>\n';
    }
    return __p;
};

this["JST"]["login.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="row medium-margin-top">\n   <div class="col-md-12 section-item contact-table equidistant">\n      <form id="loginForm" action="/login" method="post">\n          <section class="section">\n              <div class="row controls">\n                  <div class="col-sm-4"></div>\n                  <div class="col-sm-4 medium-margin">\n                      <h4>Login</h4>\n                      <fieldset>\n                          <div class="row">\n                              <div class="col-sm-1"></div>\n                              <div class="col-sm-10">\n                                  <input id="username" name="username" required type="text" class="form-control small-margin" placeholder="Username">\n                                  <input id="password" name="password" required type="password" class="form-control small-margin" placeholder="Password">\n                              </div>\n                              <div class="col-sm-1"></div>\n\n                          </div>\n                          <div class="row">\n                              <div class="col-sm-1"></div>\n                              <div class="col-sm-10">\n                                  <label class="remember pull-right" style="padding: 10px">\n                                    Remember me?\n                                    <input type="checkbox" name="remember_me" id="remember_me" value="on">\n                                  </label>\n                              </div>\n                              <div class="col-sm-1"></div>\n                          </div>\n                          <div class="row">\n                              <div class="col-sm-1"></div>\n                              <div class="col-sm-10"><button type="submit" class="btn btn-success form-control pull-right">Login</button></div>\n                              <div class="col-sm-1"></div>\n                          </div>\n\n                          <div class="row" style="margin-top: 20px">\n                              <div class="col-sm-1"></div>\n                              <div class="col-sm-10">\n                                  <div id="third_party_login">\n                                      <ul class="social-login-icons">\n                                          <li style="width: auto">\n\n                                          </li>\n                                          <li>\n                                              <a href="/social_login/google">\n                                                  <i class="fa fa-google fa-2x"></i>\n                                              </a>\n                                          </li>\n                                          <li>\n\n                                              <a href="/social_login/facebook">\n                                                  <i class="fa fa-facebook fa-2x"></i>\n                                              </a>\n                                          </li>\n                                      </ul>\n                                  </div>\n                              </div>\n                              <div class="col-sm-1"></div>\n                          </div>\n\n                          <div class="row" style="margin-top: 20px">\n                              <div class="col-sm-1"></div>\n\n                              <div class="col-sm-1"></div>\n                          </div>\n\n                          <div class="row">\n                              <div class="col-sm-1"></div>\n                              <div class="col-sm-10">\n                                  <label class="remember pull-right">\n                                      Don\'t have an account?\n                                      <a href="/register" class="">Sign Up - It\'s Free.</a>\n                                  </label>\n                              </div>\n                              <div class="col-sm-1"></div>\n                          </div>\n                      </fieldset>\n                  </div>\n                  <div class="col-sm-4"></div>\n              </div>\n          </section>\n        </form>\n    </div>\n</div>';
    }
    return __p;
};

this["JST"]["register.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="signup-container">\n    <div class="signup">\n        <h4>I want in!</h4>\n       <div class="row controls">\n           <div class="col-sm-3"></div>\n            <div class="col-sm-6">\n                <div class="col-sm-9">\n                    <input required type="email" class="form-control register-email" placeholder="Enter email..." data-validation="email">\n                </div>\n                <div class="col-sm-3">\n                    <button type="button" class="btn btn-success form-control submit-register">Go</button>\n                </div>\n            </div>\n            <div class="col-sm-3"></div>\n        </div>\n    </div>\n</div>\n\n<!-- Footer -->\n<div class="section-container footer desktop navbar-fixed-bottom">\n<div class="footer-below">\n    <div class="container">\n      <div class="row">\n          <div class="col-lg-12">\n              Miami, FL<br/>\n              Copyright 2014 &copy; iMeet Inc. All rights reserved.\n          </div>\n      </div>\n    </div>\n</div>\n</div>\n';
    }
    return __p;
};

this["JST"]["search.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '\n<div class="search-view">\n    <div class="controls">\n        <div class="col-sm-10">\n            <input id="searchBox" type="text" class="form-control event-name" placeholder="Invite Title" data-validation="required">\n        </div>\n        <div class="col-sm-2">\n            <button type="button" class="btn btn-success form-control search">Search</button>\n        </div>\n    </div>\n    <div class="" style="height: 50px"></div>\n    <div class="search-result">\n    </div>\n</div>\n\n';
    }
    return __p;
};

if (!String.prototype.format) String.prototype.format = function() {
    var a = arguments;
    return this.replace(/{(\d+)}/g, function(b, c) {
        return typeof a[c] != "undefined" ? a[c] : b;
    });
};

Backbone.Model.prototype.toJSON2 = function() {
    var a = _.clone(this.attributes);
    for (var b in a) {
        if (a[b] instanceof Backbone.Model || a[b] instanceof Backbone.Collection) {
            a[b] = a[b].toJSON();
        }
    }
    return a;
};

function guid() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(a) {
        var b = Math.random() * 16 | 0, c = a == "x" ? b : b & 3 | 8;
        return c.toString(16);
    });
}

function alert_notification(a) {
    $(".alert").remove();
    var b = "" + '<div class="alert alert-{0} alert-dismissible flyover flyover-in" role="alert">' + '<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>' + "{1}" + "</div>";
    var c = $("body");
    a.forEach(function(a) {
        c.prepend(b.format(a.alertType, a.message));
    });
}

var validator = {
    digitsRegex: new RegExp("^[0-9]{10}$"),
    charsRegex: new RegExp(".*"),
    emailRegex: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    validateItems: function(a) {
        var b = true;
        var c = $(a);
        c.each(function(a) {
            var d = $(c[a]);
            b = validator.validateItem(d) && b;
        });
        return b;
    },
    validateString: function(a, b) {
        var c = false;
        switch (b) {
          case "required":
            c = a.length > 0;
            break;

          case "digits":
            c = validator.digitsRegex.test(a);
            break;

          case "non_numerics":
            c = validator.charsRegex.test(a);
            break;

          case "email":
            c = a.length == 0 || validator.emailRegex.test(a);
            break;

          case "phone":
            c = validator.digitsRegex.test(a) || a.length == 0;
            break;

          case "date":
            var d = new Date(a);
            c = d instanceof Date && !isNaN(d.valueOf());
            break;

          case "time":
            c = true;
            break;
        }
        return c;
    },
    validateItem: function(a) {
        var b = true;
        var c = a.data("validation");
        c.split(",").forEach(function(c) {
            var d = -1;
            if (c.indexOf(":") >= 0) {
                var e = c.split(":");
                c = e[0];
                d = parseInt(e[1]);
            }
            var f;
            try {
                var g = a.val();
                if (a.is(":checkbox")) {
                    if (!a.is(":checked")) g = "";
                }
                if (c.indexOf("|") != -1) {
                    var h = function(a, b) {
                        var b = c.split("|");
                        var d = a.split(",");
                        if (d.length == 0 || b.length == 0) return true;
                        var e = true;
                        d.forEach(function(a) {
                            a = a.trim();
                            var c = false;
                            b.forEach(function(b) {
                                c = validator.validateString(a, b) || c;
                            });
                            e = e && c;
                        });
                        return e;
                    };
                    f = h(g, c);
                } else f = validator.validateString(g, c);
                if (d != -1) f = f && g.length == d;
            } catch (i) {
                f = false;
            }
            b = f && b;
        });
        if (a.is(":checkbox")) {
            a = a.parent();
        }
        if (!b) this.errorValidationForItem(a); else this.succeedValidationForItem(a);
        return b;
    },
    errorValidationForItem: function(a) {
        this.validationUI(a, true);
    },
    succeedValidationForItem: function(a) {
        this.validationUI(a, false);
    },
    validationUI: function(a, b) {
        if (b) a.addClass("failed-validation"); else a.removeClass("failed-validation");
        var c = a.data("validation-siblings");
        if (c != null) {
            c.split(",").forEach(function(a) {
                var c = $(a);
                if (b) c.addClass("failed-validation"); else c.removeClass("failed-validation");
            });
        }
    }
};

var randomColor = function a() {
    var a = "0123456789ABCDEF".split("");
    var b = "";
    for (var c = 0; c < 6; c++) {
        b += a[Math.floor(Math.random() * 16)];
    }
    return b;
};

var cut = function b(a) {
    if (a.length >= 8) return a.substring(0, 8) + "...";
    return a;
};

var colorInverter = function c(a) {
    if (a.length != 6) {
        console.error("Hex color must be six hex numbers in length.");
        return false;
    }
    a = a.toUpperCase();
    var b = a.split("");
    var c = "";
    var d = "FEDCBA9876".split("");
    var e = new Array();
    e.A = "5";
    e.B = "4";
    e.C = "3";
    e.D = "2";
    e.E = "1";
    e.F = "0";
    for (i = 0; i < 6; i++) {
        if (!isNaN(b[i])) {
            c += d[b[i]];
        } else if (e[b[i]]) {
            c += e[b[i]];
        } else {
            console.error("Hex colors must only include hex numbers 0-9, and A-F");
            return false;
        }
    }
    return c;
};

Contact = Backbone.Model.extend({
    defaults: {
        name: "",
        email: "",
        phone: ""
    }
});

Group = Backbone.Model.extend({
    defaults: {
        name: ""
    }
});

ContactList = Backbone.Collection.extend({
    model: Contact,
    localStorage: new Store("backbone-contact"),
    getById: function(a) {
        return this.filter(function(b) {
            return b.get("unique_id") === a;
        });
    },
    removeBy: function(a) {
        this.remove(this.getById(a));
    },
    collectionToJSON: function() {
        return this.map(function(a) {
            return a.toJSON2();
        });
    }
});

GroupList = Backbone.Collection.extend({
    model: Group,
    localStorage: new Store("backbone-group"),
    getById: function(a) {
        return this.filter(function(b) {
            return b.get("unique_id") === a;
        });
    },
    removeBy: function(a) {
        this.remove(this.getById(a));
    },
    collectionToJSON: function() {
        return this.map(function(a) {
            return a.toJSON2();
        });
    }
});

SimpleView = Backbone.View.extend({
    initialize: function(a) {
        this.options = a || {};
    },
    hidePanels: function() {
        $("#body-container").hide();
        $("#view-container").show();
        $("#modal_container").hide();
    },
    clearTemplate: function() {
        $("#view-container").html("");
    }
});

var inviteBindings = {
    ".event-name": "title",
    ".event-start-date": "start_date",
    ".event-start-time": "start_time",
    ".event-end-date": "end_date",
    ".event-end-time": "end_time",
    ".event-description": "description",
    ".event-address-street": "address.street",
    ".event-address-suite": "address.suite",
    ".event-address-city": "address.city",
    ".event-address-zip": "address.zip",
    ".event-address-state": {
        observe: "address.state",
        selectOptions: {
            collection: function() {
                return [ {
                    value: null,
                    label: ""
                }, {
                    value: "FL",
                    label: "Florida"
                }, {
                    value: "NY",
                    label: "New York"
                }, {
                    value: "CA",
                    label: "California"
                } ];
            }
        }
    },
    ".event-start-date-formatted": {
        observe: [ "start_date", "start_time" ],
        onGet: function(a) {
            if (Date.parse(a[0] + " " + a[1])) return "From: " + a[0] + " " + a[1];
        }
    },
    ".event-end-date-formatted": {
        observe: [ "end_date", "end_time" ],
        onGet: function(a) {
            return "To: " + a[0] + " " + a[1];
        }
    },
    ".event-address-state-city": {
        observe: [ "address.state", "address.city" ],
        onGet: function(a) {
            var b = a[0] || "";
            var c = a[1] || "";
            if (b == null && c == null) return "";
            return c + ", " + b;
        }
    },
    ".event-address-street-with-number": {
        observe: [ "address.street", "address.suite" ],
        onGet: function(a) {
            var b = a[0] || "";
            var c = a[1] || "";
            return b + " " + c;
        }
    }
};

InviteModel = Backbone.Model.extend({
    defaults: {
        title: "",
        start_date: "",
        start_time: "",
        end_date: "",
        end_time: "",
        description: "",
        where: "",
        contacts: new ContactList(),
        all_contacts: new ContactList(),
        all_groups: new ContactList()
    }
});

var inviteBindings = {
    ".event-name": "title",
    ".event-start-date": "start_date",
    ".event-start-time": "start_time",
    ".event-end-date": "end_date",
    ".event-end-time": "end_time",
    ".event-description": "description",
    ".event-where": "where",
    ".event-start-date-formatted": {
        observe: [ "start_date", "start_time" ],
        onGet: function(a) {
            return "From: " + a[0] + " " + a[1];
        }
    },
    ".event-end-date-formatted": {
        observe: [ "end_date", "end_time" ],
        onGet: function(a) {
            return "To: " + a[0] + " " + a[1];
        }
    }
};

CreateContactView = Backbone.View.extend({});

ReadContactView = Backbone.View.extend({});

CreateView = SimpleView.extend({
    el: "#header-container",
    new_contact_string: "            <div id='{2}'  class='contact-row col-md-12' data-contact='{0};{1}'>                <div class='col-xs-8 col-xs-offset-2 col-md-4 col-md-offset-0'> {0}</div>                <div class='col-xs-8 col-xs-offset-2 col-md-3 col-md-offset-0'> {1}</div>                <div class='col-xs-8 col-xs-offset-2 col-md-1 col-md-offset-0'>                     <button type='button' class='btn btn-danger remove-contact form-control' data-rowid='{2}'>-</button>                              </div>             </div>",
    reportView: null,
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .new-contact": "newContact",
        "click .remove-contact": "removeContact",
        "keyup .contact-input": "newContactEnter",
        "click .new-contact-button": "newContactClick",
        "click .send": "submitNew",
        "change .share_to_facebook": "share_on_facebook_auth",
        "click .contact-input-container": "focusOnClick"
    },
    template: JST["invite.html"],
    contacts: null,
    render: function(a) {
        this.hidePanels();
        this.bindings = inviteBindings;
        this.$el.html(this.template());
        this.$where = this.$el.find(".event-where");
        this.$table = this.$el.find(".contact-table");
        this.$btSend = this.$el.find(".send");
        this.$newContact = this.$el.find(".contact-input");
        this.$btSend = this.$el.find(".send");
        this.i = 0;
        this.model = new InviteModel({});
        this.listenTo(this.model.attributes.contacts, "add", this.newContact);
        this.listenTo(this.model.attributes.contacts, "remove", this.removeContact_DOM);
        if (a.id != null) this.createFromInvite(a.id); else {
            this.model.attributes.title = a.title;
            this.reportView = new ReportView({
                model: this.model,
                el: "#reportXXX"
            });
            this.reportView.render();
            this.stickit();
        }
        this.plugins();
        return this;
    },
    createFromInvite: function(a) {
        var b = this;
        $.ajax({
            url: "/api/invite/" + a,
            type: "GET",
            cache: false,
            success: function(a) {
                b.model.set("title", a.title);
                b.model.set("description", a.description);
                b.model.set("where", a.where);
                b.model.set("start_date", moment(a.start).format("L"));
                b.model.set("start_time", moment(a.start).format("LT"));
                if (a.end) {
                    b.model.set("end_date", moment(a.end).format("L"));
                    b.model.set("end_time", moment(a.end).format("LT"));
                }
                b.reportView = new ReportView({
                    model: b.model,
                    el: "#reportXXX"
                });
                b.reportView.render();
                a.contacts.forEach(function(a) {
                    b.model.attributes.contacts.add(new Contact(a));
                });
                b.stickit();
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    last_selected_item: null,
    newContactEnter: function(a) {
        if (a.keyCode != 13) {
            return;
        }
        this.$newContact.trigger("blur");
        this.newContactClick();
    },
    newContactClick: function() {
        var a = null;
        var b = null;
        if (this.last_selected_item != null && this.last_selected_item.is_group) b = this.last_selected_item; else if (this.last_selected_item != null) {
            a = this.last_selected_item;
        }
        if (this.last_selected_item == null && this.$newContact.val() != "") {
            if (!validator.validateItem(this.$newContact)) {
                alert_notification([ {
                    alertType: "warning",
                    message: "You have incorrect or missing fields!"
                } ]);
                return;
            }
            var c = this.parsePhoneAndEmail(this.$newContact.val());
            a = {
                unique_id: guid(),
                name: "",
                email: c.email,
                phone: c.phone
            };
        }
        this.$newContact.val("");
        this.last_selected_item = null;
        if (a != null) this.model.attributes.contacts.add(new Contact(a));
        if (b != null) this.addContactsFromGroup(b.unique_id);
    },
    addContactsFromGroup: function(a) {
        var b = this;
        $.ajax({
            url: "/api/group/" + a + "?user_id=" + currentUser.id,
            type: "GET",
            success: function(a) {
                if (a.length == 0) {
                    alert_notification([ {
                        alertType: "warning",
                        message: "No contacts in the selected group!"
                    } ]);
                    return;
                }
                a.forEach(function(a) {
                    var c = new Contact(a);
                    b.model.attributes.contacts.add(c);
                });
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: "There was an error getting the contacts for the group"
                } ]);
            }
        });
    },
    newContact: function(a) {
        this.$table.prepend(this.new_contact_string.format(a.get("name"), a.get("email") + " " + a.get("phone"), a.get("unique_id")));
        return false;
    },
    removeContact: function(a) {
        var b = $(a.currentTarget).data("rowid");
        this.model.attributes.contacts.removeBy(b);
    },
    removeContact_DOM: function(a) {
        this.$table.find("#" + a.attributes.unique_id).remove();
    },
    submitNew: function(a) {
        var b = this;
        if (!validator.validateItems(".valid-before-submit") || this.model.attributes.contacts.length == 0) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var c = {
            title: this.model.get("title"),
            description: this.model.get("description"),
            where: this.model.get("where"),
            start: this.model.get("start_date") + " " + this.model.get("start_time"),
            end: isNaN(this.model.get("end_date")) ? this.model.get("end_date") + " " + this.model.get("end_time") : null,
            facebook_share: true,
            user_id: currentUser != null ? currentUser.id : null,
            contacts: this.model.attributes.contacts.collectionToJSON()
        };
        $.ajax({
            url: "/api/invite",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(c),
            cache: false,
            success: function(a) {
                alert_notification([ {
                    alertType: "success",
                    message: "Event sent!"
                } ]);
                Backbone.history.navigate("view/" + a[0], true);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    parsePhoneAndEmail: function(a) {
        var b = a.trim();
        var c = a.split(";");
        if (c.length == 1) c = a.split(",");
        for (var d = 0; d < c.length; d++) c[d] = c[d].trim();
        if (c.length == 1) {
            if (isNaN(c[0])) return {
                email: c[0],
                phone: ""
            }; else return {
                phone: c[0],
                email: ""
            };
        } else {
            if (isNaN(c[0])) return {
                email: c[0],
                phone: c[1]
            }; else return {
                phone: c[0],
                email: c[1]
            };
        }
    },
    share_on_facebook_auth: function() {
        if (currentUser != null && currentUser.social_sharing.facebook || !$("#bt_toggle").is(":checked")) return;
        window.open(api.url + "/social_sharing/facebook", "_blank", "toolbar=yes, scrollbars=no, resizable=yes, top=500, left=500");
    },
    searchContact: function(a) {
        return [ "pepe", "jose" ];
    },
    plugins: function() {
        $("#bt_toggle").bootstrapToggle();
        this.$el.find(".event-start-date, .event-end-date").datetimepicker({
            pickTime: false
        });
        this.$el.find(".event-start-time, .event-end-time").datetimepicker({
            pickDate: false
        });
        this.setupContactsTypeahead();
        this.initWhere();
        try {
            var a = $("a .active");
            this.$el.find(".snap-panel").panelSnap({
                menuSelector: "a",
                onSnapStart: function(a) {},
                onSnapFinish: function(a) {},
                onActivate: function() {},
                directionThreshold: 50,
                slideSpeed: 200,
                $menu: this.$el.find(".menu"),
                keyboardNavigation: {
                    enabled: true,
                    nextPanelKey: 40,
                    previousPanelKey: 38,
                    wrapAround: false
                }
            });
        } catch (b) {}
    },
    setupContactsTypeahead: function() {
        var a = this;
        var b = function(a) {
            return function b(b, c) {
                var d, e;
                d = [];
                e = new RegExp(b, "i");
                $.each(a, function(a, b) {
                    if (e.test(b.name) || e.test(b.email) || e.test(b.phone)) d.push(b);
                });
                c(d);
            };
        };
        var c = function(a) {
            return function b(b, c) {
                var d, e;
                d = [];
                e = new RegExp(b, "i");
                $.each(a, function(a, b) {
                    if (e.test(b.name)) {
                        b.is_group = true;
                        d.push(b);
                    }
                });
                c(d);
            };
        };
        var d = function(d) {
            a.$newContact.typeahead({
                hint: true,
                highlight: true,
                minLength: 1
            }, {
                autoselect: true,
                name: "contacts",
                displayKey: "name",
                source: b(d.contacts),
                templates: {
                    header: "<h5>Contacts</h5>",
                    suggestion: JST["contact_item_typeahead.html"]
                }
            }, {
                autoselect: true,
                name: "groups",
                displayKey: "name",
                source: c(d.groups),
                templates: {
                    header: "<h5>Groups</h5>",
                    suggestion: _.template("<%- name %>")
                }
            }).on("typeahead:selected", function(b, c) {
                a.last_selected_item = c;
            }).on("keypress keydown input", function(a) {
                a.stopPropagation();
            });
        };
        if (currentUser == null) {
            d([]);
            return;
        }
        $.ajax({
            url: "/api/contacts/groups?user_id=" + currentUser.id,
            type: "GET",
            success: function(b) {
                a.model.attributes.all_contacts = new ContactList(b);
                d(b);
            },
            error: function(a) {}
        });
    },
    initWhere: function() {
        var a = this;
        if (typeof google === "undefined") return;
        autocomplete = new google.maps.places.Autocomplete(this.$where[0], {
            types: [ "geocode" ]
        });
        var b = function() {
            var b = autocomplete.getPlace();
            a.model.set("where", b.formatted_address);
        };
        google.maps.event.addListener(autocomplete, "place_changed", function() {
            b();
        });
    },
    geoLocateWhere: function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(a) {
                var b = new google.maps.LatLng(a.coords.latitude, a.coords.longitude);
                var c = new google.maps.Circle({
                    center: b,
                    radius: a.coords.accuracy
                });
                autocomplete.setBounds(c.getBounds());
            });
        }
    }
});

ContactsView = SimpleView.extend({
    first_time: true,
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .add-contact": "navigateToAddContact",
        "change #import-csv": "importFromCsv",
        "click .add-group": "addGroup"
    },
    render: function(a) {
        $("#contact-list").show();
        $("#contact-new").hide();
        if (!this.first_time) {
            return;
        }
        this.contactList = a.contactList;
        this.groupList = a.groupList;
        this.listenTo(this.contactList, "add", this.addContact);
        this.listenTo(this.contactList, "remove", this.removeContact);
        var b = $(".groups_table");
        var c = $("#contacts_table");
        contactList.each(function(a) {
            c.append(new ContactItemView({
                model: a
            }).render().el);
        });
        this.groupListView = new GroupListView();
        b.html(this.groupListView.render({
            groupList: this.groupList,
            contactList: this.contactList
        }));
        this.first_time = false;
    },
    addContact: function(a) {
        var b = $("#contacts_table");
        b.append(new ContactItemView({
            model: a
        }).render().el);
    },
    removeContact: function(a) {
        var b = $('div[data-id="' + a.get("unique_id") + '"');
        b.remove();
    },
    navigateToAddContact: function(a) {
        a.preventDefault();
        Backbone.history.navigate("/contacts/new", true);
    },
    importFromCsv: function(a) {
        var b = new FileReader();
        b.onload = function(a, b) {
            return function(b) {
                $.ajax({
                    url: "/api/contacts/csv",
                    type: "POST",
                    contentType: "application/json",
                    data: '{"file_name": "{0}", "file": "{1}"}'.format(a.name, b.target.result),
                    cache: false,
                    success: function() {
                        alert_notification([ {
                            alertType: "success",
                            message: "Contact created!"
                        } ]);
                        console.info("file uploaded correctly.");
                    },
                    error: function(a) {
                        alert_notification([ {
                            alertType: "danger",
                            message: a.responseText
                        } ]);
                    }
                });
            };
        }(a.target.files[0], this);
        b.readAsDataURL(a.target.files[0]);
    },
    addGroup: function() {
        this.groupListView.showDialog();
    }
});

ContactsNewView = SimpleView.extend({
    template: JST["edit_contact.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click #save-contact": "saveContact"
    },
    render: function(a) {
        $("#contact-list").hide();
        var b = this.template({});
        this.$el.html(b);
        this.$el.show();
    },
    saveContact: function() {
        if (!validator.validateItems(".contact_input")) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var a = new Contact({
            name: $("#nameInput").val(),
            email: $("#emailInput").val(),
            phone: $("#phoneInput").val()
        });
        var b = $("#contacts_table");
        var c = this;
        $.ajax({
            url: "/api/contacts",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({
                user_id: currentUser.id,
                contact: a
            }),
            cache: false,
            success: function(b) {
                alert_notification([ {
                    alertType: "success",
                    message: "Contact created!"
                } ]);
                c.$el.html("");
                a.set("unique_id", b);
                contactList.create(a);
                Backbone.history.navigate("contacts", true);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

ContactItemView = SimpleView.extend({
    template: JST["contact_item.html"],
    editTemplate: JST["contact_item_edit.html"],
    model: null,
    editMode: false,
    events: {
        "dragstart .contact-row": "enterDragMode",
        "click .editable": "enterEditMode",
        "click .finish-edit": "finishEditMode",
        "click .delete-contact": "deleteContact"
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    enterDragMode: function(a) {
        console.log("LLEGUE AL DRAG START");
        var b = this.model.get("unique_id");
        a.originalEvent.dataTransfer.setData("contact_id", b);
    },
    enterEditMode: function(a) {
        if (this.editMode) return;
        this.editMode = true;
        this.$el.html(this.editTemplate(this.model.toJSON()));
    },
    finishEditMode: function(a) {
        if (!this.editMode) return;
        this.editMode = false;
        this.model.set("name", $("#edit-name").val());
        this.model.set("email", $("#edit-email").val());
        this.model.set("phone", $("#edit-phone").val());
        this.saveContact();
        this.$el.html(this.template(this.model.toJSON()));
    },
    saveContact: function() {
        var a = this.model.get("unique_id");
        $.ajax({
            url: api.url + "api/contacts/" + a + "/edit",
            data: JSON.stringify({
                name: this.model.get("name"),
                email: this.model.get("email"),
                phone: this.model.get("phone")
            }),
            type: "PUT",
            contentType: "application/json",
            cache: false,
            success: function(a) {},
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    deleteContact: function(a) {
        a.preventDefault();
        var b = $(a.target);
        var c = this.model.get("unique_id");
        $.ajax({
            url: api.url + "api/contacts/" + c + "/delete",
            type: "DELETE",
            contentType: "application/json",
            cache: false,
            success: function(a) {
                alert_notification([ {
                    alertType: "success",
                    message: "Contact deleted!"
                } ]);
                contactList.removeBy(c);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

GroupListView = Backbone.View.extend({
    template: JST["group.html"],
    events: {
        "dragover .group": "contactDragOver",
        "dragenter .group": "contactDragEnter",
        "dragleave .group": "contactDragLeave",
        "drop .group": "contactDropped"
    },
    newGroupView: null,
    render: function(a) {
        this.groupList = a.groupList;
        this.contactList = a.contactList;
        this.$el.html(this.template({
            groupList: this.groupList.collectionToJSON()
        }));
        this.$groupsTable = this.$el.find(".groups");
        this.listenTo(this.groupList, "add", this.newGroupAdded);
        this.listenTo(this.groupList, "remove", this.removedGroup);
        this.newGroupView = new GroupCreateView();
        this.$el.append(this.newGroupView.render({
            groupList: this.groupList
        }));
        return this.$el;
    },
    showDialog: function() {
        this.newGroupView.show();
    },
    newGroupAdded: function(a) {
        console.log(a);
        var b = randomColor();
        var c = colorInverter(b);
        this.$groupsTable.prepend('<div data-id="{0}" class="group col-md-1" style="background-color: #{2};color: #{3}">{1}</div>'.format(a.attributes.unique_id, cut(a.attributes.name), b, c));
    },
    removedGroup: function() {},
    contactDragEnter: function(a) {
        a.preventDefault();
        var b = $(a.target);
        if (b.hasClass("group-drag-hover")) return;
        b.addClass("group-drag-hover");
    },
    contactDragLeave: function(a) {
        a.preventDefault();
        var b = $(a.target);
        if (!b.hasClass("group-drag-hover")) return;
        b.removeClass("group-drag-hover");
    },
    contactDragOver: function(a) {
        a.preventDefault();
    },
    contactDropped: function(a) {
        a.preventDefault();
        var b = $(a.target);
        var c = b.data("id");
        var d = this.groupList.getById(c);
        if (d.length > 0) {
            var e = a.originalEvent.dataTransfer.getData("contact_id");
            var f = this.contactList.getById(e);
            if (f.length > 0) this.addContactToGroup(f[0], d[0]);
        }
    },
    addContactToGroup: function(a, b) {
        $.ajax({
            url: "/api/group/" + b.attributes.unique_id + "/" + a.attributes.unique_id + "?user_id=" + currentUser.id,
            type: "POST",
            contentType: "application/json",
            success: function(a) {},
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: "The contact couldn't be added to the group"
                } ]);
            }
        });
    }
});

GroupCreateView = Backbone.View.extend({
    template: JST["add-group.html"],
    events: {
        "click .new-group-btn": "newGroup",
        "keyup .new-group-input": "newGroupKeyEvent"
    },
    render: function(a) {
        this.groupList = a.groupList;
        this.$el.html(this.template());
        this.$groupInput = this.$el.find(".new-group-input");
        return this.$el;
    },
    show: function() {
        this.$el.find(".addGroup-modal").modal({
            show: true,
            backdrop: true,
            keyboard: true
        });
        this.$groupInput.focus();
    },
    newGroupKeyEvent: function(a) {
        if (a.keyCode != 13) {
            return;
        }
        this.newGroup();
    },
    newGroup: function() {
        var a = this;
        var b = this.$groupInput.val();
        if (b == "") {
            alert_notification([ {
                alertType: "warning",
                message: "Type a name for the group!"
            } ]);
            return;
        }
        this.$el.hide();
        $.ajax({
            url: "/api/group/" + b + "?user_id=" + currentUser.id,
            type: "POST",
            success: function(b) {
                alert_notification([ {
                    alertType: "success",
                    message: "Group Added!"
                } ]);
                a.groupList.add(new Group(b));
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: "Problem adding the Group!"
                } ]);
            }
        });
    }
});

IndexView = Backbone.View.extend({
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .imeet-btn": "createNew",
        "keypress .invite-title-input": "type_key"
    },
    type_key: function(a) {
        if (a.keyCode == 13) {
            this.createNew();
            a.preventDefault();
            return false;
        }
    },
    render: function(a) {
        $("#view-container").hide();
        this.$el.show();
        this.$inviteTitle = this.$el.find(".invite-title-input");
        this.$headerImage = this.$el.find(".header-section");
    },
    createNew: function() {
        var a = this.$inviteTitle.val();
        if (a != null && a != "") Backbone.history.navigate("/new/" + a, true); else alert("type a title!");
    }
});

InviteView = SimpleView.extend({
    template: JST["inviteReport.html"],
    inviteId: null,
    author: "Organizer",
    initialize: function(a) {
        this.options = a || {};
        this.inviteId = this.options.id;
    },
    render: function(a) {
        this.hidePanels();
        this.inviteId = a.invite_id;
        var b = a.contact_id;
        if (this.inviteId == null) console.error("Invite Id is null, check routing");
        this.$el.html(this.template());
        var c = this;
        $.ajax({
            url: "/api/invite/" + c.inviteId,
            type: "GET",
            cache: false,
            success: function(a) {
                $(".invite-title").html(a.title);
                $(".invite-location").html(a.where);
                $(".invite-date").html(a.start);
                c.loadContacts(a.contacts, b);
                c.currentCommentIndex = a.comments.length;
                c.loadComments(a.comments);
                setInterval(function() {
                    c.getComments(c.inviteId, a.comments.length, c.loadComments);
                }, 6e4);
            }
        });
    },
    addNewComment: function(a) {
        if (a.charCode == 13 && a.target.value !== "") {
            var b = currentUser != null ? currentUser.fullname : this.author;
            var c = a.target.value;
            a.target.value = "";
            $(".invite-comments").scrollTop(1e6);
            $.ajax({
                url: "/api/invite/{0}/comment".format(this.inviteId),
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({
                    user_id: currentUser == null ? null : currentUser.id,
                    author: b,
                    comment: c
                }),
                cache: false,
                success: function(a) {
                    $(".invite-comments").append(JST["comment.html"](a));
                },
                error: function(a) {
                    if (a.status != 200) alert_notification([ {
                        alertType: "danger",
                        message: a.responseText
                    } ]);
                }
            });
        }
    },
    getComments: function(a, b, c) {
        $.ajax({
            url: "/api/invite/{0}/comments".format(a),
            type: "GET",
            contentType: "application/json",
            cache: false,
            success: function(a) {
                c(a.comments, b);
            },
            error: function(a) {}
        });
    },
    loadContacts: function(a, b) {
        var c = "            <div class='row contact-row small-margin' data-contact='{0},{1},{2}' >                     <div class='col-xs-2 col-md-1'>                         <i class='fa fa-like fa-1_2x {3}'></i>                     </div>                    <div class='col-xs-10 col-md-11'>                              {0} {1} {2}                     </div>             </div> ";
        var d = $(".invite-table");
        var e = this;
        a.forEach(function(a) {
            if (a.id == b) e.author = a.name || a.email || a.phone || "User";
            var f = "";
            if (a.sms_response == null & a.voice_reponse == null & a.email_response == null) f = "hidden";
            d.append(c.format(a.name || "", a.email || "", a.phone || "", f));
        });
    },
    loadComments: function(a, b) {
        var c = $(".invite-comments");
        var d = "";
        var e = 1;
        var f = this;
        var g = b == null;
        a.forEach(function(a) {
            var c = "";
            if (!g && e >= b) c = "animate_comment";
            d = d.concat(JST["comment.html"]({
                author: a.author,
                comment: a.comment
            }));
            e++;
        });
        c.html(d);
        f.currentCommentIndex = a.lenght;
        c.scrollTop(1e6);
    },
    events: {
        "keypress .invite-newComment": "addNewComment"
    }
});

ReportView = Backbone.View.extend({
    bindings: inviteBindings,
    new_contact_string: "            <li id='{2}' class='contact-row' data-contact='{0};{1}'>                {0} {3} {1}             </li>",
    initialize: function(a) {
        this.options = a || {};
        this.model = this.options.model;
    },
    template: JST["invite_report.html"],
    render: function() {
        this.$el.html(this.template());
        this.$report_table = this.$el.find(".contact-read-table");
        this.listenTo(this.model.attributes.contacts, "add", this.addContact);
        this.listenTo(this.model.attributes.contacts, "remove", this.removeContact);
        this.stickit();
        return this;
    },
    addContact: function(a) {
        this.$report_table.append(this.new_contact_string.format(a.get("name"), a.get("email") + " " + a.get("phone"), a.get("unique_id"), a.get("name").length > 0 ? "&nbsp;" : ""));
    },
    removeContact: function(a) {
        this.$report_table.find("#" + a.get("unique_id")).remove();
    }
});

LoginView = SimpleView.extend({
    template: JST["login.html"],
    render: function(a) {
        this.hidePanels();
        this.$el.html(this.template());
    }
});

ModalView = Backbone.View.extend({
    childView: null,
    template: null,
    initialize: function(a) {
        this.options = a || {};
        this.childView = this.options.childView;
        this.template = this.options.template;
        if (Backbone.pubSub._events == null || Backbone.pubSub._events["childClose"] == null) Backbone.pubSub.on("childClose", this.onChildClose, this);
    },
    render: function(a) {
        var b = this.$el;
        var c = this;
        if (this.options.templateId != null) {
            var d = _.template($(this.options.templateId).html(), {});
            this.$el.html(d);
        } else if (this.template != null) this.$el.html(this.template());
        if (this.childView != null) {
            this.childView.render(a);
        }
        this.$el.find(".close-modal").click(function(a) {
            c.onChildClose({
                view: c.childView
            });
        });
        this.$el.show();
        return this;
    },
    onChildClose: function(a) {
        if (this.$el != null) this.$el.hide();
        Backbone.history.navigate("", true);
    }
});

UserProfileView = SimpleView.extend({
    template: JST["editProfile.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .save-profile": "save"
    },
    render: function() {
        this.hidePanels();
        this.$el.html(this.template());
        this.$name = this.$el.find("#edit-profile-name");
        this.$username = this.$el.find("#edit-profile-username");
        this.$password = this.$el.find("#edit_profile_password");
        this.$password_confirm = this.$el.find("#edit_profile_password_confirm");
        this.$email = this.$el.find("#edit-profile-email");
        var a = this;
        $.ajax({
            url: "/api/profile/" + currentUser.id,
            type: "GET",
            cache: false,
            success: function(b) {
                if (b.email != null) {
                    a.$email.html(b.email);
                    a.$email.parent().addClass("floating-label-form-group-with-value");
                }
                if (b.username != null) {
                    a.$username.val(b.username);
                    a.$username.parent().addClass("floating-label-form-group-with-value");
                }
                if (b.name != null) {
                    a.$name.val(b.name + " " + b.last_name);
                    a.$name.parent().addClass("floating-label-form-group-with-value");
                }
            }
        });
    },
    save: function() {
        if (!validator.validateItems(".valid-before-submit")) return;
        if (this.$password.val() != null && this.$password.val() != this.$password_confirm.val()) {
            alert_notification([ {
                alertType: "warning",
                message: "Password and Password confirm don't match!!!"
            } ]);
        }
        var a = {
            username: this.$username.val()
        };
        a.name = this.$name.val().split(" ")[0];
        a.last_name = this.$name.val().split(" ")[1];
        if (this.$password.val() != null && this.$password.val() != "") a.password = this.$password.val();
        var b = this;
        $.ajax({
            url: "/api/profile/" + currentUser.id,
            type: "POST",
            data: JSON.stringify(a),
            cache: false,
            success: function(a) {
                Backbone.history.navigate("/search", true);
            }
        });
    }
});

SearchView = SimpleView.extend({
    template: JST["search.html"],
    invite_string: "            <div class='row' style='margin-top: 20px'>                 <div class='col-xs-10 col-xs-offset-1 col-md-3 col-md-offset-1'>  <a href='#' class='navigate' data-action='modal' data-where='view/{0}'>{1}</a> </div>                 <div class='col-xs-6 col-md-2 desktop tablet'>  {2} </div>                 <div class='col-xs-6 col-xs-offset-2 col-md-2'> <button type='button' class='navigate btn btn-info form-control' data-where='new/from/{0}'>Duplicate</button></div>             </div>            <div class='small-margin-top'> </div>     ",
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .search": "search",
        "keypress #searchBox": "type_key"
    },
    render: function() {
        this.hidePanels();
        this.$el.html(this.template());
        this.$searchBox = this.$el.find("#searchBox");
        this.search();
    },
    type_key: function(a) {
        if (a.keyCode == 13) {
            this.search();
            a.preventDefault();
            return false;
        }
    },
    search: function() {
        var a = this;
        $.ajax({
            url: "/api/invite/search/" + currentUser.id + "?term=" + this.$searchBox.val(),
            type: "GET",
            cache: false,
            success: function(b) {
                var c = $(".search-result");
                if (b != null) {
                    c.html("");
                    c.empty();
                    b.forEach(function(b) {
                        c.append(a.invite_string.format(b.unique_id, b.title, b.start, b.end));
                    });
                } else {
                    c.html('You dont have any iMeets. Start sending! <a href="/new" type="button" class="btn btn-success">Start</a>');
                }
            }
        });
    }
});

SentView = Backbone.View.extend({
    template: JST["invite_sent.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .submit-register": "registerEmail"
    },
    render: function() {
        this.$el.html(this.template({
            invite_id: this.model
        }));
        this.$email = this.$el.find(".register-email");
    },
    registerEmail: function() {
        if (!validator.validateItem(this.$email)) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var a = this;
        $.ajax({
            url: "/register/email/" + this.$email.val(),
            type: "POST",
            cache: false,
            success: function(b) {
                alert_notification([ {
                    alertType: "success",
                    message: "Account Created Successfully, please check your email"
                } ]);
                Backbone.pubSub.trigger("childClose", {
                    view: a
                });
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

UserRegisterView = SimpleView.extend({
    template: JST["register.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .submit-register": "registerEmail"
    },
    render: function() {
        this.hidePanels();
        this.$el.html(this.template());
        this.$email = this.$el.find(".register-email");
    },
    registerEmail: function() {
        if (!validator.validateItem(this.$email)) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var a = this;
        $.ajax({
            url: "/register/email/" + this.$email.val(),
            type: "POST",
            cache: false,
            success: function(b) {
                alert_notification([ {
                    alertType: "success",
                    message: "Account Created Successfully, please check your email"
                } ]);
                Backbone.pubSub.trigger("childClose", {
                    view: a
                });
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

function init_app() {
    window.App = {
        Models: {},
        Collections: {},
        Views: {},
        Router: {}
    };
    Backbone.pubSub = _.extend({}, Backbone.Events);
    Backbone.pubSub.publish = Backbone.pubSub.trigger;
    Backbone.pubSub.subscribe = Backbone.pubSub.bind;
    Backbone.pubSub.unsubscribe = Backbone.pubSub.unbind;
    index_view = new IndexView({
        el: "#body-container"
    });
    login_view = new LoginView({
        el: "#view-container",
        templateId: "#login"
    });
    user_register_view = new UserRegisterView({
        el: "#view-container"
    });
    user_profile_view = new UserProfileView({
        el: "#view-container"
    });
    search_view = new SearchView({
        el: "#view-container"
    });
    invite_view = new InviteView({
        el: "#view-container"
    });
    sent_view = new SentView({
        el: "#modal_container"
    });
    sent_view_modal = new ModalView({
        el: $("#modal_container"),
        childView: sent_view
    });
    contacts_view = new ContactsView({
        el: "#contact-list"
    });
    contactsNew_view = new ContactsNewView({
        el: "#contact-new"
    });
    App.Router = Backbone.Router.extend({
        routes: {
            "": "index",
            "_=_": "index",
            "new": "new",
            "new/:title": "new",
            "new/:title/from/:id": "new",
            "new/from/:id": "new_no_title",
            "sent/:id": "sent",
            search: "search",
            login: "login",
            "profile/edit": "edit_profile",
            register: "register",
            "view/:id": "view_as_organizer",
            "view/:id/:contact_id": "view_as_contact",
            contacts: "contacts",
            "contacts/new": "contacts_new"
        },
        index: function() {
            index_view.render();
        },
        login: function() {
            login_view.render();
        },
        register: function() {
            user_register_view.render();
        },
        edit_profile: function() {
            user_profile_view.render();
        },
        "new": function(a, b) {
            var c = new CreateView({
                el: "#view-container"
            });
            c.render({
                title: a,
                id: b
            });
        },
        new_no_title: function(a) {
            this.new(null, a);
        },
        sent: function(a) {
            sent_view_modal.childView.model = a;
            sent_view_modal.render();
        },
        search: function() {
            search_view.render();
        },
        view_as_organizer: function(a) {
            invite_view.render({
                invite_id: a
            });
        },
        view_as_contact: function(a, b) {
            invite_view.render({
                invite_id: a,
                contact_id: b
            });
        },
        contacts: function() {
            contacts_view.render({
                contactList: contactList,
                groupList: groupList
            });
        },
        contacts_new: function() {
            contactsNew_view.render();
        }
    });
    if (window.location.hash && window.location.hash == "#_=_") {
        window.location.hash = "";
    }
    new App.Router();
    Backbone.history.start({
        pushState: true
    });
    $("#notification-alerts").toggleClass("in");
    $("body").on("click", ".navigate", function(a) {
        var b = $(this).data("where");
        if (b != null) Backbone.history.navigate(b, true); else Backbone.history.navigate("/", true);
    });
    $("body").on("input propertychange", ".floating-label-form-group", function(a) {
        $(this).toggleClass("floating-label-form-group-with-value", !!$(a.target).val());
    }).on("focu s", ".floating-label-form-group", function() {
        $(this).addClass("floating-label-form-group-with-focus");
    }).on("blur", ".floating-label-form-group", function() {
        $(this).removeClass("floating-label-form-group-with-focus");
    });
}

$(function() {
    init_app();
});