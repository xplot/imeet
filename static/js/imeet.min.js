this["JST"] = this["JST"] || {};

this["JST"]["editProfile.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="modal-content">\n        <div class="close-modal" data-action="dismiss">\n            <div class="lr">\n                <div class="rl">\n                </div>\n            </div>\n        </div>\n        <div class="container">\n            <h4>Edit your profile</h4>\n           <div class="row controls">\n               <div class="col-sm-3"></div>\n                <div class="col-sm-6">\n                    <br/><br/>\n                    <div class="floating-label-form-group">\n                        <div id="edit-profile-email">Email</div>\n                    </div>\n                    <br/><br/>\n                    <div class="floating-label-form-group">\n                        <label for="edit-profile-name" class="fl">Full Name</label>\n                        <input id="edit-profile-name" type="text" class="form-control valid-before-submit" placeholder="John Smith..."\n                                data-validation="required">\n                    </div>\n                    <div class="floating-label-form-group">\n                        <label for="edit-profile-username" class="fl" data-validation="required">Username</label>\n                        <input id="edit-profile-username" type="text" class="form-control valid-before-submit" placeholder="username..." data-validation="required">\n                    </div>\n                    <div class="floating-label-form-group">\n                        <label for="edit-profile-username" class="fl" data-validation="required">Pasword</label>\n                        <input id="edit_profile_password" name="edit_profile_password" type="password" class="form-control valid-before-submit" placeholder="password..." data-validation="required">\n                    </div>\n                    <div class="floating-label-form-group">\n                        <label for="edit-profile-username" class="fl">Pasword Confirm</label>\n                        <input name="edit_profile_password_confirm" id="edit_profile_password_confirm" type="password" class="form-control valid-before-submit" placeholder=" confirm password..." data-validation="required">\n                    </div>\n                </div>\n            </div>\n            <div class="form-group col-xs-9 medium-margin">\n                <a class="btn btn-primary btn-lg save-profile pull-right" role="button">Save</a>\n            </div>\n        </div>\n</div>\n';
    }
    return __p;
};

this["JST"]["invite.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="snap-panel invite-create">\n    <section data-panel="first" class="container invite first">\n        <div class="row text-center invite-content ">\n            <div class="">\n                <h4>Event</h4>\n            </div>\n            <div class="">\n\n                ';
        if (currentUser == null) {
            __p += '\n                    <label class="small-text">\n                    Note: For sms/calls to work, you have to be a registered\n                    <br/>\n                    Note2: Sms/calls will be free only during the beta phase. After that a subscription base fee will be offered\n                    </label>\n                ';
        }
        __p += '\n            </div>\n            <div class="row">\n                <div class="col-xs-12 col-md-8 col-md-offset-2">\n                    <input required type="text" class="form-control event-name valid-before-submit" placeholder="Event" autofocus data-validation="required" >\n                </div>\n            </div>\n\n            <div class="row">\n                <div class="col-xs-12  col-md-3 col-md-offset-2">\n                    <div class="date-group" id="start-date-group">\n                        <input readonly="true" required type="text" class="date event-start-date valid-before-submit" placeholder="01/01/2000"\n                               data-validation="required,date"\n                        >\n                        <input readonly="true" required type="int" class="time event-start-time  valid-before-submit" placeholder="00:00 AM" data-validation="required" >\n                    </div>\n                </div>\n                <div class="col-xs-12 col-md-2 text-center label-text">\n                    To\n                </div>\n                <div class="col-xs-12 col-md-3">\n                    <div class="date-group">\n                        <input readonly="true" required type="text" class="date event-end-date" placeholder="01/01/2000">\n                        <input readonly="true" required type="text" class="time event-end-time" placeholder="00:00 AM"  >\n                    </div>\n                </div>\n            </div>\n            <div class="row">\n                <div class="col-xs-12 col-md-8 col-md-offset-2">\n                  <textarea class="form-control event-description desktop tablet" rows="6"></textarea>\n                </div>\n            </div>\n        </div>\n        <div class="row  menu-container menu-down">\n            <ul class="menu">\n                <li>\n                    <a href="" data-panel="second"><i class="fa fa-angle-down fa-5x"></i></a>\n                </li>\n            </ul>\n        </div>\n    </section>\n\n        <section data-panel="second" class="container invite second">\n\n            <div class="row text-center invite-content ">\n                <div class="">\n                    <h4>Where</h4>\n                </div>\n\n                <div class="row">\n                    <div class="col-xs-8 col-md-6 col-md-offset-2">\n                        <input type="text" class="form-control event-address-street" placeholder="Address"  >\n                    </div>\n                    <div class="col-xs-4 col-md-2">\n                        <input type="text" class="form-control event-address-suite" placeholder="Apt"  >\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-xs-12 col-md-4 col-md-offset-2">\n                        <input type="text" class="form-control event-address-city" placeholder="City"  >\n                    </div>\n\n                    <div class="col-xs-8 col-md-2">\n                        <select class="form-control event-address-state" placeholder="State">\n\n                        </select>\n                    </div>\n                    <div class="col-xs-4 col-md-2">\n                        <input type="text" class="form-control event-address-zip" placeholder="Zip"  >\n                    </div>\n                </div>\n            </div>\n            <div class="row menu-container menu-down desktop tablet">\n                <ul class="menu">\n                    <li>\n                        <a href="" data-panel="third"><i class="fa fa-angle-down fa-5x"></i></a>\n                    </li>\n                </ul>\n            </div>\n        </section>\n\n        <section data-panel="third" class="container invite third">\n            <div class="row text-center invite-content ">\n                <div class="row2 text-center">\n                    <h4>Who is invited?</h4>\n                </div>\n\n                <div class="row zero-margin">\n                    <div class="col-md-4 col-md-offset-2">\n                        <input type="text" class="new-contact-name form-control" placeholder="Name">\n                    </div>\n\n                    <div class="col-md-3">\n                        <input type="text" class="new-contact-phone form-control"\n                            ';
        if (features.indexOf("voice") != -1) {
            __p += "\n                                data-validation='required,email|phone' placeholder='Phone Number or Email Address'\n                            ";
        } else {
            __p += "\n                                data-validation='required,email' placeholder='Email Address'\n                            ";
        }
        __p += '\n                            name="newPhone" id="newPhone">\n                    </div>\n                    <div class="col-md-1">\n                        <button type="button" class="btn btn-info new-contact form-control">+</button>\n                    </div>\n                </div>\n\n                <div class="row2 contact-table">\n                </div>\n            </div>\n\n            <div class="row menu-container menu-down  desktop tablet">\n                <ul class="menu">\n                    <li>\n                        <a href="" data-panel="fourth"><i class="fa fa-angle-down fa-5x"></i></a>\n                    </li>\n                </ul>\n            </div>\n        </section>\n\n        <section data-panel="fourth" class="container invite fourth">\n            <div class="row text-center invite-content">\n                <div id="reportXXX"></div>\n            </div>\n\n             <div class="row  menu-container menu-down">\n                 <div class="row">\n                    <label for="bt_toggle">Share on Facebook</label>\n                    <input type="checkbox"\n                       data-toggle="toggle"\n                       id="bt_toggle"\n                       class="share_to_facebook"\n                       data-style="android"\n                       data-onstyle="info"\n                       data-onstyle="success" data-offstyle="danger" />\n                </div>\n                <button type="button" class="btn form-control btn-success send">Send</button>\n            </div>\n        </section>\n</div>\n\n<!--<ul class="menu">-->\n    <!--<li>-->\n        <!--<a href="" data-panel="first" class="active"><i class="fa fa-circle-line fa-1x"></i></a>-->\n    <!--</li>-->\n    <!--<li>-->\n\n    <!--</li>-->\n    <!--<li>-->\n        <!--<a href="" data-panel="third" ><i class="fa fa-circle-line fa-1x"></i></a>-->\n    <!--</li>-->\n    <!--<li>-->\n        <!--<a href="" data-panel="fourth" ><i class="fa fa-circle-line fa-1x"></i></a>-->\n    <!--</li>-->\n<!--</ul>-->\n\n<!-- Footer -->\n<div class="section-container footer desktop navbar-fixed-bottom">\n<div class="footer-below">\n    <div class="container">\n      <div class="row">\n          <div class="col-lg-12">\n              Miami, FL<br/>\n              Copyright 2014 &copy; iMeet Inc. All rights reserved.\n          </div>\n      </div>\n      <div class="row">\n        <div class="col-lg-12 quiet">\n            <br/>Built with love, Internet style\n        </div>\n      </div>\n    </div>\n</div>\n</div>\n';
    }
    return __p;
};

this["JST"]["inviteReport.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="invite-view">\n    <div class="panel">\n         <div class="panel-heading" >\n            <div class="row">\n                 <div class=\'pull-left col-xs-3 col-md-6\'><h2 class=\'invite-title\'></h2></div>\n                 <div class=\'col-xs-9 col-md-4 text-right\'>\n                    <div class=\'col-xs-12 col-md-12 invite-date\'></div>\n                 </div>\n            </div>\n         </div>\n     </div>\n\n    <div class="invite-location row pull-left"></div>\n\n    <div class="invite-content">\n        <div class="col-md-6 attendees">\n            <h5><b>Attendees</b></h5>\n            <div class="invite-table"></div>\n        </div>\n        <div class="col-md-4 hangout">\n            <h5><b>Hangout</b></h5>\n            <ul class="invite-comments">\n            </ul>\n            <input placeholder="Write a comment..." class="invite-newComment form-control ">\n        </div>\n    </div>\n</div>\n\n\n<!-- Footer -->\n<div class="section-container footer desktop navbar-fixed-bottom">\n<div class="footer-below">\n    <div class="container">\n      <div class="row">\n          <div class="col-lg-12">\n              Miami, FL<br/>\n              Copyright 2014 &copy; iMeet Inc. All rights reserved.\n          </div>\n      </div>\n      <div class="row">\n        <div class="col-lg-12 quiet">\n            <br/>Built with love, Internet style\n        </div>\n      </div>\n    </div>\n</div>\n</div>\n\n';
    }
    return __p;
};

this["JST"]["invite_report.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += "<style>\n  .toggle.android { border-radius: 0px;}\n  .toggle.android .toggle-handle { border-radius: 0px; }\n</style>\n\n<div class=\"row equidistant invite_report\">\n    <div class=\"col-xs-12 col-md-8 col-md-offset-2\">\n        <div class=\"panel\">\n         <div class=\"panel-heading\" >\n                <div class=\"row\">\n                     <div class='pull-left col-xs-3 col-md-6'><h4 class='event-name'></h4></div>\n\n                     <div class='col-xs-9 col-md-6 text-right'>\n                        <div class='col-xs-12 col-md-12 event-start-date-formatted'></div>\n                        <div class='col-xs-12 col-md-12 event-end-date-formatted'></div>\n                     </div>\n                </div>\n             </div>\n         </div>\n\n          <div class=\"panel-body container\">\n\n            <div class='left col-xs-12 col-md-6'>\n                <div class=' event-description'></div>\n                <div class='small-margin-top event-where'>\n                    <div class='label_title col-md-1 text-right'>Address:</div>\n                    <div class='pull-left col-md-5 text-left small-margin-left'>\n                        <div class='event-address-street-with-number'></div>\n                        <div class='event-address-state-city'></div>\n                        <div class='event-address-zip'></div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=' right col-xs-12 col-md-3'>\n                <ul class=\"contact-read-table\" style=\"list-style: none\">\n\n                </ul>\n            </div>\n          </div>\n        </div>\n    </div>\n</div>\n";
    }
    return __p;
};

this["JST"]["invite_sent.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="modal-content">\n    <form id="registerForm">\n        <div class="close-modal" data-action="dismiss">\n            <div class="lr">\n                <div class="rl">\n                </div>\n            </div>\n        </div>\n\n        <div class="container">\n            <div class="row">\n                Invite Link <a href="http://imeet.io/view/';
        print(invite_id);
        __p += '"><h5 class="text-lowercase">http://imeet.io/view/';
        print(invite_id);
        __p += '</h5></a>\n            </div>\n            <div class="row small-margin-top"></div>\n            <div class="row">\n               Register\n               <div class="controls">\n                   <div class="col-sm-3"></div>\n                    <div class="col-sm-6">\n                        <div class="col-sm-9">\n                            <input required type="email" class="form-control register-email" placeholder="Enter email..." data-validation="email">\n                        </div>\n                        <div class="col-sm-3">\n                            <button type="button" class="btn btn-success form-control submit-register">Go</button>\n                        </div>\n                    </div>\n                    <div class="col-sm-3"></div>\n                </div>\n           </div>\n        </div>\n    </form>\n</div>\n';
    }
    return __p;
};

this["JST"]["register.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="modal-content">\n    <form id="registerForm">\n        <div class="close-modal" data-action="dismiss">\n            <div class="lr">\n                <div class="rl">\n                </div>\n            </div>\n        </div>\n        <div class="container">\n            <h4>I want in!</h4>\n           <div class="row controls">\n               <div class="col-sm-3"></div>\n                <div class="col-sm-6">\n                    <div class="col-sm-9">\n                        <input required type="email" class="form-control register-email" placeholder="Enter email..." data-validation="email">\n                    </div>\n                    <div class="col-sm-3">\n                        <button type="button" class="btn btn-success form-control submit-register">Go</button>\n                    </div>\n                </div>\n                <div class="col-sm-3"></div>\n            </div>\n        </div>\n    </form>\n</div>\n';
    }
    return __p;
};

this["JST"]["search.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="modal-content">\n    <div class="close-modal" data-action="dismiss">\n        <div class="lr">\n            <div class="rl">\n            </div>\n        </div>\n    </div>\n    <div class="container">\n        <div class="row controls">\n            <div class="col-sm-10">\n                <input id="searchBox" type="text" class="form-control event-name" placeholder="Invite Title" data-validation="required">\n            </div>\n            <div class="col-sm-2">\n                <button type="button" class="btn btn-success form-control search">Go</button>\n            </div>\n        </div>\n        <div class="row" style="height: 50px"></div>\n        <div class="row search-result">\n        </div>\n    </div>\n</div>\n';
    }
    return __p;
};

if (!String.prototype.format) String.prototype.format = function() {
    var a = arguments;
    return this.replace(/{(\d+)}/g, function(b, c) {
        return typeof a[c] != "undefined" ? a[c] : b;
    });
};

function alert_notification(a) {
    $(".alert").remove();
    var b = "" + '<div class="alert alert-{0} alert-dismissible flyover flyover-in" role="alert">' + '<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>' + "{1}" + "</div>";
    var c = $("body");
    a.forEach(function(a) {
        c.prepend(b.format(a.alertType, a.message));
    });
}

var validator = {
    digitsRegex: new RegExp("^[0-9]*$"),
    charsRegex: new RegExp(".*"),
    emailRegex: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    validateItems: function(a) {
        var b = true;
        var c = $(a);
        c.each(function(a) {
            var d = $(c[a]);
            b = validator.validateItem(d) && b;
        });
        return b;
    },
    validateString: function(a, b) {
        var c = false;
        switch (b) {
          case "required":
            c = a.length > 0;
            break;

          case "digits":
            c = validator.digitsRegex.test(a);
            break;

          case "non_numerics":
            c = validator.charsRegex.test(a);
            break;

          case "email":
            c = a.length == 0 || validator.emailRegex.test(a);
            break;

          case "phone":
            c = validator.digitsRegex.test(a) && (a.length == 10 || a.length == 0);
            break;

          case "date":
            var d = new Date(a);
            c = d instanceof Date && !isNaN(d.valueOf());
            break;

          case "time":
            c = true;
            break;
        }
        return c;
    },
    validateItem: function(a) {
        var b = true;
        var c = a.data("validation");
        c.split(",").forEach(function(c) {
            var d = -1;
            if (c.indexOf(":") >= 0) {
                var e = c.split(":");
                c = e[0];
                d = parseInt(e[1]);
            }
            var f;
            try {
                var g = a.val();
                if (a.is(":checkbox")) {
                    if (!a.is(":checked")) g = "";
                }
                if (c.indexOf("|") != -1) {
                    var h = function(a, b) {
                        var b = c.split("|");
                        var d = a.split(",");
                        if (d.length == 0 || b.length == 0) return true;
                        var e = true;
                        d.forEach(function(a) {
                            a = a.trim();
                            var c = false;
                            b.forEach(function(b) {
                                c = validator.validateString(a, b) || c;
                            });
                            e = e && c;
                        });
                        return e;
                    };
                    f = h(g, c);
                } else f = validator.validateString(g, c);
                if (d != -1) f = f && g.length == d;
            } catch (i) {
                f = false;
            }
            b = f && b;
        });
        if (a.is(":checkbox")) {
            a = a.parent();
        }
        if (!b) this.errorValidationForItem(a); else this.succeedValidationForItem(a);
        return b;
    },
    errorValidationForItem: function(a) {
        this.validationUI(a, true);
    },
    succeedValidationForItem: function(a) {
        this.validationUI(a, false);
    },
    validationUI: function(a, b) {
        if (b) a.addClass("failed-validation"); else a.removeClass("failed-validation");
        var c = a.data("validation-siblings");
        if (c != null) {
            c.split(",").forEach(function(a) {
                var c = $(a);
                if (b) c.addClass("failed-validation"); else c.removeClass("failed-validation");
            });
        }
    }
};

SimpleView = Backbone.View.extend({
    initialize: function(a) {
        this.options = a || {};
    },
    hidePanels: function() {
        $("#body-container").hide();
        $("#view-container").show();
        $("#modal_container").hide();
    }
});

var inviteBindings = {
    ".event-name": "title",
    ".event-start-date": "start_date",
    ".event-start-time": "start_time",
    ".event-end-date": "end_date",
    ".event-end-time": "end_time",
    ".event-description": "description",
    ".event-address-street": "address.street",
    ".event-address-suite": "address.suite",
    ".event-address-city": "address.city",
    ".event-address-zip": "address.zip",
    ".event-address-state": {
        observe: "address.state",
        selectOptions: {
            collection: function() {
                return [ {
                    value: null,
                    label: ""
                }, {
                    value: "FL",
                    label: "Florida"
                }, {
                    value: "NY",
                    label: "New York"
                }, {
                    value: "CA",
                    label: "California"
                } ];
            }
        }
    },
    ".event-start-date-formatted": {
        observe: [ "start_date", "start_time" ],
        onGet: function(a) {
            if (Date.parse(a[0] + " " + a[1])) return "From: " + a[0] + " " + a[1];
        }
    },
    ".event-end-date-formatted": {
        observe: [ "end_date", "end_time" ],
        onGet: function(a) {
            return "To: " + a[0] + " " + a[1];
        }
    },
    ".event-address-state-city": {
        observe: [ "address.state", "address.city" ],
        onGet: function(a) {
            var b = a[0] || "";
            var c = a[1] || "";
            if (b == null && c == null) return "";
            return c + ", " + b;
        }
    },
    ".event-address-street-with-number": {
        observe: [ "address.street", "address.suite" ],
        onGet: function(a) {
            var b = a[0] || "";
            var c = a[1] || "";
            return b + " " + c;
        }
    }
};

InviteModel = Backbone.Model.extend({
    defaults: {
        title: "",
        start_date: "",
        start_time: "",
        end_date: "",
        end_time: "",
        description: "",
        "address.street": "",
        "address.suite": "",
        "address.city": "",
        "address.state": "",
        "address.zip": "",
        contacts: []
    }
});

var inviteBindings = {
    ".event-name": "title",
    ".event-start-date": "start_date",
    ".event-start-time": "start_time",
    ".event-end-date": "end_date",
    ".event-end-time": "end_time",
    ".event-description": "description",
    ".event-address-street": "address.street",
    ".event-address-suite": "address.suite",
    ".event-address-city": "address.city",
    ".event-address-zip": "address.zip",
    ".event-address-state": {
        observe: "address.state",
        selectOptions: {
            collection: function() {
                return [ {
                    value: null,
                    label: ""
                }, {
                    value: "FL",
                    label: "Florida"
                }, {
                    value: "NY",
                    label: "New York"
                }, {
                    value: "CA",
                    label: "California"
                } ];
            }
        }
    },
    ".event-start-date-formatted": {
        observe: [ "start_date", "start_time" ],
        onGet: function(a) {
            return "From: " + a[0] + " " + a[1];
        }
    },
    ".event-end-date-formatted": {
        observe: [ "end_date", "end_time" ],
        onGet: function(a) {
            return "To: " + a[0] + " " + a[1];
        }
    },
    ".event-address-state-city": {
        observe: [ "address.state", "address.city" ],
        onGet: function(a) {
            var b = a[0] || "";
            var c = a[1] || "";
            if (b == null && c == null) return "";
            return c + " " + b;
        }
    },
    ".event-address-street-with-number": {
        observe: [ "address.street", "address.suite" ],
        onGet: function(a) {
            var b = a[0] || "";
            var c = a[1] || "";
            return b + " " + c;
        }
    }
};

CreateContactView = Backbone.View.extend({});

ReadContactView = Backbone.View.extend({});

CreateView = SimpleView.extend({
    el: "#header-container",
    new_contact_string: "            <div id='contact_{2}'  class='contact-row equidistant' data-contact='{0};{1};{2}'>                <div class='col-md-4 col-md-offset-2'> {0}</div>                <div class='col-md-3'> {1}</div>                <div class='col-md-1'>                     <button type='button' class='btn btn-danger remove-contact form-control' data-row='{2}'>-</button>                              </div>             </div>",
    reportView: null,
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .new-contact": "newContact",
        "click .remove-contact": "removeContact",
        "click .send": "submitNew",
        "change .share_to_facebook": "share_on_facebook_auth"
    },
    template: JST["invite.html"],
    render: function(a) {
        this.hidePanels();
        this.bindings = inviteBindings;
        this.$el.html(this.template());
        this.$table = this.$el.find(".contact-table");
        this.$btSend = this.$el.find(".send");
        this.$new_name = this.$el.find(".new-contact-name");
        this.$new_phone = this.$el.find(".new-contact-phone");
        this.$btSend = this.$el.find(".send");
        this.i = 0;
        if (a.id != null) this.createFromInvite(a.id); else {
            this.model = new InviteModel({
                title: a.title
            });
            this.reportView = new ReportView({
                model: this.model,
                el: "#reportXXX"
            });
            this.reportView.render();
            this.stickit();
        }
        this.plugins();
        return this;
    },
    createFromInvite: function(a) {
        var b = this;
        $.ajax({
            url: "/api/invite/" + a,
            type: "GET",
            cache: false,
            success: function(a) {
                b.model = new InviteModel({
                    title: a.title,
                    description: a.description,
                    start_date: moment(a.start).format("L"),
                    start_time: moment(a.start).format("LT"),
                    contacts: []
                });
                if (a.end) {
                    b.model.attributes.end_date = moment(a.end).format("L");
                    b.model.attributes.end_time = moment(a.end).format("LT");
                }
                b.reportView = new ReportView({
                    model: b.model,
                    el: "#reportXXX"
                });
                b.reportView.render();
                a.contacts.forEach(function(a) {
                    a.index = b.i;
                    a.address = [ a.phone, a.email ].join(",");
                    b.$table.append(b.new_contact_string.format(a.name, a.address, a.index));
                    b.model.attributes.contacts.push(a);
                    b.reportView.addContact(a);
                    this.i++;
                });
                if (a.where) {
                    b.model.attributes["address.street"] = a.where.address;
                    b.model.attributes["address.suite"] = a.where.suite;
                    b.model.attributes["address.city"] = a.where.city;
                    b.model.attributes["address.state"] = a.where.state;
                    b.model.attributes["address.zip"] = a.where.zip;
                }
                b.stickit();
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    newContact: function() {
        if (!validator.validateItem(this.$new_phone)) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var a = {
            name: this.$new_name.val(),
            address: this.$new_phone.val(),
            index: this.i
        };
        this.$new_name.val("");
        this.$new_phone.val("");
        this.$table.append(this.new_contact_string.format(a.name, a.address, a.index));
        this.reportView.addContact(a);
        this.model.attributes.contacts.push(a);
        this.i++;
        return false;
    },
    removeContact: function(a) {
        var b = "#contact_" + $(a.currentTarget).data("row");
        this.$table.find(b).remove();
        this.reportView.removeContact(b);
        var c = this.$el.find(".contact-row");
        this.removeContactByIndex(parseInt(b.split("_")[1]));
    },
    removeContactByIndex: function(a) {
        var b = 0;
        this.model.attributes.contacts.forEach(function(c) {
            if (c.index == a) return b;
            b++;
        });
        this.model.attributes.contacts.splice(b, 1);
    },
    submitNew: function(a) {
        var b = this;
        if (!validator.validateItems(".valid-before-submit") || this.model.attributes.contacts.length == 0) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var c = {
            title: this.model.attributes.title,
            description: this.model.attributes.description,
            start: this.model.attributes.start_date + " " + this.model.attributes.start_time,
            end: isNaN(this.model.attributes.end_date) ? this.model.attributes.end_date + " " + this.model.attributes.end_time : null,
            where: {
                address: this.model.attributes["address.street"],
                suite: this.model.attributes["address.suite"],
                city: this.model.attributes["address.city"],
                state: this.model.attributes["address.state"],
                zip: this.model.attributes["address.zip"]
            },
            facebook_share: true,
            user_id: currentUser != null ? currentUser.id : null,
            contacts: this.normalizeContacts(this.model.attributes.contacts)
        };
        $.ajax({
            url: "/api/invite",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(c),
            cache: false,
            success: function(a) {
                alert_notification([ {
                    alertType: "success",
                    message: "Event sent!"
                } ]);
                if (currentUser == null) Backbone.history.navigate("sent/" + a[0], true); else Backbone.history.navigate("view/" + a[0], true);
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    normalizeContacts: function(a) {
        var b = [];
        var c = this;
        a.forEach(function(a) {
            var d = c.parsePhoneAndEmail(a.address);
            b.push({
                name: a.name,
                email: d.email,
                phone: d.phone
            });
        });
        return b;
    },
    parsePhoneAndEmail: function(a) {
        var b = a.trim();
        var c = a.split(";");
        if (c.length == 1) c = a.split(",");
        for (var d = 0; d < c.length; d++) c[d] = c[d].trim();
        if (c.length == 1) {
            if (isNaN(c[0])) return {
                email: c[0],
                phone: ""
            }; else return {
                phone: c[0],
                email: ""
            };
        } else {
            if (isNaN(c[0])) return {
                email: c[0],
                phone: c[1]
            }; else return {
                phone: c[0],
                email: c[1]
            };
        }
    },
    share_on_facebook_auth: function() {
        if (currentUser.social_sharing.facebook || !$(this).is(":checked")) return;
        window.open(api.url + "/social_sharing/facebook", "_blank", "toolbar=yes, scrollbars=no, resizable=yes, top=500, left=500, width=400, height=400");
    },
    plugins: function() {
        $("#bt_toggle").bootstrapToggle();
        $("#bt_toggle").change(function() {
            console.log($(this).prop("checked"));
        });
        this.$el.find(".event-start-date, .event-end-date").datetimepicker({
            pickTime: false
        });
        this.$el.find(".event-start-time, .event-end-time").datetimepicker({
            pickDate: false
        });
        try {
            var a = $("a .active");
            this.$el.find(".snap-panel").panelSnap({
                menuSelector: "a",
                onSnapStart: function(a) {},
                onSnapFinish: function(a) {},
                onActivate: function() {},
                directionThreshold: 50,
                slideSpeed: 200,
                $menu: this.$el.find(".menu"),
                keyboardNavigation: {
                    enabled: true,
                    nextPanelKey: 40,
                    previousPanelKey: 38,
                    wrapAround: false
                }
            });
        } catch (b) {}
    }
});

IndexView = Backbone.View.extend({
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .imeet-btn": "createNew",
        "keypress .invite-title-input": "type_key"
    },
    type_key: function(a) {
        if (a.keyCode == 13) {
            this.createNew();
            a.preventDefault();
            return false;
        }
    },
    render: function(a) {
        $("#view-container").hide();
        this.$el.show();
        this.$inviteTitle = this.$el.find(".invite-title-input");
        this.$headerImage = this.$el.find(".header-section");
    },
    createNew: function() {
        var a = this.$inviteTitle.val();
        if (a != null && a != "") Backbone.history.navigate("/new/" + a, true); else alert("type a title!");
    }
});

InviteView = SimpleView.extend({
    template: JST["inviteReport.html"],
    inviteId: null,
    author: "Organizer",
    initialize: function(a) {
        this.options = a || {};
        this.inviteId = this.options.id;
    },
    render: function(a) {
        this.hidePanels();
        this.inviteId = a.invite_id;
        var b = a.contact_id;
        if (this.inviteId == null) console.error("Invite Id is null, check routing");
        this.$el.html(this.template());
        var c = this;
        $.ajax({
            url: "/api/invite/" + c.inviteId,
            type: "GET",
            cache: false,
            success: function(a) {
                $(".invite-title").html(a.title);
                $(".invite-location").html(a.where);
                $(".invite-date").html(a.start);
                c.loadContacts(a.contacts, b);
                c.currentCommentIndex = a.comments.length;
                c.loadComments(a.comments);
                setInterval(function() {
                    c.getComments(c.inviteId, a.comments.length, c.loadComments);
                }, 6e4);
            }
        });
    },
    addNewComment: function(a) {
        if (a.charCode == 13) {
            var b = this.author;
            var c = a.target.value;
            a.target.value = "";
            $(".invite-comments").append('<li class="invite-comment-row">                                             <span class="pull-left invite-comment-author">{0}:</span>                                                 {1}                                          </li>'.format(b, c));
            $(".invite-comments").scrollTop(1e6);
            $.ajax({
                url: "/api/invite/{0}/comment".format(this.inviteId),
                type: "POST",
                contentType: "application/json",
                data: '{"author": "{0}", "comment": "{1}"}'.format(b, c),
                cache: false,
                error: function(a) {
                    if (a.status != 200) alert_notification([ {
                        alertType: "danger",
                        message: a.responseText
                    } ]);
                }
            });
        }
    },
    getComments: function(a, b, c) {
        $.ajax({
            url: "/api/invite/{0}/comments".format(a),
            type: "GET",
            contentType: "application/json",
            cache: false,
            success: function(a) {
                c(a.comments, b);
            },
            error: function(a) {}
        });
    },
    loadContacts: function(a, b) {
        var c = "            <div class='row contact-row small-margin' data-contact='{0},{1},{2}' >                     <div class='col-xs-2'>                         <i class='fa fa-like fa-1_2x {3}'></i>                     </div>                    <div class='col-xs-6'>                              {0} {1},{2}                     </div>             </div> ";
        var d = $(".invite-table");
        var e = this;
        a.forEach(function(a) {
            if (a.id == b) e.author = a.name || a.email || a.phone || "User";
            var f = "";
            if (a.sms_response == null & a.voice_reponse == null & a.email_response == null) f = "hidden";
            d.append(c.format(a.name || "", a.email || "", a.phone || "", f));
        });
    },
    loadComments: function(a, b) {
        var c = $(".invite-comments");
        var d = "";
        var e = 1;
        var f = this;
        var g = b == null;
        a.forEach(function(a) {
            var c = "";
            if (!g && e >= b) c = "animate_comment";
            d = d.concat('                <li id="{0}" class="invite-comment-row {3}">                     <span class="pull-left invite-comment-author">{1}:</span>                     {2}                 </li>'.format(a.id, a.author, a.comment, c));
            e++;
        });
        c.html(d);
        f.currentCommentIndex = a.lenght;
        c.scrollTop(1e6);
    },
    events: {
        "keypress .invite-newComment": "addNewComment"
    }
});

ReportView = Backbone.View.extend({
    bindings: inviteBindings,
    new_contact_string: "            <li id='contact_{2}' class='contact-row' data-contact='{0};{1};{2}'>                {0} - {1}             </li>",
    initialize: function(a) {
        this.options = a || {};
        this.model = this.options.model;
    },
    template: JST["invite_report.html"],
    render: function() {
        this.$el.html(this.template());
        this.$report_table = this.$el.find(".contact-read-table");
        this.stickit();
        return this;
    },
    addContact: function(a) {
        this.$report_table.append(this.new_contact_string.format(a.name, a.address, a.index));
    },
    removeContact: function(a) {
        this.$report_table.find(a).remove();
    }
});

LoginView = SimpleView.extend({
    render: function(a) {
        this.hidePanels();
        if (this.options.templateId != null) {
            var b = _.template($(this.options.templateId).html(), {});
            this.$el.html(b);
            this.$el.show();
        }
    }
});

ModalView = Backbone.View.extend({
    childView: null,
    template: null,
    initialize: function(a) {
        this.options = a || {};
        this.childView = this.options.childView;
        this.template = this.options.template;
        if (Backbone.pubSub._events == null || Backbone.pubSub._events["childClose"] == null) Backbone.pubSub.on("childClose", this.onChildClose, this);
    },
    render: function(a) {
        var b = this.$el;
        var c = this;
        if (this.options.templateId != null) {
            var d = _.template($(this.options.templateId).html(), {});
            this.$el.html(d);
        } else if (this.template != null) this.$el.html(this.template());
        if (this.childView != null) {
            this.childView.render(a);
        }
        this.$el.find(".close-modal").click(function(a) {
            c.onChildClose({
                view: c.childView
            });
        });
        this.$el.show();
        return this;
    },
    onChildClose: function(a) {
        if (this.$el != null) this.$el.hide();
        Backbone.history.navigate("", true);
    }
});

UserProfileView = Backbone.View.extend({
    template: JST["editProfile.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .save-profile": "save"
    },
    render: function() {
        this.$el.html(this.template());
        this.$name = this.$el.find("#edit-profile-name");
        this.$username = this.$el.find("#edit-profile-username");
        this.$password = this.$el.find("#edit_profile_password");
        this.$email = this.$el.find("#edit-profile-email");
        var a = this;
        $.ajax({
            url: "/api/profile/" + currentUser.id,
            type: "GET",
            cache: false,
            success: function(b) {
                if (b.email != null) {
                    a.$email.html(b.email);
                    a.$email.parent().addClass("floating-label-form-group-with-value");
                }
                if (b.username != null) {
                    a.$username.val(b.username);
                    a.$username.parent().addClass("floating-label-form-group-with-value");
                }
                if (b.name != null) {
                    a.$name.val(b.name + " " + b.last_name);
                    a.$name.parent().addClass("floating-label-form-group-with-value");
                }
            }
        });
    },
    save: function() {
        if (!validator.validateItems(".valid-before-submit")) return;
        var a = {
            username: this.$username.val(),
            password: this.$password.val()
        };
        if (this.$name.val() != null) {
            a.name = this.$name.val().split(" ")[0];
            a.last_name = this.$name.val().split(" ")[1];
        }
        var b = this;
        $.ajax({
            url: "/api/profile/" + currentUser.id,
            type: "POST",
            data: JSON.stringify(a),
            cache: false,
            success: function(a) {
                Backbone.pubSub.trigger("childClose", {
                    view: b
                });
            }
        });
    }
});

SearchView = Backbone.View.extend({
    template: JST["search.html"],
    invite_string: "            <div class='row'>                 <div class='col-sm-4 col-md-offset-2'>  <a href='#' class='navigate' data-action='modal' data-where='view/{0}'>{1}</a> </div>                 <div class='col-sm-3'>  {2} </div>                 <div class='col-sm-2'> <button type='button' class='navigate btn btn-info form-control' data-where='new/from/{0}'>Copy</button></div>             </div>            <div class='small-margin-top'> </div>     ",
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .search": "search",
        "keypress #searchBox": "type_key"
    },
    render: function() {
        this.$el.html(this.template());
        this.$searchBox = this.$el.find("#searchBox");
        this.search();
    },
    type_key: function(a) {
        if (a.keyCode == 13) {
            this.search();
            a.preventDefault();
            return false;
        }
    },
    search: function() {
        var a = this;
        $.ajax({
            url: "/api/invite/search/" + currentUser.id + "?term=" + this.$searchBox.val(),
            type: "GET",
            cache: false,
            success: function(b) {
                if (b != null) {
                    var c = $(".search-result");
                    c.empty();
                    b.forEach(function(b) {
                        c.append(a.invite_string.format(b.unique_id, b.title, b.start, b.end));
                    });
                }
            }
        });
    }
});

SentView = Backbone.View.extend({
    template: JST["invite_sent.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .submit-register": "registerEmail"
    },
    render: function() {
        this.$el.html(this.template({
            invite_id: this.model
        }));
        this.$email = this.$el.find(".register-email");
    },
    registerEmail: function() {
        if (!validator.validateItem(this.$email)) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var a = this;
        $.ajax({
            url: "/register/email/" + this.$email.val(),
            type: "POST",
            cache: false,
            success: function(b) {
                alert_notification([ {
                    alertType: "success",
                    message: "Account Created Successfully, please check your email"
                } ]);
                Backbone.pubSub.trigger("childClose", {
                    view: a
                });
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

UserRegisterView = Backbone.View.extend({
    template: JST["register.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .submit-register": "registerEmail"
    },
    render: function() {
        this.$el.html(this.template());
        this.$email = this.$el.find(".register-email");
    },
    registerEmail: function() {
        if (!validator.validateItem(this.$email)) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var a = this;
        $.ajax({
            url: "/register/email/" + this.$email.val(),
            type: "POST",
            cache: false,
            success: function(b) {
                alert_notification([ {
                    alertType: "success",
                    message: "Account Created Successfully, please check your email"
                } ]);
                Backbone.pubSub.trigger("childClose", {
                    view: a
                });
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    }
});

function init_app() {
    window.App = {
        Models: {},
        Collections: {},
        Views: {},
        Router: {}
    };
    Backbone.pubSub = _.extend({}, Backbone.Events);
    Backbone.pubSub.publish = Backbone.pubSub.trigger;
    Backbone.pubSub.subscribe = Backbone.pubSub.bind;
    Backbone.pubSub.unsubscribe = Backbone.pubSub.unbind;
    index_view = new IndexView({
        el: "#body-container"
    });
    login_view = new LoginView({
        el: "#view-container",
        templateId: "#login"
    });
    user_register_view = new UserRegisterView({
        el: "#modal_container"
    });
    register_view = new ModalView({
        el: "#modal_container",
        childView: user_register_view
    });
    user_profile_view = new UserProfileView({
        el: "#modal_container"
    });
    profile_view = new ModalView({
        el: "#modal_container",
        childView: user_profile_view
    });
    search_view = new SearchView({
        el: "#modal_container"
    });
    search_view_modal = new ModalView({
        el: "#modal_container",
        childView: search_view
    });
    invite_view = new InviteView({
        el: "#view-container"
    });
    sent_view = new SentView({
        el: "#modal_container"
    });
    sent_view_modal = new ModalView({
        el: $("#modal_container"),
        childView: sent_view
    });
    App.Router = Backbone.Router.extend({
        routes: {
            "": "index",
            "_=_": "index",
            "new": "new",
            "new/:title": "new",
            "new/:title/from/:id": "new",
            "new/from/:id": "new_no_title",
            "sent/:id": "sent",
            search: "search",
            login: "login",
            "profile/edit": "edit_profile",
            register: "register",
            "view/:id": "view_as_organizer",
            "view/:id/:contact_id": "view_as_contact"
        },
        index: function() {
            index_view.render();
        },
        login: function() {
            login_view.render();
        },
        register: function() {
            register_view.render();
        },
        edit_profile: function() {
            profile_view.render();
        },
        "new": function(a, b) {
            var c = new CreateView({
                el: "#view-container"
            });
            c.render({
                title: a,
                id: b
            });
        },
        new_no_title: function(a) {
            this.new(null, a);
        },
        sent: function(a) {
            sent_view_modal.childView.model = a;
            sent_view_modal.render();
        },
        search: function() {
            search_view_modal.render();
        },
        view_as_organizer: function(a) {
            invite_view.render({
                invite_id: a
            });
        },
        view_as_contact: function(a, b) {
            invite_view.render({
                invite_id: a,
                contact_id: b
            });
        }
    });
    if (window.location.hash && window.location.hash == "#_=_") {
        window.location.hash = "";
    }
    new App.Router();
    Backbone.history.start({
        pushState: true
    });
    $("#notification-alerts").toggleClass("in");
    $("body").on("click", ".navigate", function(a) {
        var b = $(this).data("where");
        if (b != null) Backbone.history.navigate(b, true); else Backbone.history.navigate("/", true);
    });
    $("body").on("input propertychange", ".floating-label-form-group", function(a) {
        $(this).toggleClass("floating-label-form-group-with-value", !!$(a.target).val());
    }).on("focus", ".floating-label-form-group", function() {
        $(this).addClass("floating-label-form-group-with-focus");
    }).on("blur", ".floating-label-form-group", function() {
        $(this).removeClass("floating-label-form-group-with-focus");
    });
}

$(function() {
    init_app();
});