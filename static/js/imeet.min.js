this["JST"] = this["JST"] || {};

this["JST"]["add-group.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="modal addGroup-modal" tabindex="-1" >\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header">\n            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&amp;times;</button>\n            <h4 class="modal-title" id="myModalLabel">Add New Group</h4>\n            </div>\n            <div class="modal-body">\n                <input type="text" class="form-control new-group-input" />\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-default close-dialog" data-dismiss="modal">Close</button>\n                <button type="button" class="btn btn-primary new-group-btn">Create</button>\n        </div>\n    </div>\n  </div>\n</div>';
    }
    return __p;
};

this["JST"]["attendee_host_list_item.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="block block1 invite-background" data-id="' + __e(unique_id) + '"\n        ';
        if (poster_image_id != null) {
            print("style='background-image: url(/image/" + poster_image_id + ")'");
        } else {
            print("style='background-image: url(/img/default_image.jpg)'");
        }
        __p += '\n    >\n    <div class="center-block" data-id="' + __e(unique_id) + '">\n        <h1 class="main-h1" data-id="' + __e(unique_id) + '">' + __e(title) + '</h1>\n\n        <div class="actions">\n            <div class="row">\n                ';
        if (invite_attendee_role == "organizer") {
            __p += "\n                    <div class=\"col-xs-6 col-md-6 no-padding\">\n                        <button type='button' class='btn btn-info form-control btn-duplicate' data-id=\"" + __e(unique_id) + "\">Duplicate</button>\n                    </div>\n\n                    <div class=\"col-xs-6 col-md-6 no-padding edit-btn\">\n                        <button type='button' class='btn btn-info form-control btn-edit' data-id=\"" + __e(unique_id) + '">Edit</button>\n                    </div>\n                ';
        } else {
            __p += '\n                    <div class="col-xs-6 col-md-6 no-padding btn-yes ';
            if (invite_attendee_role == "no") {
                __p += "confirmed-negative ";
            }
            __p += " ";
            if (invite_attendee_role == "yes") {
                __p += "confirmed-positive ";
            }
            __p += '" data-attendee_id="' + __e(invite_attendee_id) + "\">\n\n                        <button type='button' class='btn form-control' data-attendee_id=\"" + __e(invite_attendee_id) + '">Going <i class="fa fa-check-mark"></i> </button>\n                    </div>\n\n                    <div class="btn-group col-xs-6 col-md-6 no-padding btn-no ';
            if (invite_attendee_role == "yes") {
                __p += "confirmed-negative ";
            }
            __p += " ";
            if (invite_attendee_role == "no") {
                __p += "confirmed-positive ";
            }
            __p += '" data-attendee_id="' + __e(invite_attendee_id) + "\">\n                        <button type='button' class='btn form-control' data-attendee_id=\"" + __e(invite_attendee_id) + '">Not <i class="fa fa-check-mark"></i></button>\n                    </div>\n                ';
        }
        __p += "\n            </div>\n        </div>\n    </div>\n\n</div>";
    }
    return __p;
};

this["JST"]["attendee_list_item.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="block block1 invite-background" data-id="' + __e(unique_id) + '"\n        ';
        if (poster_image_id != null) {
            print("style='background-image: url(/image/" + poster_image_id + ")'");
        } else {
            print("style='background-image: url(/img/default_image.jpg)'");
        }
        __p += '\n    >\n    <div class="center-block" data-id="' + __e(unique_id) + '">\n        <h1 class="main-h1" data-id="' + __e(unique_id) + '">' + __e(title) + '</h1>\n\n        <div class="actions">\n            <div class="row">\n                ';
        if (invite_attendee_role == "organizer") {
            __p += "\n                    <div class=\"col-xs-6 col-md-6 no-padding\">\n                        <button type='button' class='btn btn-info form-control btn-duplicate' data-id=\"" + __e(unique_id) + "\">Duplicate</button>\n                    </div>\n\n                    <div class=\"col-xs-6 col-md-6 no-padding edit-btn\">\n                        <button type='button' class='btn btn-info form-control btn-edit' data-id=\"" + __e(unique_id) + '">Edit</button>\n                    </div>\n                ';
        } else {
            __p += '\n                    <div class="col-xs-6 col-md-6 no-padding btn-yes ';
            if (invite_attendee_role == "no") {
                __p += "confirmed-negative ";
            }
            __p += " ";
            if (invite_attendee_role == "yes") {
                __p += "confirmed-positive ";
            }
            __p += '" data-attendee_id="' + __e(invite_attendee_id) + "\">\n\n                        <button type='button' class='btn form-control' data-attendee_id=\"" + __e(invite_attendee_id) + '">Going <i class="fa fa-check-mark"></i> </button>\n                    </div>\n\n                    <div class="btn-group col-xs-6 col-md-6 no-padding btn-no ';
            if (invite_attendee_role == "yes") {
                __p += "confirmed-negative ";
            }
            __p += " ";
            if (invite_attendee_role == "no") {
                __p += "confirmed-positive ";
            }
            __p += '" data-attendee_id="' + __e(invite_attendee_id) + "\">\n                        <button type='button' class='btn form-control' data-attendee_id=\"" + __e(invite_attendee_id) + '">Not <i class="fa fa-check-mark"></i></button>\n                    </div>\n                ';
        }
        __p += "\n            </div>\n        </div>\n    </div>\n\n</div>";
    }
    return __p;
};

this["JST"]["contact_details.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="modal addContact-modal" tabindex="-1" >\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header">\n            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&amp;times;</button>\n            <h4 class="modal-title" id="myModalLabel">\n                ';
        if (createMode) {
            __p += "\n                    Add New Contact\n              ";
        } else {
            __p += "\n                    Edit\n              ";
        }
        __p += '\n\n            </h4>\n            </div>\n            <div class="modal-body">\n                <div class="row">\n                    <div class="col-md-2">Name: </div>\n                    <div class="col-md-10">\n                        <input type="text" value="' + __e(contact.name) + '" class="form-control contact_input" id="nameInput" placeholder="Jane Doe" data-validation="required">\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-md-2">Phone: </div>\n                    <div class="col-md-10">\n                        <input type="text" value="' + __e(contact.phone) + '" class="form-control contact_input" id="phoneInput" placeholder="000 000 0000" data-validation="phone">\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-md-2">Email: </div>\n                    <div class="col-md-10">\n                        <input type="text" value="' + __e(contact.email) + '" class="form-control contact_input" id="emailInput" placeholder="john.smith@example.com" data-validation="email">\n                    </div>\n                </div>\n\n                <div class="small-margin-top"></div>\n\n                <div class="row">\n                    <div class="col-md-2">Groups: </div>\n                    <div class="col-md-10">\n                ';
        if (!createMode) {
            __p += '\n                        <div class="contact-groups"></div>\n                ';
        } else {
            __p += "\n                        <i>Create the contact first, then you can add it to groups</i>\n                ";
        }
        __p += '\n                    </div>\n                </div>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-default close-dialog" data-dismiss="modal">Close</button>\n                <button type="button" class="btn btn-primary new-contact-btn">\n                    ';
        if (createMode) {
            __p += "\n                            Create\n                      ";
        } else {
            __p += "\n                            Update\n                      ";
        }
        __p += "\n                </button>\n        </div>\n    </div>\n  </div>\n</div>";
    }
    return __p;
};

this["JST"]["contact_item.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="contact-row" data-id="' + __e(unique_id) + '" draggable="true">\n    <div class="editable contact-picture" data-id="' + __e(unique_id) + '" >\n        <i class="fa fa-person fa-2x" data-id="' + __e(unique_id) + '"></i>\n    </div>\n\n    <div class="contact-row-container" data-id="' + __e(unique_id) + '">\n        <div class="contact-name" data-id="' + __e(unique_id) + '">\n            ' + __e(name) + '\n        </div>\n        <div class="contact-email" data-id="' + __e(unique_id) + '">\n            ' + __e(email) + '\n        </div>\n        <div class="contact-phone" data-id="' + __e(unique_id) + '">\n            ' + __e(phone) + '\n        </div>\n    </div>\n\n    <a class="update-contact" href="#"><i class="fa-pen fa-1_2x"></i></a>\n\n    <div class="editable contact-actions">\n        <a class="delete-contact" href="#"><i data-id="' + __e(unique_id) + '" class="fa-delete-garbage-streamline fa-1_2x"></i></a>\n    </div>\n</div>';
    }
    return __p;
};

this["JST"]["contact_item_typeahead.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="item-container" data-id="' + __e(unique_id) + '">\n    <i class="fa fa-person fa-2x"></i>\n    <b>' + __e(name) + "</b> " + __e(email) + " " + __e(phone) + "\n</div>";
    }
    return __p;
};

this["JST"]["contacts.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div id="new-contact-container"></div>\n\n<div class="row no-margin contacts-header">\n\n    <h3 class="current-page">Contacts</h3>\n    <h3 ><a href="#" class="navigate-to-groups inactive-page">Groups</a></h3>\n\n    <a class="btn btn-success add-contact pull-right" href="contacts/new">New Contact</a>\n    <!--<a class="btn add-group pull-right" href="#">New Group</a>-->\n</div>\n\n<div class="row no-margin empty-contacts text-center small-margin-top">\n    ';
        if (contacts.length == 0) {
            __p += '\n        You dont have any contacts. <a href="/new" type="button" class="btn add-contact">Create New!</a>\n    ';
        }
        __p += '\n</div>\n\n<div class="row small-margin-top no-margin contacts-table-container">\n\n    <div id="contacts_table" class="small-margin-top">\n\n        ';
        _.each(contacts, function(contact) {
            __p += "\n            " + ((__t = partial("contact_item.html", contact)) == null ? "" : __t) + "\n        ";
        });
        __p += "\n    </div>\n</div>";
    }
    return __p;
};

this["JST"]["group_details.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="modal addGroup-modal" tabindex="-1" >\n    <div class="modal-dialog">\n        <div class="modal-content">\n            <div class="modal-header">\n            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&amp;times;</button>\n            <h4 class="modal-title" id="myModalLabel">\n                ';
        if (createMode) {
            __p += "\n                    Add New Group\n              ";
        } else {
            __p += "\n                    Edit\n              ";
        }
        __p += '\n\n            </h4>\n            </div>\n            <div class="modal-body">\n                <div class="row">\n                    <div class="col-md-2">Name: </div>\n                    <div class="col-md-10">\n                        <input type="text" value="' + __e(group.name) + '" class="form-control group_input" id="nameInput" placeholder="My Group" data-validation="required">\n                    </div>\n                </div>\n            </div>\n            <div class="modal-footer">\n                <button type="button" class="btn btn-default close-dialog" data-dismiss="modal">Close</button>\n                <button type="button" class="btn btn-primary new-group-btn">\n                    ';
        if (createMode) {
            __p += "\n                            Create\n                      ";
        } else {
            __p += "\n                            Update\n                      ";
        }
        __p += "\n                </button>\n        </div>\n    </div>\n  </div>\n</div>";
    }
    return __p;
};

this["JST"]["group_item.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="group-row" data-id="' + __e(unique_id) + '" draggable="true">\n    <div class="editable group-picture" data-id="' + __e(unique_id) + '">\n        <i class="fa fa-organization fa-2x"></i>\n    </div>\n\n    <div class="group-row-container" data-id="' + __e(unique_id) + '">\n        <div class="group-name" data-id="' + __e(unique_id) + '">\n            ' + __e(name) + '\n        </div>\n    </div>\n\n    <a class="update-group" href="#"><i class="fa-pen fa-1_2x"></i></a>\n\n    <div class="editable group-actions">\n        <a class="delete-group" href="#"><i data-id="' + __e(unique_id) + '" class="fa-delete-garbage-streamline fa-1_2x"></i></a>\n    </div>\n</div>';
    }
    return __p;
};

this["JST"]["group_item_typeahead.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="item-container" data-id="' + __e(unique_id) + '">\n    <i class="fa fa-organization fa-2x"></i>\n    <b>' + __e(name) + "</b>\n</div>";
    }
    return __p;
};

this["JST"]["group_search.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '\n<div class="contact-group-list col-md-12 no-padding">\n    ';
        _.each(contact.groups, function(group) {
            __p += "\n        " + ((__t = partial("group_item.html", group)) == null ? "" : __t) + "\n    ";
        });
        __p += "\n</div>\n\n";
        if (!searchMode) {
            __p += "\n    <a href='#' class='add-to-group'>+Add to Group</a>\n";
        } else {
            __p += '\n    <input type="text" class="group-input" />\n';
        }
    }
    return __p;
};

this["JST"]["groups.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div id="new-group-container"></div>\n\n<div class="row no-margin groups-header">\n    <h3><a href="#" class="navigate-to-contacts inactive-page">Contacts</a></h3>\n    <h3 class="current-page">Groups</h3>\n\n    <a class="btn btn-success add-group pull-right" href="#">New Group</a>\n</div>\n\n<div class="row no-margin empty-groups text-center small-margin-top">\n    ';
        if (groups.length == 0) {
            __p += '\n        You dont have any groups. <a href="/new" type="button" class="btn add-group">Create New!</a>\n    ';
        }
        __p += '\n</div>\n\n<div class="row small-margin-top no-margin contacts-table-container">\n    <div id="groups_table" class="small-margin-top">\n        ';
        _.each(groups, function(group) {
            __p += "\n            " + ((__t = partial("group_item.html", group)) == null ? "" : __t) + "\n        ";
        });
        __p += "\n    </div>\n</div>";
    }
    return __p;
};

this["JST"]["invite.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="invite-view">\n    <div class="row">\n        <div id="invite-header"></div>\n    </div>\n    <div class="row no-margin">\n        <div id="invite-details" class="invite-subheader-banner palette-editable"></div>\n    </div>\n\n    <div class="row invite-body no-margin">\n        <div class="small-margin-top"></div>\n        <div class="col-md-1"/>\n        <div class="col-md-4 attendees">\n            <div id="invite-attendees">\n                <!--using invite_attendees.html subview-->\n            </div>\n        </div>\n        <div class="col-md-1"/>\n        <div class="col-md-5 hangout">\n            <div class="row small-margin-top desktop desktop-description">\n                <div class="col-md-12">\n                    <h4>Message from the host</h4>\n                    <div class="invite-description">' + __e(description) + '</div>\n                </div>\n            </div>\n\n            <div id="invite-comments"></div>\n\n        </div>\n        <div class="col-md-1"/>\n    </div>\n</div>\n\n\n\n';
    }
    return __p;
};

this["JST"]["invite_admin.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="invite-view">\n    <div class="row">\n        <div id="invite-header"></div>\n    </div>\n    <div class="row no-margin">\n        <div id="invite-details" class="invite-subheader-banner palette-editable"></div>\n    </div>\n\n    <div class="row invite-body no-margin">\n        <div class="small-margin-top"></div>\n        <div class="col-md-1"/>\n        <div class="col-md-4 attendees">\n            <div class="notify-all">\n                Want to let people know? <div class=\'notify-all-btn btn btn btn-success\'>Notify All</div>\n            </div>\n\n            <div id="invite-new-attendee"></div>\n\n            <div id="invite-attendees">\n                <!--using invite_attendees.html subview-->\n            </div>\n        </div>\n        <div class="col-md-1"/>\n        <div class="col-md-5 hangout">\n            <div class="row small-margin-top desktop desktop-description">\n                <div class="col-md-12">\n                    <h4>Message from the host</h4>\n                    <div id="invite-description"></div>\n                </div>\n            </div>\n\n            <div id="invite-comments"></div>\n\n        </div>\n        <div class="col-md-1"/>\n    </div>\n</div>\n\n\n\n\n';
    }
    return __p;
};

this["JST"]["invite_attendee.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="details">\n    ';
        if (status == "organizer") {
            __p += "\n        <b><i>Host</i></b>\n    ";
        }
        __p += "\n    <b>" + __e(name) + "</b> " + __e(email) + " " + __e(phone) + "\n</div>";
    }
    return __p;
};

this["JST"]["invite_attendee_admin.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<a href="#" class="edit-attendee" data-rowid="' + __e(invite_attendee_id) + '" ';
        if (!notified) {
            __p += ' title="Not Notified!" ';
        }
        __p += ' >\n    <div class="details ';
        if (!notified) {
            __p += " un_notified ";
        }
        __p += '">\n        ';
        if (status == "organizer") {
            __p += "\n            <b><i>Host</i></b>\n        ";
        }
        __p += '\n        <i class="fa-pen fa-1x"></i>&nbsp;<b>' + __e(name) + "</b> " + __e(email) + " " + __e(phone) + '\n        <p class="warning" title="Not notified Contact!">!</p>\n    </div>\n</a>';
    }
    return __p;
};

this["JST"]["invite_attendee_create.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="row rsvp no-margin">\n    <div class="panel panel-default no-border no-margin">\n      <div class="panel-heading no-padding palette-editable">Invite People</div>\n      <div class="panel-body  micro-margin-top">\n          <div>\n              <div class="col-md-10 col-xs-12 no-padding">\n                  <input type="text" class="contact-input form-control"\n                    ';
        if (features.indexOf("voice") != -1) {
            __p += "\n                    data-validation='required,email|phone' placeholder='Name, Phone Number, Email'\n                    ";
        } else {
            __p += "\n                    data-validation='required,email' placeholder='Email Address'\n                    ";
        }
        __p += '>\n              </div>\n              <div class="col-md-2 col-xs-12 no-padding">\n                  <button type="button" class="btn new-contact-button">+</button>\n              </div>\n          </div>\n      </div>\n    </div>\n</div>';
    }
    return __p;
};

this["JST"]["invite_attendees.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        if (attendee != null && attendee.status == "organizer") {
            __p += '\n    <div id="new-contact-container" ></div>\n';
        }
        __p += "\n\n";
        if (attendee != null && attendee.status != "organizer") {
            __p += '\n    <div class="row rsvp small-margin-top">\n          ';
            if (attendee.status != "deleted") {
                __p += '\n            <div class="panel panel-default">\n              <div class="panel-heading palette-editable">\n                  ';
                if (attendee.status == "no_response") {
                    __p += "\n                        Are you coming?\n                  ";
                } else if (attendee.status == "no") {
                    __p += "\n                        Sad you can't attend :(\n                  ";
                } else if (attendee.status == "yes") {
                    __p += "\n                        Glad you're coming :)\n                  ";
                }
                __p += '\n              </div>\n\n              <div class="panel-body acknowledge-body">\n                <div class="col-md-6 yes-button">\n                    <button type="button" class="btn form-control btn-success invite-attendees-acknowledge-yes response-' + __e(attendee.status) + '">YES<i class="fa fa-check-mark"></i></button>\n                </div>\n                <div class="col-md-6 no-button">\n                    <button type="button" class="btn form-control btn-danger invite-attendees-acknowledge-no response-' + __e(attendee.status) + '">NO<i class="fa fa-check-mark"></i></button>\n                </div>\n              </div>\n            </div>\n          ';
            } else if (attendee != null && attendee.status == "deleted") {
                __p += '\n            <div class="panel panel-default">\n                <div class="panel-heading"></div>\n                  <div class="panel-body">\n                    <b>The organizer removed you from this event</b>\n                </div>\n            </div>\n          ';
            } else if (attendee != null && attendee.status == "organizer") {
                __p += "\n            <!-- Potentially also add people here -->\n          ";
            } else {
                __p += "\n\n          ";
            }
            __p += "\n    </div>\n";
        }
        __p += '\n\n<div class="row rsvp no-margin">\n    <div class="panel panel-default no-border">\n      <div class="panel-heading yes palette-editable"> Who is coming? (' + __e(confirmed.length) + ')</div>\n      <div class="panel-body">\n        ';
        _.each(confirmed, function(item) {
            __p += "\n            ";
            if (item.status != "organizer" && edit_view && attendee != null && attendee.status == "organizer") {
                __p += "\n                " + ((__t = partial("invite_attendee_admin.html", item)) == null ? "" : __t) + "\n          ";
            } else {
                __p += "\n            " + ((__t = partial("invite_attendee.html", item)) == null ? "" : __t) + "\n          ";
            }
            __p += "\n        ";
        });
        __p += '\n      </div>\n   </div>\n\n    <div class="panel panel-default no-border">\n      <div class="panel-heading no palette-editable">Who is not coming? ';
        if (negated.length > 0) {
            __p += "(" + __e(negated.length) + ")";
        }
        __p += '</div>\n      <div class="panel-body">\n        ';
        _.each(negated, function(item) {
            __p += "\n            ";
            if (edit_view && attendee != null && attendee.status == "organizer") {
                __p += "\n                " + ((__t = partial("invite_attendee_admin.html", item)) == null ? "" : __t) + "\n          ";
            } else {
                __p += "\n            " + ((__t = partial("invite_attendee.html", item)) == null ? "" : __t) + "\n          ";
            }
            __p += "\n        ";
        });
        __p += '\n      </div>\n   </div>\n\n    <div class="panel panel-default no-border">\n      <div class="panel-heading palette-editable">\n          Who is invited?\n\n      </div>\n      <div class="panel-body no-response-table">\n        ';
        _.each(no_response, function(item) {
            __p += "\n          ";
            if (edit_view && attendee != null && attendee.status == "organizer") {
                __p += "\n                " + ((__t = partial("invite_attendee_admin.html", item)) == null ? "" : __t) + "\n          ";
            } else {
                __p += "\n            " + ((__t = partial("invite_attendee.html", item)) == null ? "" : __t) + "\n          ";
            }
            __p += "\n        ";
        });
        __p += "\n      </div>\n   </div>\n\n\n</div>\n\n";
    }
    return __p;
};

this["JST"]["invite_comment.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="row">\n    <span class="comment-date pull-right">' + __e(on) + '</span>\n    <div class="col-md-12 invite-comment-row" data-rowid="' + __e(unique_id) + '">\n        <span class="comment-author">\n            ';
        if (author == null) {
            __p += "\n                Anonymous\n            ";
        } else {
            __p += "\n                " + __e(author) + "\n            ";
        }
        __p += "\n            </span> : " + __e(comment) + "\n    </div>\n</div>";
    }
    return __p;
};

this["JST"]["invite_comment_box.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="row comment-box" >\n    <div class="col-md-12 no-margin">\n        <textarea class="invite-comment-input"  placeholder="Add comment"></textarea>\n    </div>\n</div>\n\n<div class="row comment-box">\n    <div class="col-md-6 no-margin">\n        <button type="button" class="btn form-control btn-success add-comment">Add Comment</button>\n    </div>\n</div>';
    }
    return __p;
};

this["JST"]["invite_comments.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="row small-margin-top">\n    <div class="col-md-12 no-margin">\n        <h4>Comments</h4>\n    </div>\n</div>\n\n<div class="row no-margin comment-box">\n    ';
        if (current_attendee != null) {
            __p += "\n        " + ((__t = partial("invite_comment_box.html", null)) == null ? "" : __t) + "\n    ";
        }
        __p += '\n</div>\n\n<div class="row invite-comments">\n    <div class="col-md-12 invite-comments-container">\n        ';
        _.each(comments, function(comment) {
            __p += "\n            " + ((__t = partial("invite_comment.html", comment)) == null ? "" : __t) + "\n        ";
        });
        __p += "\n    </div>\n</div>\n\n";
    }
    return __p;
};

this["JST"]["invite_confirmation.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += "<div>\n    A confirmation email was sent to:\n\n    Check your email and follow the instructions.\n</div>";
    }
    return __p;
};

this["JST"]["invite_create.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div id="invite-create">\n    <div class="row no-margin event-title-row">\n        <div class="no-padding col-xs-12 col-md-8 col-md-offset-2 text-center">\n            <h1>Create iMeet <i class="fa fa-paper-plane fa-1x"></i></h1>\n        </div>\n    </div>\n\n    ';
        if (anonymous) {
            __p += '\n        <div class="desktop row no-margin">\n            <div class="no-padding col-xs-12 col-md-8 col-md-offset-2 text-center">\n                <label class="small-text">\n                Note: For sms/calls to work, you have to be a registered User\n                <br/>\n                Note1: Your email is required, because you\'re not logged in\n                <br/>\n                Note2: Sms/calls will be free only during the beta phase. After that a subscription base fee will be offered\n                </label>\n            </div>\n        </div>\n    ';
        }
        __p += '\n\n    <div class="row no-margin event-title-input-row">\n        <div class="no-padding col-xs-12 col-md-8 col-md-offset-2">\n            <input type="text" class="form-control event-name-input valid-before-submit" placeholder="Event Title" autofocus data-validation="required" value="' + __e(title) + '" >\n        </div>\n    </div>\n\n    ';
        if (anonymous) {
            __p += '\n        <div class="row no-margin organizer-email-input-row">\n            <div class="no-padding col-xs-12 col-md-8 col-md-offset-2">\n                <input type="text" class="form-control organizer-email-input valid-before-submit" placeholder="Your Email" autofocus data-validation="required" value="' + __e(organizer_email) + '" >\n            </div>\n        </div>\n    ';
        }
        __p += '\n\n    <div class="row no-margin location-input-row">\n        <div class="no-padding col-xs-12 col-md-8 col-md-offset-2">\n              <input type="text" class="form-control event-location-input" placeholder="Location...."  >\n        </div>\n    </div>\n\n    <div class="mobile tablet row no-margin from-event-date-row">\n        <div class="no-padding col-xs-12 col-md-2 text-center label-text text-center">\n            <h1>From</h1>\n        </div>\n    </div>\n\n    <div class="row no-margin event-date-row">\n        <div class="no-padding date-group col-xs-12 col-md-3 col-md-offset-2" id="start-date-group">\n            <input readonly="true" required type="text" class="date event-start-date valid-before-submit" placeholder="01/01/2000" data-validation="required,date"  value="' + __e(start_date) + '">\n            <input readonly="true" required type="int" class="time event-start-time  valid-before-submit" placeholder="00:00 AM" data-validation="required"  value="' + __e(start_time) + '">\n        </div>\n\n        <div class="no-padding col-xs-12 col-md-2 text-center to-event-date-row">\n            <h1>To</h1>\n        </div>\n\n        <div class="no-padding date-group col-xs-12  col-md-3 end-event-date-input-row" id="end-date-group">\n            <input readonly="true" required type="text" class="date event-end-date" placeholder="01/01/2000" value="' + __e(end_date) + '">\n            <input readonly="true" required type="text" class="time event-end-time" placeholder="00:00 AM"  value="' + __e(end_time) + '">\n        </div>\n\n    </div>\n\n    <div class="row desktop no-margin description-row">\n        <div class="no-padding col-xs-12 col-md-8 col-md-offset-2 ">\n          <textarea class="form-control event-description-input" rows="6"></textarea>\n        </div>\n    </div>\n\n\n    <!--<div class="no-margin">-->\n        <!--<div class="no-padding col-xs-12  col-md-3 col-md-offset-2">-->\n            <!--<div class=" facebook_share pull-right" style="display: inline-block">-->\n                <!--<div>Share on Facebook</div>-->\n                <!--<div><input type="checkbox"-->\n                   <!--data-toggle="toggle"-->\n                   <!--id="bt_toggle"-->\n                   <!--class="share_to_facebook"-->\n                   <!--data-style="android"-->\n                   <!--data-on=" " data-off=" "-->\n                   <!--data-onstyle="info"-->\n                   <!--data-onstyle="success" data-offstyle="danger" />-->\n                <!--</div>-->\n            <!--</div>-->\n        <!--</div>-->\n    <!--</div>-->\n\n    <div class="row no-margin button-row">\n        <div class="no-padding text-center col-xs-12  col-md-8 col-md-offset-2">\n            <button type="button" class="btn form-control btn-success send">Create</button>\n        </div>\n    </div>\n</div>\n';
    }
    return __p;
};

this["JST"]["invite_details.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '\n\n<div id="invite-details-container" class="details-row ';
        if (is_edit) {
            __p += " clickable edit";
        }
        __p += '">\n';
        if (is_admin) {
            __p += "\n    <div class=\"row\">\n        <div class='col-md-12 col-xs-12 edit_button_container'>\n        ";
            if (!is_edit) {
                __p += '\n            <button class="btn btn-success edit_invite">Edit iMeet</button>\n         ';
            } else {
                __p += '\n            <button class="btn btn-success save_invite">Save</button>\n         ';
            }
            __p += "\n    </div>\n";
        }
        __p += '\n\n\n</div>\n\n<div class="row no-margin">\n    <div class="col-md-2 no-padding"></div>\n\n    <div class=\'col-md-2 col-xs-12 no-padding\'>\n        <div class="title">Start</div>\n        ';
        if (!is_edit) {
            __p += '\n            <div class="details invite-date">' + __e(start_date) + " " + __e(start_time) + "</div>\n        ";
        } else {
            __p += '\n            <div class="date-group" id="start-date-group">\n                <input readonly="true" required type="text" class="date event-start-date valid-before-submit" placeholder="01/01/2000" data-validation="required,date"  value="' + __e(start_date) + '">\n                <input readonly="true" required type="int" class="time event-start-time  valid-before-submit" placeholder="00:00 AM" data-validation="required"  value="' + __e(start_time) + '">\n            </div>\n        ';
        }
        __p += "\n    </div>\n\n    <div class='col-md-2  col-xs-12 no-padding'>\n        <div class=\"title\">End</div>\n        ";
        if (!is_edit) {
            __p += '\n            <div class="details invite-end-date">' + __e(end_date) + " " + __e(end_time) + "</div>\n        ";
        } else {
            __p += '\n            <div class="date-group" id="end-date-group">\n                <input readonly="true" required type="text" class="date event-end-date" placeholder="01/01/2000" data-validation="date"  value="' + __e(end_date) + '">\n                <input readonly="true" required type="int" class="time event-end-time" placeholder="00:00 AM" data-validation="required"  value="' + __e(end_time) + '">\n            </div>\n        ';
        }
        __p += "\n    </div>\n\n     <div class='col-md-4 col-xs-12 invite-location-container no-padding'>\n         ";
        if (!is_edit) {
            __p += '\n            <div class="location-image"><i class="fa fa-map-pin-streamline fa-15x"></i></div>\n            <div id="invite-location" class="title">\n                <a href="https://www.google.com/maps/place/' + __e(where) + '" target="_blank">' + __e(where) + "</a>\n            </div>\n         ";
        } else {
            __p += '\n            <div class="title">Location</div>\n            <div><input type="text" class="form-control event-location-input" placeholder="Location...."  ></div>\n         ';
        }
        __p += '\n     </div>\n</div>\n\n<div id="palette-container" class="row no-margin small-margin-top"></div>\n\n</div>\n\n';
    }
    return __p;
};

this["JST"]["invite_header.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="block block1 invite-background"\n     ';
        if (poster_image_id != null) {
            print("style='background-image: url(/image/" + poster_image_id + ")'");
        } else {
            print("style='background-image: url(/img/default_image.jpg)'");
        }
        __p += '\n>\n    <div class="center-block">\n       <div class="invite-title-container">\n       </div>\n       <div class="upload">\n            <form id="upload_image_form" data-id="' + __e(unique_id) + '" method="POST" enctype="multipart/form-data">\n                <input type="file" name="upload_image_file" id="upload_image_file" >\n            </form>\n            <button id="image_select_btn" class="btn btn-success">Change cover</button>\n       </div>\n\n    </div>\n\n</div>\n';
    }
    return __p;
};

this["JST"]["invite_search.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '\n<div id="search-view">\n\n    <div class="row no-margin desktop">\n        <div class="col-sm-10 no-padding">\n            <input id="searchBox" type="text" class="form-control event-name" placeholder="Invite Title" data-validation="required">\n        </div>\n\n        <div class="col-sm-2 no-padding">\n            <button type="button" class="btn btn-success form-control search">Search</button>\n        </div>\n    </div>\n\n    <div class="row no-margin filter-row">\n        <div class="navigator">\n            <div><a href="" class="filter unread" data-filter="unread">Unread</a></div>\n            <div>|</div>\n            <div><a href="" class="filter accepted" data-filter="accepted">Accepted</a></div>\n            <div>|</div>\n            <div><a href="" class="filter denied" data-filter="denied">Denied</a></div>\n            <div>|</div>\n            <div><a href="" class="filter hosting" data-filter="host">Hosting</a> </div>\n            <div>|</div>\n            <div><a href="" class="filter all" data-filter="">All</a> </div>\n        </div>\n    </div>\n\n    <div class="controls" id="search-result">\n        ';
        if (invites.length == 0) {
            __p += '\n            Your search didn\'t resolved any iMeets. <a href="/new" type="button" class="btn btn-success">Start sending!</a>\n        ';
        }
        __p += "\n        ";
        _.each(invites, function(item) {
            __p += "\n            ";
            if (item.invite_attendee_role == "organizer") {
                __p += "\n                " + ((__t = partial("attendee_host_list_item.html", item)) == null ? "" : __t) + "\n            ";
            } else {
                __p += "\n                " + ((__t = partial("attendee_list_item.html", item)) == null ? "" : __t) + "\n            ";
            }
            __p += "\n\n        ";
        });
        __p += "\n    </div>\n</div>\n\n";
    }
    return __p;
};

this["JST"]["invite_sent.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="modal-content">\n    <form id="registerForm">\n        <div class="close-modal" data-action="dismiss">\n            <div class="lr">\n                <div class="rl">\n                </div>\n            </div>\n        </div>\n\n        <div class="container">\n            <div class="row">\n                Invite Link <a href="http://imeet.io/invite/';
        print(invite_id);
        __p += '"><h5 class="text-lowercase">http://imeet.io/invite/';
        print(invite_id);
        __p += '</h5></a>\n            </div>\n            <div class="row small-margin-top"></div>\n            <div class="row">\n               Register\n               <div class="controls">\n                   <div class="col-sm-3"></div>\n                    <div class="col-sm-6">\n                        <div class="col-sm-9">\n                            <input required type="email" class="form-control register-email" placeholder="Enter email..." data-validation="email">\n                        </div>\n                        <div class="col-sm-3">\n                            <button type="button" class="btn btn-success form-control submit-register">Go</button>\n                        </div>\n                    </div>\n                    <div class="col-sm-3"></div>\n                </div>\n           </div>\n        </div>\n    </form>\n</div>\n';
    }
    return __p;
};

this["JST"]["login.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div id="login-page">\n<form id="loginForm" action="/login" method="post">\n\n<div class="login-box">\n    <div class="row no-margin text-center">\n        <div class="no-padding col-md-6 col-xs-6">\n             <a href="/login/social/facebook" class="btn btn-facebook ">\n              <div class="text">Login with Facebook</div>\n              <div class="letter">\n                <i class="fa fa-facebook fa-2x"></i>\n              </div>\n            </a>\n        </div>\n        <div class="no-padding col-md-6 col-xs-6">\n            <a href="/login/social/google"  class="btn btn-google">\n                <div class="text">\n                    Login with Google\n                </div>\n                <div class="letter">\n                    <i class="fa fa-google fa-2x"></i>\n                </div>\n            </a>\n        </div>\n    </div>\n\n\n    <div class="row no-margin">\n        <div class="no-padding col-md-12 section-item contact-table equidistant">\n          <h4>Have an account with us?</h4>\n        </div>\n    </div>\n\n    <div class="row no-margin">\n        <div class="no-padding col-md-12">\n            <input id="username" name="username" required type="text" class="form-control " placeholder="Username">\n        </div>\n    </div>\n\n    <div class="row no-margin">\n        <div class="no-padding col-md-12">\n            <input id="password" name="password" required type="password" class="form-control " placeholder="Password">\n        </div>\n    </div>\n\n    <div class="row no-margin">\n        <div class="no-padding col-md-12">\n            <label class="remember pull-right" style="padding: 10px">\n                Remember me?\n                <input type="checkbox" name="remember_me" id="remember_me" value="on">\n              </label>\n        </div>\n    </div>\n\n     <div class="row no-margin">\n          <div class="col-sm-12 no-padding">\n              <button type="submit" class="btn btn-success form-control pull-right">Login</button>\n          </div>\n      </div>\n\n    <div class="row no-margin">\n        <div class="no-padding col-md-12">\n            <label class="remember pull-right">\n              Don\'t have an account?\n              <a href="" class="btn signup">Sign Up - It\'s Free.</a>\n            </label>\n        </div>\n    </div>\n</div>\n</form>\n</div>';
    }
    return __p;
};

this["JST"]["palette.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape, __j = Array.prototype.join;
    function print() {
        __p += __j.call(arguments, "");
    }
    with (obj) {
        __p += '<div class="palette-modal">\n    <div class="row no-margin palette">\n        ';
        _.each(palettes, function(item) {
            __p += '\n          <div class="palette-item" style="background-color: ' + __e(item.main_bg_color) + '" data-id="' + __e(item.unique_id) + '"></div>\n        ';
        });
        __p += "\n    </div>\n</div>";
    }
    return __p;
};

this["JST"]["profile_edit.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div id="edit-profile-view">\n\n    <div class="row no-margin">\n        <div class="col-xs-12 no-padding">\n           <h4>Edit your profile</h4>\n       </div>\n    </div>\n\n    <div class="row no-margin">\n       <div class="col-xs-12 no-padding">\n           <div id="edit-profile-email"></div>\n       </div>\n    </div>\n\n    <div class="row no-margin">\n       <div class="col-xs-12 no-padding">\n        <input id="edit-profile-name" type="text" class="form-control valid-before-submit" placeholder="John Smith..." data-validation="required">\n       </div>\n    </div>\n\n    <div class="row no-margin username-row">\n        <div class="col-xs-12 no-padding">\n            <input id="edit-profile-username" type="text" class="form-control valid-before-submit" placeholder="username..." data-validation="required">\n        </div>\n    </div>\n\n    <div class="row no-margin password-row">\n        <div class="col-xs-12 no-padding">\n            <input id="edit_profile_password" name="edit_profile_password" type="password" class="form-control" placeholder="password...">\n        </div>\n    </div>\n\n    <div class="row no-margin">\n        <div class="col-xs-12 no-padding">\n            <input name="edit_profile_password_confirm" id="edit_profile_password_confirm" type="password" class="form-control" placeholder=" confirm password...">\n        </div>\n    </div>\n\n    <div class="row no-margin button-row">\n        <div class="col-xs-12 no-padding">\n            <button type=\'button\' class=\'save-profile btn btn-info form-control\'>Save</button>\n        </div>\n    </div>\n\n</div>\n';
    }
    return __p;
};

this["JST"]["register.html"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div id="register">\n    <div class="block block1 register-background">\n        <div class="center-block">\n          <h1 class="main-h1">Make the jump! Join the Fun</h1>\n        </div>\n    </div>\n\n\n\n    <div class="row no-margin register-box-parent">\n        <div class="register-box">\n            <div class="input-div"><input required type="email" class="form-control register-email" placeholder="Enter email..." data-validation="required,email"></div>\n            <div class="button-div"><button type="button" class="btn btn-success form-control submit-register">Register</button></div>\n        </div>\n    </div>\n</div>';
    }
    return __p;
};

if (!String.prototype.format) {
    String.prototype.format = function() {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function(match, number) {
            return typeof args[number] != "undefined" ? args[number] : match;
        });
    };
}

function isNullOrEmpty(x_string) {
    return x_string == null || x_string === "";
}

Backbone.Model.prototype.toJSON2 = function() {
    var json = _.clone(this.attributes);
    for (var attr in json) {
        if (json[attr] instanceof Backbone.Model || json[attr] instanceof Backbone.Collection) {
            json[attr] = json[attr].toJSON();
        }
    }
    return json;
};

function guid() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
        return v.toString(16);
    });
}

function showLoader() {
    $("body").addClass("loader");
}

function hideLoader() {
    $("body").removeClass("loader");
}

function alert_notification(alerts, timeout, delay) {
    var doit = function() {
        $(".alert").remove();
        var alert_string = "" + '<div class="alert alert-{0} alert-dismissible flyover flyover-in" role="alert">' + '<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>' + "{1}" + "</div>";
        var $alertDiv = $("body");
        alerts.forEach(function(alert) {
            $alertDiv.prepend(alert_string.format(alert.alertType, alert.message));
        });
        if (timeout != null) {
            setTimeout(function() {
                $(".alert").fadeOut(2e3, function() {
                    $(".alert").remove();
                });
            }, timeout);
        }
    };
    if (delay != null) setTimeout(doit, delay); else doit();
}

function flashElement(selector) {
    $(selector).addClass("flash");
    $(selector).fadeTo(500, .5, function() {
        $(selector).fadeTo(500, 1, function() {
            $(selector).removeClass("flash");
        });
    });
}

var validator = {
    digitsRegex: new RegExp("^[0-9]{10}$"),
    charsRegex: new RegExp(".*"),
    emailRegex: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    validateItems: function(selector) {
        var result = true;
        var $elements_to_validate = $(selector);
        $elements_to_validate.each(function(index) {
            var $item = $($elements_to_validate[index]);
            result = validator.validateItem($item) && result;
        });
        return result;
    },
    validateString: function(fieldValue, validation) {
        var passed = false;
        switch (validation) {
          case "required":
            passed = fieldValue.length > 0;
            break;

          case "digits":
            passed = validator.digitsRegex.test(fieldValue);
            break;

          case "non_numerics":
            passed = validator.charsRegex.test(fieldValue);
            break;

          case "email":
            passed = fieldValue.length == 0 || validator.emailRegex.test(fieldValue);
            break;

          case "phone":
            passed = validator.digitsRegex.test(fieldValue) || fieldValue.length == 0;
            break;

          case "date":
            var date = new Date(fieldValue);
            passed = date instanceof Date && !isNaN(date.valueOf());
            break;

          case "time":
            passed = true;
            break;
        }
        return passed;
    },
    validateItem: function($item) {
        var totalResult = true;
        var validations = $item.data("validation");
        validations.split(",").forEach(function(validation) {
            var length = -1;
            if (validation.indexOf(":") >= 0) {
                var split = validation.split(":");
                validation = split[0];
                length = parseInt(split[1]);
            }
            var passed;
            try {
                var fieldValue = $item.val();
                if ($item.is(":checkbox")) {
                    if (!$item.is(":checked")) fieldValue = "";
                }
                if (validation.indexOf("|") != -1) {
                    var composedValidation = function(values, validations) {
                        var validations = validation.split("|");
                        var valueList = values.split(",");
                        if (valueList.length == 0 || validations.length == 0) return true;
                        var allValuesGood = true;
                        valueList.forEach(function(value) {
                            value = value.trim();
                            var atLeastOne = false;
                            validations.forEach(function(validation) {
                                atLeastOne = validator.validateString(value, validation) || atLeastOne;
                            });
                            allValuesGood = allValuesGood && atLeastOne;
                        });
                        return allValuesGood;
                    };
                    passed = composedValidation(fieldValue, validation);
                } else passed = validator.validateString(fieldValue, validation);
                if (length != -1) passed = passed && fieldValue.length == length;
            } catch (err) {
                passed = false;
            }
            totalResult = passed && totalResult;
        });
        if ($item.is(":checkbox")) {
            $item = $item.parent();
        }
        if (!totalResult) this.errorValidationForItem($item); else this.succeedValidationForItem($item);
        return totalResult;
    },
    errorValidationForItem: function($item) {
        this.validationUI($item, true);
    },
    succeedValidationForItem: function($item) {
        this.validationUI($item, false);
    },
    validationUI: function($item, failed) {
        if (failed) $item.addClass("failed-validation"); else $item.removeClass("failed-validation");
        var siblingItems = $item.data("validation-siblings");
        if (siblingItems != null) {
            siblingItems.split(",").forEach(function(sibling) {
                var $sibling = $(sibling);
                if (failed) $sibling.addClass("failed-validation"); else $sibling.removeClass("failed-validation");
            });
        }
    }
};

var randomColor = function getRandomColor() {
    var letters = "0123456789ABCDEF".split("");
    var color = "";
    for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
};

var cut = function cutText(text, length) {
    if (length == null) length = 8;
    if (text.length >= length) return text.substring(0, length) + "...";
    return text;
};

var colorInverter = function invertHex(hexnum) {
    if (hexnum.length != 6) {
        console.error("Hex color must be six hex numbers in length.");
        return false;
    }
    hexnum = hexnum.toUpperCase();
    var splitnum = hexnum.split("");
    var resultnum = "";
    var simplenum = "FEDCBA9876".split("");
    var complexnum = new Array();
    complexnum.A = "5";
    complexnum.B = "4";
    complexnum.C = "3";
    complexnum.D = "2";
    complexnum.E = "1";
    complexnum.F = "0";
    for (i = 0; i < 6; i++) {
        if (!isNaN(splitnum[i])) {
            resultnum += simplenum[splitnum[i]];
        } else if (complexnum[splitnum[i]]) {
            resultnum += complexnum[splitnum[i]];
        } else {
            console.error("Hex colors must only include hex numbers 0-9, and A-F");
            return false;
        }
    }
    return resultnum;
};

window.partial = function(which, data) {
    return JST[which](data);
};

var loadAttendeeFromLoggedUser = function(inviteModel, callback) {
    inviteModel.tryToObtainAttendeeFromLoggedUser(callback);
};

var loadInviteAndAttendeeFromLoggedUser = function(invite_unique_id, callback) {
    var inviteModel = new InviteModel({
        unique_id: invite_unique_id
    });
    inviteModel.fetch(function(unique_id, data) {
        inviteModel = new InviteModel(data);
        loadAttendeeFromLoggedUser(inviteModel, function(data) {
            var invite_attendee = null;
            if (data != null) invite_attendee = new Contact(data);
            callback(inviteModel, invite_attendee);
        });
    });
};

var httpRequest = function(ajax_request) {
    ajax_request.headers = ajax_request.headers || {};
    if (currentUser != null) ajax_request.headers["session_token"] = currentUser.session_token;
    if (typeof invite_attendee != "undefined" && invite_attendee != null) ajax_request.headers["invite_attendee_id"] = invite_attendee.invite_attendee_id;
    if (ajax_request.type != "GET") ajax_request.contentType = "application/json";
    ajax_request.cache = false;
    if (ajax_request.error == null) {
        ajax_request.error = function(data) {
            var response = $.parseJSON(data.responseText);
            alert_notification([ {
                alertType: "danger",
                message: response.error
            } ]);
        };
    }
    $.ajax(ajax_request);
};

var fetchGroupDistributionForCurrentUser = function(callback) {
    if (currentUser == null) callback({
        contacts: [],
        groups: []
    }); else httpRequest({
        url: "/api/contacts/groups",
        type: "GET",
        success: function(data) {
            if (callback != null) callback(data);
        }
    });
};

IMeetCollection = Backbone.Collection.extend({
    getById: function(unique_id) {
        var result = this.filter(function(val) {
            return val.get("unique_id") === unique_id;
        });
        if (result.length > 0) return result[0];
        return null;
    },
    removeBy: function(unique_id) {
        this.remove(this.getById(unique_id));
    },
    collectionToJSON: function() {
        return this.map(function(model) {
            return model.toJSON2();
        });
    }
});

Contact = Backbone.Model.extend({
    defaults: {
        unique_id: "",
        invite_attendee_id: "",
        name: "",
        email: "",
        phone: "",
        notified: false
    },
    includeInInvite: function(invite_id, callback) {
        var that = this;
        httpRequest({
            url: "/api/invite/" + invite_id + "/attendees/",
            type: "POST",
            data: JSON.stringify({
                attendees: [ this.toJSON() ]
            }),
            success: function(data) {
                that.set("invite_attendee_id", data[0]);
                if (callback) callback(that);
            }
        });
    },
    removeFromInvite: function(invite_id, callback) {
        httpRequest({
            url: "/api/invite/" + invite_id + "/attendees/" + this.get("invite_attendee_id"),
            type: "DELETE",
            success: function(data) {
                if (callback != null) callback(data);
            }
        });
    },
    acknowledgeInvite: function(response, callback) {
        httpRequest({
            url: "/api/invite/attendees/" + this.get("invite_attendee_id") + "/response",
            type: "POST",
            data: JSON.stringify({
                response: response,
                channel: "web"
            }),
            success: function(data) {
                if (callback != null) callback(data);
            }
        });
    },
    create: function(callback) {
        var that = this;
        httpRequest({
            url: "/api/contacts",
            type: "POST",
            data: JSON.stringify({
                contact: this.toJSON()
            }),
            success: function(unique_id) {
                that.set("unique_id", unique_id);
                if (callback != null) callback(unique_id);
            }
        });
    },
    update: function(callback) {
        var unique_id = this.get("unique_id");
        if (unique_id == null || unique_id == "") return this.create(callback);
        httpRequest({
            url: "/api/contacts/" + unique_id + "/edit",
            data: JSON.stringify({
                contact: {
                    name: this.get("name"),
                    email: this.get("email"),
                    phone: this.get("phone")
                }
            }),
            type: "PUT",
            success: function(data) {
                if (callback != null) callback(data);
            }
        });
    },
    updateAttendee: function(invite_id, callback) {
        httpRequest({
            url: "/api/invite/" + invite_id + "/attendee/",
            type: "PUT",
            data: JSON.stringify({
                invite_attendee_id: this.get("invite_attendee_id"),
                contact: {
                    unique_id: this.get("unique_id"),
                    name: this.get("name"),
                    email: this.get("email"),
                    phone: this.get("phone")
                }
            }),
            success: function(data) {
                if (callback) callback(data);
            }
        });
    },
    deleteContact: function(callback) {
        httpRequest({
            url: "/api/contacts/delete/" + this.get("unique_id"),
            type: "DELETE",
            success: function(data) {
                if (callback != null) callback(data);
            }
        });
    },
    someIdentifier: function() {
        var name = this.get("name");
        if (name != null && name !== "") return name;
        name = this.get("email");
        if (name != null && name !== "") return name;
        name = this.get("phone");
        return name;
    },
    addToGroup: function(group_unique_id, callback) {
        httpRequest({
            url: "/api/group/" + group_unique_id + "/" + this.get("unique_id"),
            type: "POST",
            success: function(data) {
                if (callback != null) callback(data);
            }
        });
    }
});

ContactList = IMeetCollection.extend({
    model: Contact,
    getByAttendeeId: function(unique_id) {
        var result = this.filter(function(val) {
            return val.get("invite_attendee_id") === unique_id;
        });
        if (result.length > 0) return result[0];
        return null;
    }
});

Group = Backbone.Model.extend({
    defaults: {
        unique_id: "",
        name: "",
        contacts: new ContactList()
    },
    create: function(callback) {
        var that = this;
        httpRequest({
            url: "/api/group/" + this.get("name"),
            type: "POST",
            data: JSON.stringify({
                contact: this.toJSON()
            }),
            success: function(unique_id) {
                that.set("unique_id", unique_id);
                if (callback != null) callback(unique_id);
            }
        });
    },
    update: function(callback) {
        var unique_id = this.get("unique_id");
        if (unique_id == null || unique_id == "") return this.create(callback);
        httpRequest({
            url: "/api/group/" + unique_id + "/edit",
            data: JSON.stringify({
                group: {
                    name: this.get("name")
                }
            }),
            type: "PUT",
            success: function(data) {
                if (callback != null) callback(data);
            }
        });
    },
    fetchContacts: function(callback) {
        var that = this;
        httpRequest({
            url: "/api/group/" + this.get("unique_id"),
            type: "GET",
            success: function(data) {
                var contactList = new ContactList();
                if (data != null) data.forEach(function(item) {
                    contactList.add(new Contact(item));
                });
                that.set("contacts", contactList);
                if (callback != null) callback(contactList);
            }
        });
    },
    includeInInvite: function(invite_id, callback) {
        var that = this;
        httpRequest({
            url: "/api/invite/" + invite_id + "/group/",
            type: "POST",
            data: JSON.stringify({
                unique_id: this.get("unique_id")
            }),
            success: function(data) {
                var index = 0;
                var contactsInGroup = that.get("contacts");
                data.forEach(function(item) {
                    contactsInGroup.models[index].set("invite_attendee_id", item);
                });
                if (callback != null) callback(that.get("contacts"));
            }
        });
    },
    fetchAllGroups: function(callback) {
        httpRequest({
            url: "/api/group",
            type: "GET",
            success: function(groups) {
                if (callback != null) callback(groups);
            }
        });
    }
});

GroupList = IMeetCollection.extend({
    model: Group,
    localStorage: new Store("backbone-group")
});

InviteModel = Backbone.Model.extend({
    defaults: {
        unique_id: "",
        title: "",
        organizer_email: "",
        start_date: "",
        start_time: "",
        end_date: "",
        end_time: "",
        description: "",
        where: "",
        poster_image_id: "",
        attendees: new ContactList(),
        all_contacts: new ContactList(),
        all_groups: new ContactList(),
        utc_offset: 0,
        palette: null
    },
    initialize: function(options) {
        if (options == null) return;
        var start_datetime = this.parse_datetime(options.start);
        var end_datetime = this.parse_datetime(options.end);
        this.set("start_date", start_datetime.date);
        this.set("start_time", start_datetime.time);
        this.set("end_date", end_datetime.date);
        this.set("end_time", end_datetime.time);
        var attendees = new ContactList();
        if (options.attendees != null) options.attendees.forEach(function(item) {
            attendees.push(new Contact(item));
        });
        this.set("attendees", attendees);
    },
    format_date: function(property, format) {
        var _date = this.get(property);
        if (isNullOrEmpty(_date)) return null;
        return moment(_date).format(format);
    },
    get_datetime: function(property) {
        var time = this.get(property + "_time");
        var date = this.get(property + "_date");
        if (isNullOrEmpty(time) || isNullOrEmpty(date)) return null;
        return date + " " + time;
    },
    parse_datetime: function(datetime) {
        if (isNullOrEmpty(datetime)) return {
            date: null,
            time: null
        };
        var moment_obj = moment(datetime);
        return {
            date: moment_obj.format("MM/D/YYYY"),
            time: moment_obj.format("hh:mm A")
        };
    },
    toJSON: function() {
        var json = Backbone.Model.prototype.toJSON.apply(this, arguments);
        json["start"] = this.get_datetime("start");
        json["end"] = this.get_datetime("end");
        return json;
    },
    fetch: function(callback) {
        var that = this;
        httpRequest({
            url: "/api/invite/" + this.get("unique_id"),
            type: "GET",
            success: function(data) {
                callback(that.get("unique_id"), data);
            }
        });
    },
    updateTitle: function(callback, enableNotifications) {
        var that = this;
        httpRequest({
            url: "/api/invite/" + this.get("unique_id") + "/title",
            type: "POST",
            data: JSON.stringify({
                title: this.get("title")
            }),
            success: function(data) {
                if (enableNotifications) alert_notification([ {
                    alertType: "success",
                    message: "Event saved successfully!"
                } ], 3e3);
                callback(data);
            }
        });
    },
    updateDescription: function(callback, enableNotifications) {
        var that = this;
        httpRequest({
            url: "/api/invite/" + this.get("unique_id") + "/description",
            type: "POST",
            data: JSON.stringify({
                description: this.get("description")
            }),
            success: function(data) {
                if (enableNotifications) alert_notification([ {
                    alertType: "success",
                    message: "Event saved successfully!"
                } ], 3e3);
                callback(data);
            }
        });
    },
    createNew: function(callback, enableNotifications) {
        var url = "/api/invite/";
        this._submit(url, callback, enableNotifications);
    },
    update: function(callback, enableNotifications) {
        var url = "/api/invite/" + this.get("unique_id");
        this._submit(url, callback, enableNotifications);
    },
    _submit: function(url, callback, enableNotifications) {
        var that = this;
        var d = new Date();
        this.set("utc_offset", d.getTimezoneOffset());
        httpRequest({
            url: url,
            type: "POST",
            data: JSON.stringify(this.toJSON()),
            success: function(data) {
                if (enableNotifications) alert_notification([ {
                    alertType: "success",
                    message: "Event saved successfully!"
                } ], 3e3);
                callback(data);
            }
        });
    },
    notifyAll: function(callback) {
        httpRequest({
            url: "/api/invite/" + this.get("unique_id") + "/attendees/notify/all",
            type: "POST",
            data: JSON.stringify(this.toJSON()),
            success: function(data) {
                callback(data);
            }
        });
    },
    tryToObtainAttendeeFromLoggedUser: function(callback) {
        var that = this;
        if (currentUser == null) {
            callback(null);
            return;
        }
        httpRequest({
            url: "/api/invite/" + this.get("unique_id") + "/attendee/from/",
            type: "GET",
            success: function(attendee) {
                if (callback != null) callback(attendee);
            }
        });
    }
});

InviteList = IMeetCollection.extend({
    model: InviteModel
});

CommentModel = Backbone.Model.extend({
    defaults: {
        unique_id: "",
        on: null,
        comment: "",
        author: ""
    },
    initialize: function(options) {
        if (typeof options == "string") this.set("comment", options);
        this.set("unique_id", guid());
    },
    submit: function(invite_id, invite_attendee_id, callback) {
        var url = "/api/invite/{0}/comment".format(invite_id);
        if (invite_attendee_id != null) url = "/api/invite/{0}/attendees/{1}/comment".format(invite_id, invite_attendee_id);
        var that = this;
        httpRequest({
            url: url,
            type: "POST",
            data: JSON.stringify({
                comment: this.get("comment")
            }),
            success: function(data) {
                that.set("unique_id", data);
                if (callback != null) callback(that);
            }
        });
    }
});

CommentList = IMeetCollection.extend({
    model: CommentModel,
    fetchFromInvite: function(invite_unique_id) {
        httpRequest({
            url: "/api/invite/{0}/comment".format(invite_unique_id),
            type: "GET",
            success: function(data) {
                var comments = new CommentList();
                data.forEach(function(comment) {
                    comments.add(new CommentModel(comment));
                });
                return comments;
            }
        });
    }
});

PaletteModel = Backbone.Model.extend({
    defaults: {
        unique_id: null,
        name: null,
        main_color: "",
        main_bg_color: ""
    },
    initialize: function(options) {}
});

PaletteList = IMeetCollection.extend({
    model: PaletteModel,
    fetchAll: function(callback) {
        httpRequest({
            url: "/api/palette/",
            type: "GET",
            success: function(data) {
                var paletteCollection = new PaletteList();
                data.forEach(function(palette) {
                    paletteCollection.add(new PaletteModel(palette));
                });
                if (callback != null) callback(paletteCollection);
            },
            error: function(data) {}
        });
    }
});

SimpleView = Backbone.View.extend({
    initialize: function(options) {
        this.options = options || {};
    },
    hidePanels: function() {
        $("#body-container").hide();
        $("#view-container").show();
        $("#modal_container").hide();
        $("#invite-body").hide();
    },
    clearTemplate: function() {
        $("#view-container").html("");
    },
    block: function(el, ratio) {
        var h = $(window).height();
        if (ratio === "half") h = h / 2; else if (ratio == "quarter") h = h / 3; else h = h;
        $(el).css("height", h);
    }
});

var _contactCreateView = null;

function contactCreateView() {
    if (_contactCreateView == null) _contactCreateView = new ContactDetailsView();
    return _contactCreateView;
}

ContactsView = SimpleView.extend({
    first_time: true,
    el: "#contact-list",
    template: JST["contacts.html"],
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "click .add-contact": "addContact",
        "change #import-csv": "importFromCsv",
        "click .navigate-to-groups": "navigateToGroups",
        "click .add-to-group": "addToGroup",
        "click .contact-row": "editRow",
        "click .delete-contact": "deleteRow"
    },
    render: function(options) {
        this.contactList = options.contactList;
        this.groupList = options.groupList;
        this.listenTo(this.contactList, "add", this.addContactHook);
        this.listenTo(this.contactList, "remove", this.removeContactHook);
        this.listenTo(this.contactList, "change", this.changeContactHook);
        this.$el.html(this.template({
            contacts: this.contactList.collectionToJSON()
        }));
        this.first_time = false;
    },
    addContactHook: function(contact) {
        var contactTable = $("#contacts_table");
        contactTable.append(new ContactItemView({
            model: contact
        }).render().el);
    },
    removeContactHook: function(data) {
        var $contact_row = $('div[data-id="' + data.get("unique_id") + '"');
        $contact_row.remove();
    },
    changeContactHook: function(contact) {
        var $contact_row = $('div[data-id="' + contact.get("unique_id") + '"');
        $contact_row.html($(JST["contact_item.html"](contact.toJSON())).html());
    },
    addContact: function(evt) {
        evt.preventDefault();
        this.contactCreateView = contactCreateView();
        this.contactCreateView.render(null, this.contactList);
    },
    importFromCsv: function(evt) {
        var reader = new FileReader();
        reader.onload = function(theFile, that) {
            return function(e) {
                $.ajax({
                    url: "/api/contacts/csv",
                    type: "POST",
                    contentType: "application/json",
                    data: '{"user_id" : "{0}", "file_name": "{1}", "file": "{2}"}'.format(currentUser.id, theFile.name, e.target.result),
                    cache: false,
                    success: function() {
                        location.reload();
                        console.info("file uploaded correctly.");
                    },
                    error: function(data) {
                        alert_notification([ {
                            alertType: "danger",
                            message: data.responseText
                        } ]);
                    }
                });
            };
        }(evt.target.files[0], this);
        reader.readAsDataURL(evt.target.files[0]);
    },
    navigateToGroups: function() {
        Backbone.history.navigate("groups", true);
    },
    editRow: function(evt) {
        evt.preventDefault();
        var id = $(evt.target).data("id");
        if (id != null) {
            evt.stopPropagation();
        } else return;
        var contactModel = this.contactList.getById(id);
        this.contactCreateView = contactCreateView();
        this.contactCreateView.render(contactModel, null);
    },
    deleteRow: function(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var id = $(evt.target).data("id");
        var contactModel = this.contactList.getById(id);
        contactModel.deleteContact();
        $('.contact-row[data-id="' + id + '"]').remove();
    }
});

ContactDetailsView = Backbone.View.extend({
    template: JST["contact_details.html"],
    el: "#new-contact-container",
    createMode: true,
    mainContactList: null,
    groupSearchView: null,
    events: {
        "click .new-contact-btn": "newContact",
        "keyup #nameInput": "inputEnter",
        "keyup #phoneInput": "inputEnter",
        "keyup #emailInput": "inputEnter"
    },
    getGroupSearchView: function() {
        if (this.groupSearchView == null) this.groupSearchView = new GroupSearchView({
            el: ".contact-groups"
        }); else {
            var groups = this.groupSearchView.all_groups;
            this.groupSearchView = new GroupSearchView({
                el: ".contact-groups"
            });
            this.groupSearchView.all_groups = groups;
        }
        return this.groupSearchView;
    },
    render: function(contactModel, mainContactList) {
        this.mainContactList = mainContactList;
        this.createMode = contactModel == null;
        this.model = contactModel || new Contact();
        this.$el.html(this.template({
            createMode: this.createMode,
            contact: this.model.toJSON()
        }));
        if (!this.createMode) {
            var groupSearchView = this.getGroupSearchView();
            groupSearchView.render(contactModel, false);
        }
        this.$el.find(".addContact-modal").modal({
            show: true,
            backdrop: true,
            keyboard: true
        });
        return this.$el;
    },
    show: function() {
        this.$el.find(".addContact-modal").modal({
            show: true,
            backdrop: true,
            keyboard: true
        });
    },
    hide: function() {
        this.$el.find(".addContact-modal").modal("hide");
    },
    inputEnter: function(evt) {
        if (evt.keyCode != 13) {
            return;
        }
        this.newContact();
    },
    newContact: function() {
        if (!validator.validateItems(".contact_input")) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        this.model.set("name", $("#nameInput").val());
        this.model.set("email", $("#emailInput").val());
        this.model.set("phone", $("#phoneInput").val());
        if (this.createMode) this.model.create($.proxy(this.contactCreated, this)); else this.model.update($.proxy(this.contactUpdated, this));
    },
    contactCreated: function(data) {
        var message = "Contact created!";
        alert_notification([ {
            alertType: "success",
            message: message
        } ], 5);
        this.$el.find(".empty-contacts").remove();
        this.model.set("unique_id", data);
        if (this.mainContactList != null) this.mainContactList.add(this.model);
        this.hide();
    },
    contactUpdated: function(data) {
        var message = "Contact updated!";
        alert_notification([ {
            alertType: "success",
            message: message
        } ], 5);
        this.hide();
    }
});

ContactItemView = SimpleView.extend({
    template: JST["contact_item.html"],
    editTemplate: JST["contact_item_edit.html"],
    model: null,
    editMode: false,
    events: {
        "dragstart .contact-row": "enterDragMode",
        "click .contact-row": "edit",
        "click .finish-edit": "finishEditMode",
        "click .delete-contact": "deleteContact"
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    enterDragMode: function(ev) {
        var unique_id = this.model.get("unique_id");
        ev.originalEvent.dataTransfer.setData("contact_id", unique_id);
    }
});

AttendeeDetailsView = Backbone.View.extend({
    template: JST["contact_details.html"],
    el: "#new-contact-container",
    invite_id: null,
    events: {
        "click .new-contact-btn": "updateAttendee"
    },
    render: function(invite_id, attendeeModel) {
        this.invite_id = invite_id;
        this.model = attendeeModel;
        this.$el.html(this.template({
            createMode: false,
            contact: this.model.toJSON()
        }));
        this.$el.find(".addContact-modal").modal({
            show: true,
            backdrop: true,
            keyboard: true
        });
        return this.$el;
    },
    show: function() {
        this.$el.find(".addContact-modal").modal({
            show: true,
            backdrop: true,
            keyboard: true
        });
    },
    hide: function() {
        this.$el.find(".addContact-modal").modal("hide");
    },
    updateAttendee: function() {
        if (!validator.validateItems(".contact_input")) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        this.model.set("name", $("#nameInput").val());
        this.model.set("email", $("#emailInput").val());
        this.model.set("phone", $("#phoneInput").val());
        if (currentUser == null || this.model.get("unique_id") != "") this.model.updateAttendee(this.invite_id, $.proxy(this.attendeeUpdated, this)); else {
            this.model.create($.proxy(this.updateAttendee, this));
        }
    },
    attendeeUpdated: function(data) {
        var message = "Attendee updated!";
        alert_notification([ {
            alertType: "success",
            message: message
        } ], 5);
        this.model.set("unique_id", data);
        this.hide();
    }
});

GroupSearchView = Backbone.View.extend({
    template: JST["group_search.html"],
    model: null,
    searchMode: false,
    all_groups: null,
    events: {
        "click .add-to-group": "addToGroup",
        "keyup .group-input": "groupInputEnter"
    },
    render: function(contact, searchMode) {
        this.model = contact;
        var json = {
            searchMode: searchMode,
            contact: this.model.toJSON()
        };
        this.$el.html(this.template(json));
        this.$newGroup = $(".group-input");
        var that = this;
        if (this.all_groups == null) {
            var groupModel = new Group();
            groupModel.fetchAllGroups(function(groups) {
                that.all_groups = new GroupList(groups);
                that.setupGroupsTypeahead();
                that.$newGroup.focus();
            });
        } else {
            that.setupGroupsTypeahead();
            that.$newGroup.focus();
        }
        return this;
    },
    groupInputEnter: function(evt) {
        if (evt.keyCode != 13) {
            return;
        }
        this.groupSelected();
    },
    groupSelected: function() {
        var group = this.selectedGroup;
        if (group != null) {
            this.model.get("groups").push(group);
            this.model.addToGroup(group.unique_id, $.proxy(this.contactIncludedInGroup, this));
        }
    },
    contactIncludedInGroup: function() {
        this.render(this.model, false);
    },
    addToGroup: function(evt) {
        this.render(this.model, true);
    },
    setupGroupsTypeahead: function() {
        var that = this;
        var substringGroupMatcher = function(groups) {
            return function findMatches(q, cb) {
                var matches, substrRegex;
                matches = [];
                substrRegex = new RegExp(q, "i");
                groups.each(function(group) {
                    if (substrRegex.test(group.get("name"))) {
                        group.set("is_group", true);
                        matches.push(group.toJSON());
                    }
                });
                cb(matches);
            };
        };
        var setupTypeAhead = function(groups) {
            that.$newGroup.typeahead({
                hint: true,
                highlight: true,
                minLength: 1
            }, {
                autoselect: true,
                name: "groups",
                displayKey: "name",
                source: substringGroupMatcher(groups),
                templates: {
                    suggestion: JST["group_item_typeahead.html"]
                }
            }).on("typeahead:selected", function(obj, group) {
                that.selectedGroup = group;
                that.groupSelected();
            }).on("keypress keydown input", function($e) {
                $e.stopPropagation();
            });
        };
        setupTypeAhead(that.all_groups);
    }
});

var _groupCreateView = null;

function groupCreateView() {
    if (_groupCreateView == null) _groupCreateView = new GroupDetailsView();
    return _groupCreateView;
}

GroupsView = Backbone.View.extend({
    first_time: true,
    el: "#contact-list",
    template: JST["groups.html"],
    events: {
        "click .add-group": "addGroup",
        "click .navigate-to-contacts": "navigateToContacts",
        "click .group-row": "editRow",
        "click .delete-group": "deleteRow"
    },
    newGroupView: null,
    render: function(options) {
        this.groupList = options.groupList;
        this.listenTo(this.groupList, "add", this.addGroupHook);
        this.listenTo(this.groupList, "remove", this.removeGroupHook);
        this.listenTo(this.groupList, "change", this.changeGroupHook);
        this.$el.html(this.template({
            groups: this.groupList.collectionToJSON()
        }));
        this.first_time = false;
    },
    addGroup: function(evt) {
        console.log("here");
        evt.preventDefault();
        this.groupCreateView = groupCreateView();
        this.groupCreateView.render(null, this.groupList);
    },
    addGroupHook: function(group) {
        var groupTable = $("#groups_table");
        groupTable.append(new GroupItemView({
            model: group
        }).render().el);
    },
    changeGroupHook: function(group) {
        var $group_row = $('div[data-id="' + group.get("unique_id") + '"');
        $group_row.html($(JST["group_item.html"](group.toJSON())).html());
    },
    navigateToContacts: function() {
        Backbone.history.navigate("contacts", true);
    },
    editRow: function(evt) {
        evt.preventDefault();
        var id = $(evt.target).data("id");
        if (id != null) {
            evt.stopPropagation();
        } else return;
        var groupModel = this.groupList.getById(id);
        this.groupCreateView = groupCreateView();
        this.groupCreateView.render(groupModel, null);
    },
    deleteRow: function(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var id = $(evt.target).data("id");
        var groupModel = this.groupList.getById(id);
        alert("Not implemented yet");
    }
});

GroupDetailsView = Backbone.View.extend({
    template: JST["group_details.html"],
    el: "#new-group-container",
    createMode: true,
    mainGroupList: null,
    events: {
        "click .new-group-btn": "newGroup",
        "keyup .group_input": "inputEnter"
    },
    render: function(groupModel, mainGroupList) {
        this.mainGroupList = mainGroupList;
        this.createMode = groupModel == null;
        this.model = groupModel || new Group();
        this.$el.html(this.template({
            createMode: this.createMode,
            group: this.model.toJSON()
        }));
        this.$el.find(".addGroup-modal").modal({
            show: true,
            backdrop: true,
            keyboard: true
        });
        return this.$el;
    },
    show: function() {
        this.$el.find(".addGroup-modal").modal({
            show: true,
            backdrop: true,
            keyboard: true
        });
    },
    hide: function() {
        this.$el.find(".addGroup-modal").modal("hide");
    },
    inputEnter: function(evt) {
        if (evt.keyCode != 13) {
            return;
        }
        this.newGroup();
    },
    newGroup: function() {
        if (!validator.validateItems(".group_input")) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        this.model.set("name", $("#nameInput").val());
        if (this.createMode) this.model.create($.proxy(this.groupCreated, this)); else this.model.update($.proxy(this.groupUpdated, this));
    },
    groupCreated: function(data) {
        var message = this.createMode ? "Group created!" : "Group updated!";
        alert_notification([ {
            alertType: "success",
            message: message
        } ], 5);
        this.$el.find(".empty-groups").remove();
        this.model.set("unique_id", data);
        if (this.mainGroupList != null) this.mainGroupList.add(this.model);
        this.hide();
    },
    groupUpdated: function(data) {
        var message = "Group updated!";
        alert_notification([ {
            alertType: "success",
            message: message
        } ], 5);
        this.hide();
    }
});

GroupItemView = SimpleView.extend({
    template: JST["group_item.html"],
    editTemplate: JST["group_item_edit.html"],
    model: null,
    editMode: false,
    events: {
        "click .group-row": "edit",
        "click .finish-edit": "finishEditMode"
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    edit: function(evt) {
        evt.preventDefault();
        this.groupCreateView = groupCreateView();
        this.groupCreateView.render(this.model);
    }
});

IndexView = Backbone.View.extend({
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "click .imeet-btn": "createNew",
        "keypress .invite-title-input": "type_key"
    },
    type_key: function(e) {
        if (e.keyCode == 13) {
            this.createNew();
            e.preventDefault();
            return false;
        }
    },
    render: function(data) {
        $("#view-container").hide();
        this.$el.show();
        this.$inviteTitle = this.$el.find(".invite-title-input");
        this.$headerImage = this.$el.find(".header-section");
    },
    createNew: function() {
        var viewName = this.$inviteTitle.val();
        if (viewName != null && viewName != "") Backbone.history.navigate("/new/" + viewName, true); else alert("type a title!");
    }
});

InviteAdminView = SimpleView.extend({
    template: JST["invite_admin.html"],
    author: "Organizer",
    contacts: null,
    current_attendee: null,
    initialize: function(options) {
        this.options = options || {};
        this.inviteId = this.options.id;
    },
    events: {
        "keypress .invite-newComment": "addNewComment",
        "click .notify-all-btn": "notifyAll",
        "change .share_to_facebook": "share_on_facebook_auth"
    },
    hidePanels: function() {
        $("#body-container").hide();
        $("#view-container").hide();
        $("#modal_container").hide();
        $("#invite-body").show();
    },
    render: function(unique_id, invite, invite_attendee) {
        this.hidePanels();
        this.unique_id = unique_id;
        if (this.unique_id == null) console.error("Invite Id is null, check routing");
        this.validateInviteIsCurrent(invite.start);
        this.model = invite;
        this.current_attendee = invite_attendee;
        this.$el.html(this.template());
        var invite_attendees_view = new InviteAttendeesView();
        var invite_description = new InviteDescriptionView({
            el: "#invite-description"
        });
        var invite_header = new InviteHeaderView({
            is_admin: true
        });
        var invite_details = new InviteDetailsView({
            is_admin: true
        });
        var invite_comments = new InviteCommentsView();
        var invite_attendee_create = new InviteAttendeeCreateView();
        var invite_attendees = this.model.get("attendees");
        invite_attendees_view.render({
            invite_id: this.unique_id,
            attendees: invite_attendees,
            current_attendee: this.current_attendee,
            edit_view: true
        });
        invite_description.render(this.model);
        invite_header.render(this.model);
        invite_details.render(this.model);
        invite_comments.render({
            invite_id: this.unique_id,
            current_attendee: this.current_attendee,
            comments: new CommentList(invite.get("comments"))
        });
        invite_attendee_create.render(this.unique_id, invite_attendees);
        var invite_palette = this.model.get("palette");
        if (invite_palette != null) {
            var palette = new PaletteView();
            palette.renderPalette(new PaletteModel(invite_palette));
        }
        this.plugins();
    },
    notifyAll: function() {
        this.model.notifyAll($.proxy(this.notifyAllCallback, this));
    },
    notifyAllCallback: function(result) {
        alert_notification([ {
            alertType: "success",
            message: "Everyone in the invite is going to be notified in the next few minutes"
        } ], 5e3);
    },
    plugins: function() {
        var that = this;
        that.block(".invite-background", "half");
        $(window).resize(function() {
            that.block(".invite-background", "half");
        });
    },
    validateInviteIsCurrent: function(start) {
        var moment_obj = moment(start);
        var now = moment();
        if (moment_obj < now) {
            alert_notification([ {
                alertType: "warning",
                message: "This invite is in the Past you cannot edit it anymore"
            } ], 5e3);
        }
    }
});

InviteAttendeeCreateView = Backbone.View.extend({
    template: JST["invite_attendee_create.html"],
    el: "#invite-new-attendee",
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "click .new-contact-button": "createNewAttendee",
        "keyup .contact-input": "newAttendeeEnter"
    },
    render: function(invite_id, inviteAttendees) {
        this.model = inviteAttendees;
        this.invite_id = invite_id;
        var json = {};
        this.$el.html(this.template(json));
        this.$newContact = $(".contact-input");
        var that = this;
        fetchGroupDistributionForCurrentUser(function(contacts_and_groups) {
            that.all_contacts = new ContactList(contacts_and_groups.contacts);
            that.all_groups = new GroupList(contacts_and_groups.groups);
            that.setupContactsTypeahead();
        });
    },
    newAttendeeEnter: function(evt) {
        if (evt.keyCode != 13) {
            return;
        }
        this.createNewAttendee();
    },
    createNewAttendee: function() {
        var contact = null;
        var group = null;
        if (this.last_selected_item != null && this.last_selected_item.is_group) group = this.last_selected_item; else if (this.last_selected_item != null) {
            contact = this.last_selected_item;
        }
        if (this.last_selected_item == null && this.$newContact.val() != "") {
            if (!validator.validateItem(this.$newContact)) {
                alert_notification([ {
                    alertType: "warning",
                    message: "Please ensure this is a correct address, or a contact selected from your contact book"
                } ]);
                return;
            }
            var emailAndPhone = this.parsePhoneAndEmail(this.$newContact.val());
            contact = {
                name: "",
                email: emailAndPhone.email,
                phone: emailAndPhone.phone
            };
        }
        if (contact != null) {
            var contactModel = new Contact(contact);
            contactModel.includeInInvite(this.invite_id, $.proxy(this.addAttendee, this));
        }
        if (group != null) {
            var group = new Group({
                unique_id: group.unique_id
            });
            group.fetchContacts();
            group.includeInInvite(this.invite_id, $.proxy(this.addAttendeesFromGroup, this));
        }
        this.last_selected_item = null;
        this.$newContact.val("");
        this.$newContact.typeahead("val", "");
        this.$newContact.focus();
    },
    notifyPeopleSuggestion: function() {},
    addAttendee: function(attendee) {
        this.model.add(attendee);
    },
    addAttendeesFromGroup: function(attendeeList) {
        var that = this;
        attendeeList.forEach(function(item) {
            that.model.add(item);
        });
    },
    setupContactsTypeahead: function() {
        var that = this;
        var substringMatcher = function(contacts) {
            return function findMatches(q, cb) {
                var matches, substrRegex;
                matches = [];
                substrRegex = new RegExp(q, "i");
                contacts.each(function(contact) {
                    if (substrRegex.test(contact.get("name")) || substrRegex.test(contact.get("email")) || substrRegex.test(contact.get("phone"))) matches.push(contact.toJSON());
                });
                cb(matches);
            };
        };
        var substringGroupMatcher = function(groups) {
            return function findMatches(q, cb) {
                var matches, substrRegex;
                matches = [];
                substrRegex = new RegExp(q, "i");
                groups.each(function(group) {
                    if (substrRegex.test(group.get("name"))) {
                        group.set("is_group", true);
                        matches.push(group.toJSON());
                    }
                });
                cb(matches);
            };
        };
        var setupTypeAhead = function(contacts, groups) {
            that.$newContact.typeahead({
                hint: true,
                highlight: true,
                minLength: 1
            }, {
                autoselect: true,
                name: "groups",
                displayKey: "name",
                source: substringGroupMatcher(groups),
                templates: {
                    suggestion: JST["group_item_typeahead.html"]
                }
            }, {
                autoselect: true,
                name: "contacts",
                displayKey: "name",
                source: substringMatcher(contacts),
                templates: {
                    suggestion: JST["contact_item_typeahead.html"]
                }
            }).on("typeahead:selected", function(obj, data) {
                that.last_selected_item = data;
            }).on("keypress keydown input", function($e) {
                $e.stopPropagation();
            });
        };
        setupTypeAhead(that.all_contacts, that.all_groups);
    },
    parsePhoneAndEmail: function(addressString) {
        var trimmedAddressString = addressString.trim();
        var addresses = addressString.split(";");
        if (addresses.length == 1) addresses = addressString.split(",");
        for (var i = 0; i < addresses.length; i++) addresses[i] = addresses[i].trim();
        if (addresses.length == 1) {
            if (isNaN(addresses[0])) return {
                email: addresses[0],
                phone: ""
            }; else return {
                phone: addresses[0],
                email: ""
            };
        } else {
            if (isNaN(addresses[0])) return {
                email: addresses[0],
                phone: addresses[1]
            }; else return {
                phone: addresses[0],
                email: addresses[1]
            };
        }
    }
});

InviteAttendeesView = Backbone.View.extend({
    template: JST["invite_attendees.html"],
    el: "#invite-attendees",
    confirmed: null,
    negated: null,
    no_response: null,
    current_attendee: null,
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "click .invite-attendees-acknowledge-yes": "yesButtonClick",
        "click .invite-attendees-acknowledge-no": "noButtonClick",
        "click .edit-attendee": "editAttendeeClick"
    },
    render: function(data) {
        this.model = data.attendees;
        this.current_attendee = data.current_attendee;
        this.invite_id = data.invite_id;
        this.separateAttendees();
        var json = {
            no_response: this.no_response.collectionToJSON(),
            confirmed: this.confirmed.collectionToJSON(),
            negated: this.negated.collectionToJSON(),
            attendee: this.current_attendee != null ? this.current_attendee.toJSON() : null,
            edit_view: data.edit_view
        };
        this.$el.html(this.template(json));
        this.$table = this.$el.find(".contact-table");
        this.$newContact = $(".contact-input");
        this.listenTo(this.model, "add", this.attendeeCreated);
        this.listenTo(this.model, "remove", this.attendeeRemoved);
        this.listenTo(this.model, "change", this.attendeeUpdated);
        this.plugins();
        return this.$el.html();
    },
    setCurrentAttendee: function(invite_attendee) {
        this.current_attendee = invite_attendee;
    },
    separateAttendees: function() {
        this.no_response = new ContactList();
        this.negated = new ContactList();
        this.confirmed = new ContactList();
        var that = this;
        this.model.forEach(function(item) {
            var status = item.get("status");
            if (status == "yes") {
                that.confirmed.add(item);
            } else if (status == "no") {
                that.negated.add(item);
            } else if (status == "organizer") {
                item.set("organizer", true);
                that.confirmed.add(item);
            } else {
                that.no_response.add(item);
            }
        });
    },
    attendeeCreated: function(attendeeModel) {
        this.no_response.add(attendeeModel);
        $(".no-response-table").prepend(JST["invite_attendee_admin.html"](attendeeModel.toJSON()));
        flashElement("[data-rowid='" + attendeeModel.get("invite_attendee_id") + "'] .details");
    },
    attendeeRemoved: function(e) {
        var dataId = $(e.currentTarget).data("rowid");
        var contactModel = this.model.getById(dataId);
        contactModel.removeFromInvite(this.invite_id);
        this.model.removeBy(dataId);
    },
    attendeeUpdated: function(attendee) {
        var $attendee_row = $('a[data-rowid="' + attendee.get("invite_attendee_id") + '"');
        $attendee_row.html($(JST["invite_attendee_admin.html"](attendee.toJSON())).html());
    },
    yesButtonClick: function(event) {
        this.attendeeRSVP("yes");
    },
    noButtonClick: function(event) {
        this.attendeeRSVP("no");
    },
    attendeeRSVP: function(response) {
        if (this.current_attendee == null) {
            alert_notification([ {
                alertType: "danger",
                message: "Something wrong happened, you shouldnt be able to SAY " + response + " You are nobody!!!"
            } ]);
            return;
        }
        this.current_attendee.set("status", response);
        this.current_attendee.acknowledgeInvite(response, $.proxy(this.attendeeRSVPCallback, this));
    },
    attendeeRSVPCallback: function() {
        var attendee_model = this.model.getById(this.current_attendee.get("unique_id"));
        attendee_model.set("status", this.current_attendee.get("status"));
        this.render({
            attendees: this.model,
            current_attendee: this.current_attendee
        });
    },
    attendeeDetailsView: function() {
        if (this._attendeeDetailsView == null) this._attendeeDetailsView = new AttendeeDetailsView();
        return this._attendeeDetailsView;
    },
    editAttendeeClick: function(e) {
        var dataId = $(e.currentTarget).data("rowid");
        var contactModel = this.model.getByAttendeeId(dataId);
        var attendeeEditView = this.attendeeDetailsView();
        attendeeEditView.render(this.invite_id, contactModel);
    },
    plugins: function() {}
});

InviteCommentsView = Backbone.View.extend({
    template: JST["invite_comments.html"],
    el: "#invite-comments",
    invite_id: null,
    current_attendee: null,
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "click .add-comment": "addComment",
        "keyup .invite-comment-input": "addCommentEnter"
    },
    render: function(data) {
        this.invite_id = data.invite_id;
        this.current_attendee = data.current_attendee;
        this.model = data.comments;
        var json = {
            current_attendee: this.current_attendee,
            comments: this.model.collectionToJSON()
        };
        this.$el.html(this.template(json));
        this.$comment_container = this.$el.find(".invite-comments-container");
        this.$comment_input = this.$el.find(".invite-comment-input");
    },
    addCommentEnter: function(evt) {
        if (evt.keyCode != 13) {
            return;
        }
        this.addComment();
    },
    addComment: function() {
        if (this.$comment_input.val() == "") return;
        var comment = new CommentModel({
            comment: this.$comment_input.val(),
            author: this.current_attendee.someIdentifier()
        });
        comment.submit(this.invite_id, this.current_attendee.get("invite_attendee_id"), $.proxy(this.newCommentModel, this));
        this.model.add(comment);
        this.$comment_input.val("");
        this.$comment_input.focus();
    },
    newCommentModel: function(commentModel) {
        console.log(commentModel);
        this.$comment_container.prepend(JST["invite_comment.html"](commentModel.toJSON()));
        flashElement("[data-rowid='" + commentModel.get("unique_id") + "']");
    }
});

InviteConfirmationView = SimpleView.extend({
    template: JST["invite_confirmation.html"],
    initialize: function(options) {
        this.options = options || {};
    },
    render: function(options) {
        return this.$el.html(this.template());
    }
});

InviteCreateView = SimpleView.extend({
    el: "#view-container",
    initialize: function(options) {
        this.options = options || {};
        this.model = new InviteModel();
    },
    events: {
        "click .send": "submitNew",
        "change .share_to_facebook": "share_on_facebook_auth"
    },
    bindings: {
        ".event-name": "title",
        ".event-name-input": "title",
        ".organizer-email-input": "organizer_email",
        ".event-description": "description",
        ".event-description-input": "description",
        ".event-where": "where",
        ".event-location-input": "where",
        ".event-start-date": "start_date",
        ".event-start-time": "start_time",
        ".event-end-date": "end_date",
        ".event-end-time": "end_time"
    },
    template: JST["invite_create.html"],
    contacts: null,
    render: function(options) {
        this.hidePanels();
        if (options.title != null) this.model.set("title", options.title);
        if (options.id != null) this.createFromInvite(options.id);
        var model_json = this.model.toJSON();
        model_json.anonymous = currentUser == null;
        this.$el.html(this.template(model_json));
        this.plugins();
        this.stickit();
        return this;
    },
    createFromInvite: function(source_invite_id) {
        var that = this;
        $.ajax({
            url: "/api/invite/" + source_invite_id,
            type: "GET",
            cache: false,
            success: function(data) {
                that.model = new InviteModel(data);
                that.model.set("unique_id", "");
                that.render(data);
            },
            error: function(data) {
                alert_notification([ {
                    alertType: "danger",
                    message: data.responseText
                } ]);
            }
        });
    },
    submitNew: function(e) {
        var that = this;
        if (!validator.validateItems(".valid-before-submit")) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        this.model.createNew($.proxy(this.inviteSubmitted, this), true);
    },
    inviteSubmitted: function(result) {
        if (currentUser) Backbone.history.navigate("invite/" + result + "/edit", true); else {
            window.location.href = "invite/confirmation/" + result;
        }
    },
    share_on_facebook_auth: function() {
        if (currentUser != null && currentUser.social_sharing.facebook || !$("#bt_toggle").is(":checked")) return;
        window.open(api.url + "/social_sharing/facebook", "_blank", "toolbar=yes, scrollbars=no, resizable=yes, top=500, left=500");
    },
    plugins: function() {
        $("#bt_toggle").bootstrapToggle();
        this.$el.find(".event-start-date, .event-end-date").datetimepicker({
            pickTime: false,
            minDate: moment()
        });
        this.$el.find(".event-start-time, .event-end-time").datetimepicker({
            pickDate: false
        });
        this.initWhere();
    },
    initWhere: function() {
        var that = this;
        if (typeof google === "undefined") return;
        this.$where = this.$el.find(".event-location-input");
        autocomplete = new google.maps.places.Autocomplete(that.$where[0], {
            types: [ "geocode" ]
        });
        var fillAddress = function() {
            var place = autocomplete.getPlace();
            that.model.set("where", place.formatted_address);
        };
        google.maps.event.addListener(autocomplete, "place_changed", function() {
            fillAddress();
        });
    },
    geoLocateWhere: function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var geolocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    },
    showOrganizerEmailIfAnonymous: function() {
        if (currentUser) $(".organizer-email-input-row").hide();
    }
});

InviteDescriptionView = Backbone.View.extend({
    is_editable: true,
    initialize: function(options) {
        this.options = options || {};
    },
    render: function(model, edit_view) {
        var that = this;
        this.model = model;
        var description = that.model.get("description");
        var empty = false;
        if (description == null || description == "") {
            if (this.is_editable) description = "Type a message..."; else description = "";
            empty = true;
        }
        if (!edit_view) {
            var label = '<span class="editable invite-description-value {0}">{1}</span>'.format(empty ? "italic_text" : "", description);
            this.$el.html(label);
            if (this.is_editable) {
                var $label = this.$el.find(".invite-description-value");
                $label.on("click", function() {
                    that.render(that.model, true);
                });
            }
        } else {
            var input = '<textarea type="text" class="edit-invite-description-input {0}">{1}</textarea>'.format(empty ? "italic_text" : "", description);
            this.$el.html(input);
            this.$input = this.$el.find(".edit-invite-description-input");
            var update = function(value) {
                that.model.set("description", value);
                that.model.updateDescription($.proxy(that.submitSuccess, that));
            };
            this.$input.on("blur", function() {
                update(that.$input.val());
            });
            this.$input.on("keyup", function(evt) {
                if (evt.keyCode != 13) {
                    return;
                }
                update(that.$input.val());
            });
        }
    },
    submitSuccess: function(result) {
        this.render(this.model, false);
    }
});

InviteDetailsView = SimpleView.extend({
    template: JST["invite_details.html"],
    el: "#invite-details",
    bindings: {
        ".event-name": "title",
        ".event-name-input": "title",
        ".event-description": "description",
        ".event-description-input": "description",
        ".event-where": "where",
        ".event-location-input": "where",
        ".event-start-date": "start_date",
        ".event-start-time": "start_time",
        ".event-end-date": "end_date",
        ".event-end-time": "end_time"
    },
    initialize: function(options) {
        this.options = options || {};
        this.inviteId = this.options.id;
    },
    events: {
        "click .invite-date": "edit_start_date",
        "click .invite-end-date": "edit_end_date",
        "click .location-title": "edit_location",
        "click .edit_invite": "editInvite",
        "click .save_invite": "saveInvite"
    },
    render: function(invite_model, edit_view) {
        this.edit_view = edit_view;
        this.model = invite_model;
        var invite_json = this.model.toJSON();
        invite_json["is_admin"] = this.options.is_admin;
        invite_json["is_edit"] = edit_view;
        this.$el.html(this.template(invite_json));
        if (edit_view) {
            this.showPalette();
            this.edit_plugins();
            this.stickit();
        } else {
            this.read_plugins();
        }
    },
    editInvite: function() {
        this.render(this.model, true);
    },
    saveInvite: function() {
        if (!validator.validateItems(".valid-before-submit")) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        if (($(".event-end-date").val() != "" || $(".event-end-time").val() != "") && !validator.validateItems(".event-end-date, .event-end-time")) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        this.model.update($.proxy(this.submitSuccess, this));
    },
    submitSuccess: function(result) {
        this.render(this.model, false);
    },
    read_plugins: function() {
        $("#bt_toggle").bootstrapToggle();
    },
    edit_plugins: function() {
        this.$el.find(".event-start-date, .event-end-date").datetimepicker({
            pickTime: false
        });
        this.$el.find(".event-start-time, .event-end-time").datetimepicker({
            pickDate: false
        });
        this.initWhere();
        $("#bt_toggle").bootstrapToggle();
    },
    initWhere: function() {
        var that = this;
        if (typeof google === "undefined") return;
        that.$where = this.$el.find(".event-location-input");
        autocomplete = new google.maps.places.Autocomplete(that.$where[0], {
            types: [ "geocode" ]
        });
        var fillAddress = function() {
            var place = autocomplete.getPlace();
            that.model.set("where", place.formatted_address);
        };
        google.maps.event.addListener(autocomplete, "place_changed", function() {
            fillAddress();
        });
    },
    geoLocateWhere: function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var geolocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    },
    share_on_facebook_auth: function() {
        if (currentUser != null && currentUser.social_sharing.facebook || !$("#bt_toggle").is(":checked")) return;
        window.open(api.url + "/social_sharing/facebook", "_blank", "toolbar=yes, scrollbars=no, resizable=yes, top=500, left=500");
    },
    showPalette: function() {
        if (!this.edit_view) return;
        var palette = new PaletteView();
        palette.render(this.model);
    }
});

InviteHeaderView = SimpleView.extend({
    template: JST["invite_header.html"],
    el: "#invite-header",
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "#upload_image_file change": "image_changed"
    },
    upload_image: function(upload_url) {
        var $image_form = $("#upload_image_form");
        var $invite_cover_image = $(".invite-background");
        $.ajax({
            url: upload_url,
            type: "POST",
            data: new FormData($image_form[0]),
            processData: false,
            contentType: false,
            success: function(data) {
                var url = "/image/" + data + "?" + new Date().getTime();
                $invite_cover_image.css("background-image", "url(" + url + ")");
            },
            error: function(data) {
                alert_notification([ {
                    alertType: "danger",
                    message: "Image couldnt be uploaded"
                } ]);
            }
        });
    },
    render: function(invite_model) {
        this.model = invite_model;
        var invite_json = this.model.toJSON();
        this.$el.html(this.template(invite_json));
        if (this.options.is_admin) $("#image_select_btn").show(); else $("#image_select_btn").hide();
        this.$image_file = this.$el.find("#upload_image_file");
        this.$image_form = this.$el.find("#upload_image_form");
        var that = this;
        var invite_title_view = new InviteTitleView({
            el: ".invite-title-container",
            is_editable: this.options.is_admin
        });
        invite_title_view.render(this.model);
        this.$image_file.on("change", function() {
            $.ajax({
                url: "/image/" + that.$image_form.data("id") + "/upload_url",
                type: "GET",
                success: function(data) {
                    that.upload_image(data);
                },
                error: function(data) {
                    alert_notification([ {
                        alertType: "danger",
                        message: "Image couldnt be uploaded"
                    } ]);
                }
            });
        });
        this.$el.find("#image_select_btn").click(function() {
            that.$image_file.click();
        });
    }
});

InviteTitleView = Backbone.View.extend({
    initialize: function(options) {
        this.options = options || {
            is_editable: false
        };
    },
    render: function(model, edit_view) {
        var that = this;
        this.model = model;
        if (!edit_view) {
            var label = '<h1 class="main-h1 palette-editable" data-opacity="0.7">' + that.model.get("title") + "</h1>";
            this.$el.html(label);
            if (this.options.is_editable) {
                var $label = this.$el.find(".main-h1");
                $label.addClass("editable");
                $label.on("click", function() {
                    that.render(that.model, true);
                });
            }
        } else {
            var input = '<input type="text" class="edit-title-input palette-editable" data-opacity="0.7" value="' + that.model.get("title") + '">';
            this.$el.html(input);
            this.$input = this.$el.find(".edit-title-input");
            var update = function(value) {
                that.model.set("title", value);
                that.model.updateTitle($.proxy(that.submitSuccess, that));
            };
            this.$input.on("blur", function() {
                update(that.$input.val());
            });
            this.$input.on("keyup", function(evt) {
                if (evt.keyCode != 13) {
                    return;
                }
                update(that.$input.val());
            });
        }
    },
    submitSuccess: function(result) {
        this.render(this.model, false);
    }
});

SearchView = SimpleView.extend({
    template: JST["invite_search.html"],
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "click .search": "search_value",
        "keypress #searchBox": "type_key",
        "click .btn-duplicate": "duplicate",
        "click .filter": "filterClick",
        "click .btn-yes": "rsvpYes",
        "click .btn-no": "rsvpNo",
        "click .btn-edit": "edit",
        "click .btn-cancel": "cancel",
        "click .invite-background": "navigate"
    },
    render: function(invites, search, filter_type) {
        var paletteView = new PaletteView();
        paletteView.clearPalette();
        this.search_term = search;
        this.filter = filter_type;
        this.hidePanels();
        this.model = this.getFilteredList(invites, this.filter);
        if (this.model != null) {
            this.$el.html(this.template({
                invites: this.model.collectionToJSON()
            }));
        } else {
            this.$el.html(this.template({
                invites: {}
            }));
            this.search();
        }
        if (search != null) {
            var $searchBox = this.$el.find("#searchBox");
            $searchBox.val(search);
            $searchBox.focus();
        }
        this.plugins();
    },
    getFilteredList: function(inviteSource, filter_type) {
        if (inviteSource == null) return null;
        if (filter_type == null) {
            return inviteSource;
        }
        var filters = [];
        if (filter_type == "all") filters = [ "yes", "no", "no_response", "organizer" ];
        if (filter_type == "unread") filters = [ "no_response" ];
        if (filter_type == "accepted") filters = [ "yes" ];
        if (filter_type == "denied") filters = [ "no" ];
        if (filter_type == "host") filters = [ "organizer" ];
        var invite_list = new InviteList();
        inviteSource.forEach(function(invite) {
            filters.forEach(function(filter) {
                if (invite.get("invite_attendee_role") == filter) invite_list.add(invite);
            });
        });
        return invite_list;
    },
    type_key: function(e) {
        if (e.keyCode == 13) {
            var $searchBox = this.$el.find("#searchBox");
            this.search($searchBox.val());
            e.preventDefault();
            return false;
        }
    },
    search_value: function(evt) {
        var $searchBox = this.$el.find("#searchBox");
        this.search($searchBox.val());
    },
    search: function(value) {
        showLoader();
        if (currentUser == null) console.error("Current User cannot be null on this view!");
        var that = this;
        var url = "/api/invite/?term=";
        if (value != null) url += value;
        httpRequest({
            url: url,
            type: "GET",
            success: function(data) {
                var invite_list = new InviteList();
                if (data != null) {
                    data.forEach(function(invite) {
                        invite_list.add(new InviteModel(invite));
                    });
                }
                that.render(invite_list, value, that.filter);
                hideLoader();
            }
        });
    },
    filterClick: function(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var $btn = $(evt.target);
        var filter = $btn.data("filter");
        if (filter != "") Backbone.history.navigate("search/" + filter, true); else Backbone.history.navigate("search", true);
    },
    duplicate: function(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var $btn = $(evt.target);
        var invite_id = $btn.data("id");
        Backbone.history.navigate("new/from/" + invite_id, true);
    },
    edit: function(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var $btn = $(evt.target);
        var invite_id = $btn.data("id");
        Backbone.history.navigate("invite/" + invite_id + "/edit", true);
    },
    navigate: function(evt) {
        console.log(evt);
        var $btn = $(evt.target);
        var invite_id = $btn.data("id");
        Backbone.history.navigate("invite/" + invite_id, true);
    },
    cancel: function(evt) {
        alert("not ready yet");
    },
    plugins: function() {
        var that = this;
        that.block(".invite-background", "half");
        $(window).resize(function() {
            that.block(".invite-background", "half");
        });
    },
    rsvpYes: function(evt) {
        this.rsvp(evt, "yes");
    },
    rsvpNo: function(evt) {
        this.rsvp(evt, "no");
    },
    rsvp: function(evt, response) {
        evt.preventDefault();
        evt.stopPropagation();
        var $btn = $(evt.target);
        var invite_attendee_id = $btn.data("attendee_id");
        var attendee_model = new Contact({
            invite_attendee_id: invite_attendee_id
        });
        attendee_model.acknowledgeInvite(response, $.proxy(this.attendeeRSVPCallback, this));
        var response_negative = response == "yes" ? "no" : "yes";
        var parent = $btn.parent();
        parent.removeClass("confirmed-negative");
        parent.addClass("confirmed-positive");
        parent.parent().find(".btn-" + response_negative).addClass("confirmed-negative");
        parent.parent().find(".btn-" + response_negative).removeClass("confirmed-positive");
    },
    attendeeRSVPCallback: function(data) {}
});

InviteView = SimpleView.extend({
    template: JST["invite.html"],
    invite_id: null,
    current_attendee: null,
    initialize: function(options) {
        this.options = options || {};
        this.inviteId = this.options.id;
    },
    hidePanels: function() {
        $("#body-container").hide();
        $("#view-container").hide();
        $("#modal_container").hide();
        $("#invite-body").show();
    },
    render: function(unique_id, invite, invite_attendee) {
        this.hidePanels();
        var self = this;
        this.invite_id = unique_id;
        this.current_attendee = invite_attendee;
        var inviteModel = invite;
        this.$el.html(this.template({
            description: inviteModel.get("description")
        }));
        var invite_header = new InviteHeaderView();
        var invite_details = new InviteDetailsView();
        var invite_attendees = new InviteAttendeesView();
        var invite_comments = new InviteCommentsView();
        invite_header.render(inviteModel);
        invite_details.render(inviteModel);
        invite_attendees.render({
            invite_id: this.invite_id,
            attendees: inviteModel.get("attendees"),
            current_attendee: this.current_attendee,
            edit_view: false
        });
        invite_comments.render({
            invite_id: this.invite_id,
            current_attendee: this.current_attendee,
            comments: new CommentList(invite.get("comments"))
        });
        var invite_palette = inviteModel.get("palette");
        if (invite_palette != null) {
            var palette = new PaletteView();
            palette.renderPalette(new PaletteModel(invite_palette));
        }
        this.plugins();
    },
    events: {
        "keypress .invite-newComment": "addNewComment"
    },
    plugins: function() {
        var that = this;
        that.block(".invite-background", "half");
        $(window).resize(function() {
            that.block(".invite-background", "half");
        });
    }
});

LoginView = SimpleView.extend({
    template: JST["login.html"],
    events: {
        "click .signup": "gotoRegister"
    },
    render: function(options) {
        this.hidePanels();
        this.$el.html(this.template());
    },
    gotoRegister: function() {
        Backbone.history.navigate("register", true);
    }
});

ModalView = Backbone.View.extend({
    childView: null,
    template: null,
    initialize: function(options) {
        this.options = options || {};
        this.childView = this.options.childView;
        this.template = this.options.template;
        if (Backbone.pubSub._events == null || Backbone.pubSub._events["childClose"] == null) Backbone.pubSub.on("childClose", this.onChildClose, this);
    },
    render: function(data) {
        var this_el = this.$el;
        var that = this;
        if (this.options.templateId != null) {
            var template = _.template($(this.options.templateId).html(), {});
            this.$el.html(template);
        } else if (this.template != null) this.$el.html(this.template());
        if (this.childView != null) {
            this.childView.render(data);
        }
        this.$el.find(".close-modal").click(function(e) {
            that.onChildClose({
                view: that.childView
            });
        });
        this.$el.show();
        return this;
    },
    onChildClose: function(data) {
        if (this.$el != null) this.$el.hide();
        Backbone.history.navigate("", true);
    }
});

PaletteView = SimpleView.extend({
    template: JST["palette.html"],
    el: "#palette-container",
    palettes: null,
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "click .palette-item": "paletteColorSelected"
    },
    render: function(inviteModel, palettes) {
        this.model = inviteModel;
        if (palettes == null) {
            this.palettes = new PaletteList();
            this.palettes.fetchAll($.proxy(this.palettesLoaded, this));
            return;
        }
        this.palettes = palettes;
        this.$el.html(this.template({
            palettes: this.palettes.collectionToJSON()
        }));
        this.$el.fadeIn();
    },
    palettesLoaded: function(palettes) {
        this.render(this.model, palettes);
    },
    paletteColorSelected: function(evt) {
        evt.preventDefault();
        var $item = $(evt.target);
        var palette = this.getById($item.data("id"));
        var currentPalette = this.model.get("palette");
        if (currentPalette != null) {
            $("body").removeClass(currentPalette.name);
        }
        this.model.set("palette", palette.toJSON());
        this.renderPalette(palette);
    },
    renderPalette: function(palette) {
        $("body").data("palette", palette.get("name"));
        $("body").addClass(palette.get("name"));
    },
    clearPalette: function() {
        var palette = $("body").data("palette");
        $("body").removeClass(palette);
    },
    opacityColor: function(color) {
        return "rgba(" + parseInt(color.slice(-6, -4), 16) + "," + parseInt(color.slice(-4, -2), 16) + "," + parseInt(color.slice(-2), 16) + ",0.5)";
    },
    getById: function(id) {
        return this.palettes.getById(id);
    }
});

ProfileEditView = SimpleView.extend({
    template: JST["profile_edit.html"],
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "click .save-profile": "save"
    },
    render: function() {
        this.hidePanels();
        this.$el.html(this.template());
        this.$name = this.$el.find("#edit-profile-name");
        this.$username = this.$el.find("#edit-profile-username");
        this.$password = this.$el.find("#edit_profile_password");
        this.$password_confirm = this.$el.find("#edit_profile_password_confirm");
        this.$email = this.$el.find("#edit-profile-email");
        var that = this;
        $.ajax({
            url: "/api/profile/" + currentUser.id,
            type: "GET",
            cache: false,
            success: function(data) {
                if (data.email != null) {
                    that.$email.html(data.email);
                    that.$email.parent().addClass("floating-label-form-group-with-value");
                }
                if (data.username != null) {
                    that.$username.val(data.username);
                    that.$username.parent().addClass("floating-label-form-group-with-value");
                }
                if (data.name != null) {
                    var name = data.name || "";
                    var lastName = data.last_name || "";
                    that.$name.val(name + " " + lastName);
                    that.$name.parent().addClass("floating-label-form-group-with-value");
                }
            }
        });
    },
    save: function() {
        if (!validator.validateItems(".valid-before-submit")) return;
        if (this.$password.val() != null && this.$password.val() != this.$password_confirm.val()) {
            alert_notification([ {
                alertType: "warning",
                message: "Password and Password confirm don't match!!!"
            } ]);
        }
        var user = {
            username: this.$username.val()
        };
        user.name = this.$name.val().split(" ")[0];
        user.last_name = this.$name.val().split(" ")[1];
        if (this.$password.val() != null && this.$password.val() != "") user.password = this.$password.val();
        var that = this;
        $.ajax({
            url: "/api/profile/" + currentUser.id,
            type: "POST",
            data: JSON.stringify(user),
            cache: false,
            success: function(data) {
                Backbone.history.navigate("/search", true);
            }
        });
    }
});

SentView = Backbone.View.extend({
    template: JST["invite_sent.html"],
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "click .submit-register": "registerEmail"
    },
    render: function() {
        this.$el.html(this.template({
            invite_id: this.model
        }));
        this.$email = this.$el.find(".register-email");
    },
    registerEmail: function() {
        if (!validator.validateItem(this.$email)) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var that = this;
        $.ajax({
            url: "/register/email/" + this.$email.val(),
            type: "POST",
            cache: false,
            success: function(data) {
                alert_notification([ {
                    alertType: "success",
                    message: "Account Created Successfully, please check your email"
                } ]);
                Backbone.pubSub.trigger("childClose", {
                    view: that
                });
            },
            error: function(data) {
                alert_notification([ {
                    alertType: "danger",
                    message: data.responseText
                } ]);
            }
        });
    }
});

UserRegisterView = SimpleView.extend({
    template: JST["register.html"],
    initialize: function(options) {
        this.options = options || {};
    },
    events: {
        "click .submit-register": "registerEmail",
        "keyup .register-email": "registerEnter"
    },
    render: function() {
        this.hidePanels();
        this.$el.html(this.template());
        this.$email = this.$el.find(".register-email");
        this.plugins();
        this.$email.focus();
    },
    registerEnter: function(evt) {
        if (evt.keyCode != 13) {
            return;
        }
        this.registerEmail();
    },
    registerEmail: function() {
        if (!validator.validateItem(this.$email)) {
            alert_notification([ {
                alertType: "warning",
                message: "You have incorrect or missing fields!"
            } ]);
            return;
        }
        var that = this;
        httpRequest({
            url: "/register/email/" + this.$email.val(),
            type: "POST",
            cache: false,
            success: function(data) {
                alert_notification([ {
                    alertType: "success",
                    message: "Account Created Successfully, please check your email"
                } ]);
                that.$email.val("");
            }
        });
    },
    plugins: function() {
        var that = this;
        that.block(".register-background", "half");
        $(window).resize(function() {
            that.block(".register-background", "half");
        });
    }
});

function init_app() {
    window.App = {
        Models: {},
        Collections: {},
        Views: {},
        Router: {}
    };
    Backbone.pubSub = _.extend({}, Backbone.Events);
    Backbone.pubSub.publish = Backbone.pubSub.trigger;
    Backbone.pubSub.subscribe = Backbone.pubSub.bind;
    Backbone.pubSub.unsubscribe = Backbone.pubSub.unbind;
    index_view = new IndexView({
        el: "#body-container"
    });
    login_view = new LoginView({
        el: "#view-container",
        templateId: "#login"
    });
    user_register_view = new UserRegisterView({
        el: "#view-container"
    });
    user_profile_view = new ProfileEditView({
        el: "#view-container"
    });
    search_view = new SearchView({
        el: "#view-container"
    });
    admin_view = new InviteAdminView({
        el: "#invite-body"
    });
    invite_view = new InviteView({
        el: "#invite-body"
    });
    invite_confirmation_view = new InviteConfirmationView({
        el: "#invite-body"
    });
    sent_view = new SentView({
        el: "#modal_container"
    });
    sent_view_modal = new ModalView({
        el: $("#modal_container"),
        childView: sent_view
    });
    contacts_view = new ContactsView({
        el: "#contact-list"
    });
    groups_view = new GroupsView({
        el: "#contact-list"
    });
    App.Router = Backbone.Router.extend({
        routes: {
            "": "index",
            "_=_": "index",
            "new": "new",
            "new/:title": "new",
            "new/:title/from/:id": "new",
            "new/from/:id": "new_no_title",
            "sent/:id": "sent",
            search: "search",
            "search/:id": "searchWithFilter",
            login: "login",
            "profile/edit": "edit_profile",
            register: "register",
            "invite/confirmation/:id": null,
            "invite/:id/edit": "edit_as_attendee",
            "invite/:id/:attendee_id/edit": "edit_as_attendee",
            "invite/:id": "view_as_attendee",
            "invite/:id/:attendee_id": "view_as_attendee",
            contacts: "contacts",
            groups: "groups",
            "contacts/new": "contacts_new"
        },
        index: function() {
            index_view.render();
        },
        login: function() {
            login_view.render();
        },
        register: function() {
            user_register_view.render();
        },
        edit_profile: function() {
            user_profile_view.render();
        },
        "new": function(title, id) {
            var newView = new InviteCreateView({
                el: "#view-container"
            });
            newView.render({
                title: title,
                id: id
            });
        },
        new_no_title: function(id) {
            this.new(null, id);
        },
        sent: function(id) {
            sent_view_modal.childView.model = id;
            sent_view_modal.render();
        },
        search: function() {
            search_view.render();
        },
        searchWithFilter: function(filter_type) {
            search_view.render(null, null, filter_type);
        },
        edit_as_attendee: function(id, attendee_id) {
            var inviteX = typeof invite != "undefined" ? invite : null;
            var invite_attendeex = typeof invite_attendee != "undefined" ? invite_attendee : null;
            if (inviteX == null || invite_attendeex == null) {
                loadInviteAndAttendeeFromLoggedUser(id, function(inviteModel, invite_attendee) {
                    admin_view.render(id, inviteModel, invite_attendee);
                });
            } else admin_view.render(id, new InviteModel(inviteX), new Contact(invite_attendeex));
        },
        view_as_attendee: function(id, attendee_id) {
            var inviteX = typeof invite != "undefined" ? invite : null;
            var invite_attendeex = typeof invite_attendee != "undefined" ? invite_attendee : null;
            if (inviteX == null || invite_attendeex == null) {
                loadInviteAndAttendeeFromLoggedUser(id, function(inviteModel, invite_attendee) {
                    invite_view.render(id, inviteModel, invite_attendee);
                });
            } else invite_view.render(id, new InviteModel(inviteX), new Contact(invite_attendeex));
        },
        invite_confirmation: function() {
            invite_confirmation_view.render();
        },
        contacts: function() {
            contacts_view.render({
                contactList: contactList,
                groupList: groupList
            });
        },
        contacts_new: function() {},
        groups: function() {
            groups_view.render({
                contactList: contactList,
                groupList: groupList
            });
        }
    });
    if (window.location.hash && window.location.hash == "#_=_") {
        window.location.hash = "";
    }
    new App.Router();
    Backbone.history.start({
        pushState: true
    });
    $("#notification-alerts").toggleClass("in");
    $("body").on("click", ".navigate", function(e) {
        var where = $(this).data("where");
        if (where != null) Backbone.history.navigate(where, true); else Backbone.history.navigate("/", true);
    });
    $("body").on("input propertychange", ".floating-label-form-group", function(e) {
        $(this).toggleClass("floating-label-form-group-with-value", !!$(e.target).val());
    }).on("focu s", ".floating-label-form-group", function() {
        $(this).addClass("floating-label-form-group-with-focus");
    }).on("blur", ".floating-label-form-group", function() {
        $(this).removeClass("floating-label-form-group-with-focus");
    });
}

$(function() {
    init_app();
});