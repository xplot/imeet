function alert_notification(a) {
    var b = $("#notification-alerts");
    b.length || (b = $('<div id="notification-alerts" class="jumbotron flyover flyover-bottom"><button class="btn btn-primary alert-close" data-dismiss="alert">X</button></div>'), 
    $("body").append(b)), a.forEach(function(a) {
        b.prepend("            <div class='alert alert-" + a.alertType + "'>" + a.message + "</div>");
    }), a.length > 0 && b.toggleClass("in");
}

function init_app() {
    window.App = {
        Models: {},
        Collections: {},
        Views: {},
        Router: {}
    }, Backbone.pubSub = _.extend({}, Backbone.Events), Backbone.pubSub.publish = Backbone.pubSub.trigger, 
    Backbone.pubSub.subscribe = Backbone.pubSub.bind, Backbone.pubSub.unsubscribe = Backbone.pubSub.unbind, 
    index_view = new IndexView({
        el: "#body-container"
    }), login_view = new SimpleView({
        el: "#view-container",
        templateId: "#login"
    }), user_register_view = new UserRegisterView({
        el: "#modal_container"
    }), register_view = new ModalView({
        el: "#modal_container",
        childView: user_register_view
    }), user_profile_view = new UserProfileView({
        el: "#modal_container"
    }), profile_view = new ModalView({
        el: "#modal_container",
        childView: user_profile_view
    }), create_invite_view = new CreateView({
        el: "#view-container"
    }), search_view = new SearchView({
        el: "#modal_container"
    }), search_view_modal = new ModalView({
        el: "#modal_container",
        childView: search_view
    }), invite_view = new InviteView({
        el: "#modal_container"
    }), invite_view_modal = new ModalView({
        el: $("#modal_container"),
        childView: invite_view
    }), App.Router = Backbone.Router.extend({
        routes: {
            "": "index",
            "_=_": "index",
            "new": "new",
            "new/:title": "new",
            "new/:title/from/:id": "new",
            "new/from/:id": "new_no_title",
            search: "search",
            login: "login",
            "profile/edit": "edit_profile",
            register: "register",
            "view/:id": "view"
        },
        index: function() {
            index_view.render();
        },
        login: function() {
            login_view.render();
        },
        register: function() {
            register_view.render();
        },
        edit_profile: function() {
            profile_view.render();
        },
        "new": function(a, b) {
            create_invite_view.render({
                title: a,
                id: b
            });
        },
        new_no_title: function(a) {
            this.new(null, a);
        },
        search: function() {
            search_view_modal.render();
        },
        view: function(a) {
            invite_view_modal.render({
                invite_id: a
            });
        }
    }), window.location.hash && "#_=_" == window.location.hash && (window.location.hash = ""), 
    new App.Router(), Backbone.history.start({
        pushState: !0
    }), $("#notification-alerts").toggleClass("in"), $("body").on("click", ".navigate", function() {
        var a = $(this).data("where");
        null != a ? Backbone.history.navigate(a, !0) : Backbone.history.navigate("/", !0);
    }), $(".end-click").click(function() {
        $(".navbar-toggle:visible").click();
    }), $("body").on("input propertychange", ".floating-label-form-group", function(a) {
        $(this).toggleClass("floating-label-form-group-with-value", !!$(a.target).val());
    }).on("focus", ".floating-label-form-group", function() {
        $(this).addClass("floating-label-form-group-with-focus");
    }).on("blur", ".floating-label-form-group", function() {
        $(this).removeClass("floating-label-form-group-with-focus");
    });
}

this.JST = this.JST || {}, this.JST["editProfile.html"] = function(obj) {
    obj || (obj = {});
    var __p = "";
    with (_.escape, obj) __p += '<div class="modal-content">\n    <form id="editProfileForm">\n        <div class="close-modal" data-action="dismiss">\n            <div class="lr">\n                <div class="rl">\n                </div>\n            </div>\n        </div>\n        <div class="container">\n            <h4>Edit your profile</h4>\n           <div class="row controls">\n               <div class="col-sm-3"></div>\n                <div class="col-sm-6">\n                    <br/><br/>\n                    <div class="floating-label-form-group">\n                        <div id="edit-profile-email">Email</div>\n                    </div>\n                    <br/><br/>\n                    <div class="floating-label-form-group">\n                        <label for="edit-profile-name" class="fl">Full Name</label>\n                        <input required id="edit-profile-name" type="text" class="form-control" placeholder="John Smith..." >\n                    </div>\n                    <div class="floating-label-form-group">\n                        <label for="edit-profile-username" class="fl">Username</label>\n                        <input required id="edit-profile-username" type="text" class="form-control" placeholder="username...">\n                    </div>\n                    <div class="floating-label-form-group">\n                        <label for="edit-profile-username" class="fl">Pasword</label>\n                        <input id="edit_profile_password" name="edit_profile_password" type="password" class="form-control" placeholder="password...">\n                    </div>\n                    <div class="floating-label-form-group">\n                        <label for="edit-profile-username" class="fl">Pasword Confirm</label>\n                        <input name="edit_profile_password_confirm" id="edit_profile_password_confirm" type="password" class="form-control" placeholder=" confirm password...">\n                    </div>\n                </div>\n            </div>\n            <div class="form-group col-xs-9 medium-margin">\n                <a class="btn btn-primary btn-lg save-profile pull-right" role="button">Save</a>\n            </div>\n        </div>\n    </form>\n</div>\n';
    return __p;
}, this.JST["invite.html"] = function(obj) {
    obj || (obj = {});
    var __p = "";
    with (_.escape, Array.prototype.join, obj) __p += '    <section data-panel="first" class="container invite top-separator">\n        <div class="row text-center">\n            <h4>Event</h4>\n        </div>\n        <div class="row equidistant">\n            <div class="col-xs-12 col-md-8 col-md-offset-2">\n                <input required type="text" class="form-control event-name valid-before-submit" placeholder="Event" autofocus data-validation="required" >\n            </div>\n        </div>\n\n        <div class="row equidistant">\n            <div class="col-xs-12  col-md-3 col-md-offset-2">\n                <div class="date-group">\n                    <input required type="text" class="date event-start-date valid-before-submit" placeholder="01/01/2000" data-validation="required" >\n                    <input required type="int" class="time event-start-time  valid-before-submit" placeholder="00:00 AM" data-validation="required" >\n                </div>\n            </div>\n            <div class="col-xs-12 col-md-2 text-center label-text">\n                To\n            </div>\n            <div class="col-xs-12 col-md-3">\n                <div class="date-group">\n                    <input required type="text" class="date event-end-date valid-before-submit" placeholder="01/01/2000" data-validation="required,date" >\n                    <input required type="text" class="time event-end-time valid-before-submit" placeholder="00:00 AM" data-validation="required,time" >\n                </div>\n            </div>\n        </div>\n        <div class="row equidistant">\n            <div class="col-xs-12 col-md-8 col-md-offset-2">\n              <textarea class="form-control event-description" rows="6"></textarea>\n            </div>\n        </div>\n    </section>\n\n    <section data-panel="second" class="container invite top-separator">\n        <div class="row text-center">\n            <h4>Where</h4>\n        </div>\n\n        <div class="row equidistant">\n            <div class="col-xs-8 col-md-6 col-md-offset-2">\n                <input type="text" class="form-control event-address-street" placeholder="Address"  >\n            </div>\n            <div class="col-xs-4 col-md-2">\n                <input type="text" class="form-control event-address-suite" placeholder="Apt"  >\n            </div>\n        </div>\n        <div class="row equidistant">\n            <div class="col-xs-12 col-md-4 col-md-offset-2">\n                <input type="text" class="form-control event-address-city" placeholder="City"  >\n            </div>\n\n            <div class="col-xs-8 col-md-2">\n                <select class="form-control event-address-state" placeholder="State">\n\n                </select>\n            </div>\n            <div class="col-xs-4 col-md-2">\n                <input type="text" class="form-control event-address-zip" placeholder="Zip"  >\n            </div>\n        </div>\n\n    </section>\n\n    <section data-panel="third" class="container invite top-separator">\n\n        <div class="row text-center">\n            <h4>Who is invited?</h4>\n        </div>\n\n        <div class="row equidistant">\n            <div class="col-md-4 col-md-offset-2">\n                <input type="text" class="new-contact-name form-control" placeholder="Name">\n            </div>\n\n            <div class="col-md-3">\n                <input type="text" class="new-contact-phone form-control"\n                    ', 
    __p += -1 != features.indexOf("voice") ? "\n                        data-validation='required,email|phone' placeholder='Phone Number or Email Address'\n                    " : "\n                        data-validation='required,email' placeholder='Email Address'\n                    ", 
    __p += '\n                    name="newPhone" id="newPhone">\n            </div>\n            <div class="col-md-1">\n                <button type="button" class="btn btn-info new-contact form-control">+</button>\n            </div>\n        </div>\n        <div class="contact-table equidistant">\n        </div>\n    </section>\n\n    <section data-panel="fourth" class="top-separator invite">\n        <div id="reportXXX"></div>\n\n        <div class="row equidistant">\n            <div class="col-md-8 col-md-offset-2">\n                <button type="button" class="btn form-control btn-success send" disabled>Create Invite</button>\n            </div>\n        </div>\n    </section>\n\n<!-- Footer -->\n<div class="section-container footer desktop navbar-fixed-bottom">\n    <div class="footer-below">\n        <div class="container">\n          <div class="row">\n              <div class="col-lg-12">\n                  Miami, FL<br/>\n                  Copyright 2014 &copy; iMeet Inc. All rights reserved.\n              </div>\n          </div>\n          <div class="row">\n            <div class="col-lg-12 quiet">\n                <br/>Built with love, Internet style\n            </div>\n          </div>\n        </div>\n    </div>\n</div>\n\n\n<ul class="menu">\n    <li>\n        <a href="" data-panel="first" class="active"><i class="fa fa-circle-line fa-1x"></i></a>\n    </li>\n    <li>\n        <a href="" data-panel="second"><i class="fa fa-circle-line fa-1x"></i></a>\n    </li>\n    <li>\n        <a href="" data-panel="third" ><i class="fa fa-circle-line fa-1x"></i></a>\n    </li>\n    <li>\n        <a href="" data-panel="fourth" ><i class="fa fa-circle-line fa-1x"></i></a>\n    </li>\n</ul>\n';
    return __p;
}, this.JST["inviteReport.html"] = function(obj) {
    obj || (obj = {});
    var __p = "";
    with (_.escape, obj) __p += '<div class="modal-content">\n        <div class="close-modal" data-action="dismiss">\n            <div class="lr">\n                <div class="rl">\n                </div>\n            </div>\n        </div>\n        <div class="container invite-table">\n            <div class="row controls">\n                <div class="col-sm-6">\n                    <h4>Event</h4>\n                    <div class="invite-title"></div>\n                </div>\n                <div class="col-sm-6 ">\n                    <h4>When</h4>\n                    <div class="invite-date"></div>\n                </div>\n            </div>\n\n            <div class="row medium-margin line"></div>\n\n            <h4>Attendees</h4>\n            <div class="row medium-margin line"></div>\n            <div class="row medium-margin line"></div>\n            <div class=\'row contact-row small-margin\'>\n                <div class=\'col-sm-2\'> <strong>Name</strong></div>\n                <div class=\'col-sm-2\'>  <strong>Phone</strong> </div>\n                <div class=\'col-sm-2\'> <strong>Email</strong></div>\n                <div class=\'col-sm-2\'> <strong>Sms Response</strong></div>\n                <div class=\'col-sm-2\'> <strong>Voice Response</strong></div>\n                <div class=\'col-sm-2\'> <strong>Email Response</strong></div>\n            </div>\n            <!--<div class="row medium-margin line"></div>-->\n        </div>\n    </div>\n';
    return __p;
}, this.JST["invite_report.html"] = function(obj) {
    obj || (obj = {});
    var __p = "";
    with (_.escape, obj) __p += "<div class=\"row equidistant invite_report\">\n    <div class=\"col-xs-12 col-md-8 col-md-offset-2\">\n        <div class=\"panel panel-primary\">\n         <div class=\"panel-heading\" >\n                <div class=\"row event-report-row\">\n                     <div class='pull-left col-xs-3 col-md-6'><h4 class='event-name'></h4></div>\n                     <div class='col-xs-9 col-md-6 text-right'>\n                        <div class='col-xs-12 col-md-12 event-start-date-formatted'></div>\n                        <div class='col-xs-12 col-md-12 event-end-date-formatted'></div>\n                     </div>\n                </div>\n             </div>\n         </div>\n\n          <div class=\"panel-body container\">\n\n            <div class='left col-xs-12 col-md-6'>\n                <div class=' event-description'></div>\n\n                <div class='small-margin-top'>\n                    <div class='label_title col-md-1 text-right'>Where:</div>\n                    <div class='pull-left col-md-5 text-left small-margin-left'>\n                        <div class='event-address-street-with-number'></div>\n                        <div class='event-address-state-city'></div>\n                        <div class='event-address-zip'></div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=' right col-xs-12 col-md-3'>\n                <ul class=\"contact-read-table\" style=\"list-style: none\">\n\n                </ul>\n            </div>\n\n\n\n          </div>\n        </div>\n    </div>\n</div>\n";
    return __p;
}, this.JST["register.html"] = function(obj) {
    obj || (obj = {});
    var __p = "";
    with (_.escape, obj) __p += '<div class="modal-content small-modal">\n    <form id="registerForm">\n        <div class="close-modal" data-action="dismiss">\n            <div class="lr">\n                <div class="rl">\n                </div>\n            </div>\n        </div>\n        <div class="container">\n            <h4>I want in!</h4>\n           <div class="row controls">\n               <div class="col-sm-3"></div>\n                <div class="col-sm-6">\n                    <div class="col-sm-9">\n                        <input required type="email" class="form-control register-email" placeholder="Enter email...">\n                    </div>\n                    <div class="col-sm-3">\n                        <button type="button" class="btn btn-success form-control submit-register">Go</button>\n                    </div>\n                </div>\n                <div class="col-sm-3"></div>\n            </div>\n        </div>\n    </form>\n</div>\n';
    return __p;
}, this.JST["search.html"] = function(obj) {
    obj || (obj = {});
    var __p = "";
    with (_.escape, obj) __p += '<div class="modal-content">\n    <div class="close-modal" data-action="dismiss">\n        <div class="lr">\n            <div class="rl">\n            </div>\n        </div>\n    </div>\n    <div class="container">\n        <div class="row controls">\n            <div class="col-sm-10">\n                <input id="searchBox" type="text" class="form-control event-name" placeholder="Invite Title" data-validation="required">\n            </div>\n            <div class="col-sm-2">\n                <button type="button" class="btn btn-success form-control search">Go</button>\n            </div>\n        </div>\n        <div class="row" style="height: 50px"></div>\n        <div class="row search-result">\n        </div>\n    </div>\n</div>\n';
    return __p;
};

var inviteBindings = {
    ".event-name": "title",
    ".event-start-date": "start-date",
    ".event-start-time": "start-time",
    ".event-end-date": "end-date",
    ".event-end-time": "end-time",
    ".event-description": "description",
    ".event-address-street": "address.street",
    ".event-address-suite": "address.suite",
    ".event-address-city": "address.city",
    ".event-address-zip": "address.zip",
    ".event-address-state": {
        observe: "address.state",
        selectOptions: {
            collection: function() {
                return [ {
                    value: null,
                    label: ""
                }, {
                    value: "FL",
                    label: "Florida"
                }, {
                    value: "02",
                    label: "February"
                }, {
                    value: "03",
                    label: "March"
                }, {
                    value: "04",
                    label: "April"
                }, {
                    value: "05",
                    label: "May"
                }, {
                    value: "06",
                    label: "June"
                }, {
                    value: "07",
                    label: "July"
                }, {
                    value: "08",
                    label: "August"
                }, {
                    value: "09",
                    label: "September"
                }, {
                    value: "10",
                    label: "October"
                }, {
                    value: "11",
                    label: "November"
                }, {
                    value: "12",
                    label: "December"
                } ];
            }
        }
    },
    ".event-start-date-formatted": {
        observe: [ "start-date", "start-time" ],
        onGet: function(a) {
            return Date.parse(a[0] + " " + a[1]) ? "From: " + a[0] + " " + a[1] : void 0;
        }
    },
    ".event-end-date-formatted": {
        observe: [ "end-date", "end-time" ],
        onGet: function(a) {
            return "To: " + a[0] + " " + a[1];
        }
    },
    ".event-address-state-city": {
        observe: [ "address.state", "address.city" ],
        onGet: function(a) {
            var b = a[0] || "", c = a[1] || "";
            return null == b && null == c ? "" : c + ", " + b;
        }
    },
    ".event-address-street-with-number": {
        observe: [ "address.street", "address.suite" ],
        onGet: function(a) {
            var b = a[0] || "", c = a[1] || "";
            return b + " " + c;
        }
    }
};

CreateContactView = Backbone.View.extend({}), ReadContactView = Backbone.View.extend({}), 
CreateView = Backbone.View.extend({
    el: "#header-container",
    new_contact_string: "            <div id='contact{2}'  class='row contact-row equidistant' data-contact='{0};{1};{2}'>                <div class='col-md-4 col-md-offset-2'> {0}</div>                <div class='col-md-3'> {1}</div>                <div class='col-md-1'>                     <button type='button' class='btn btn-danger remove-contact form-control' data-row='{2}'>-</button>                              </div>             </div>",
    reportView: null,
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .new-contact": "newContact",
        "click .remove-contact": "removeContact",
        "click .send": "submitNew"
    },
    template: JST["invite.html"],
    render: function(a) {
        return this.bindings = inviteBindings, $("#body-container").hide(), $("#view-container").show(), 
        $("#modal_container").modal("hide"), this.$el.html(this.template()), this.$table = this.$el.find(".contact-table"), 
        this.$table = this.$el.find(".contact-table"), this.$btSend = this.$el.find(".send"), 
        this.$contactForm = this.$el.find("#newContactForm"), this.$inviteForm = this.$el.find("#newInviteForm"), 
        this.$new_name = this.$el.find(".new-contact-name"), this.$new_phone = this.$el.find(".new-contact-phone"), 
        this.$event_name = this.$el.find(".event-name"), this.$event_start_date = this.$el.find(".event-start-date"), 
        this.$event_start_time = this.$el.find(".event-start-time"), this.$event_end_date = this.$el.find(".event-end-date"), 
        this.$event_end_time = this.$el.find(".event-end-time"), this.$btSend = this.$el.find(".send"), 
        this.i = 0, this.$event_start_date.datepicker({}), this.$event_start_time.timepicker({
            minuteStep: 5,
            template: !1,
            appendWidgetTo: "body",
            showSeconds: !1,
            showMeridian: !0,
            defaultTime: !1
        }), this.$event_end_date.datepicker({}), this.$event_end_time.timepicker({
            minuteStep: 1,
            template: !1,
            appendWidgetTo: "body",
            showSeconds: !1,
            showMeridian: !0,
            defaultTime: !1
        }), $("a .active"), null != a.id ? this.createFromInvite(a.id) : this.model = testModel, 
        null != a.title && this.model.set("title", a.title), this.reportView = new ReportView({
            model: this.model,
            el: "#reportXXX"
        }), this.reportView.render(), this.stickit(), this;
    },
    createFromInvite: function(a) {
        var b = this;
        $.ajax({
            url: "/api/invite/" + a,
            type: "GET",
            cache: !1,
            success: function(a) {
                a.contacts.forEach(function(a) {
                    b.$table.prepend(b.new_contact_string.format(a.name || "", a.phone || "", a.email || "", this.i)), 
                    this.i++;
                }), b.$btSend.removeAttr("disabled");
            },
            error: function(a) {
                alert_notification([ {
                    alertType: "danger",
                    message: a.responseText
                } ]);
            }
        });
    },
    newContact: function() {
        if (validator.validateItem(this.$new_phone)) {
            var a = this.new_contact_string.format(this.$new_name.val(), this.$new_phone.val(), this.i);
            return this.$table.append(a), this.reportView.addContact({
                name: this.$new_name.val(),
                address: this.$new_phone.val(),
                index: this.i
            }), this.i++, this.$new_name.val(""), this.$new_phone.val(""), this.$btSend.removeAttr("disabled"), 
            !1;
        }
    },
    removeContact: function(a) {
        var b = "#contact" + $(a.currentTarget).data("row");
        this.$table.find(b).remove(), this.reportView.removeContact(b);
        var c = this.$el.find(".contact-row");
        (null == c || 0 == c.length) && this.$btSend.attr("disabled", "disabled");
    },
    submitNew: function() {
        var a = this;
        if (validator.validateItems(".valid-before-submit")) {
            var b = this.$el.find(".contact-row"), c = {
                title: this.$event_name.val(),
                when: this.$event_date.val(),
                user_id: null != currentUser ? currentUser.id : null,
                contacts: []
            };
            b.each(function() {
                var b = $(this).data("contact"), d = b.trim().split(";"), e = a.parsePhoneAndEmail(d[1]);
                c.contacts.push({
                    name: d[0],
                    email: e.email,
                    phone: e.phone
                });
            }), $.ajax({
                url: "/api/invite",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(c),
                cache: !1,
                success: function() {
                    alert_notification([ {
                        alertType: "success",
                        message: "Event sent!"
                    } ]), Backbone.history.navigate("", !0);
                },
                error: function(a) {
                    alert_notification([ {
                        alertType: "danger",
                        message: a.responseText
                    } ]);
                }
            });
        }
    },
    parsePhoneAndEmail: function(a) {
        a.trim();
        var b = a.split(";");
        1 == b.length && (b = a.split(","));
        for (var c = 0; c < b.length; c++) b[c] = b[c].trim();
        return 1 == b.length ? isNaN(b[0]) ? {
            email: b[0],
            phone: ""
        } : {
            phone: b[0],
            email: ""
        } : isNaN(b[0]) ? {
            email: b[0],
            phone: b[1]
        } : {
            phone: b[0],
            email: b[1]
        };
    }
}), IndexView = Backbone.View.extend({
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .imeet-btn": "createNew",
        "keypress .invite-title-input": "type_key"
    },
    type_key: function(a) {
        return 13 == a.keyCode ? (this.createNew(), a.preventDefault(), !1) : void 0;
    },
    render: function() {
        $("#view-container").hide(), this.$el.show(), this.$inviteTitle = this.$el.find(".invite-title-input"), 
        this.$headerImage = this.$el.find(".header-section");
    },
    createNew: function() {
        var a = this.$inviteTitle.val();
        null != a && "" != a ? Backbone.history.navigate("/new/" + a, !0) : alert("type a title!");
    }
});

var validator = {
    digitsRegex: new RegExp("^[0-9]*$"),
    charsRegex: new RegExp(".*"),
    emailRegex: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    validateItems: function(a) {
        var b = !0, c = $(a);
        return c.each(function(a) {
            var d = $(c[a]);
            b = validator.validateItem(d) && b;
        }), b;
    },
    validateString: function(a, b) {
        var c = !1;
        switch (b) {
          case "required":
            c = a.length > 0;
            break;

          case "digits":
            c = validator.digitsRegex.test(a);
            break;

          case "non_numerics":
            c = validator.charsRegex.test(a);
            break;

          case "email":
            c = 0 == a.length || validator.emailRegex.test(a);
            break;

          case "phone":
            c = validator.digitsRegex.test(a) && (10 == a.length || 0 == a.length);
            break;

          case "date":
            var d = new Date(a);
            c = d instanceof Date && !isNaN(d.valueOf());
            break;

          case "time":
            c = !0;
        }
        return c;
    },
    validateItem: function(a) {
        var b = !0, c = a.data("validation");
        return c.split(",").forEach(function(c) {
            var d = -1;
            if (c.indexOf(":") >= 0) {
                var e = c.split(":");
                c = e[0], d = parseInt(e[1]);
            }
            var f;
            try {
                var g = a.val();
                if (a.is(":checkbox") && (a.is(":checked") || (g = "")), -1 != c.indexOf("|")) {
                    var h = function(a, b) {
                        var b = c.split("|"), d = a.split(",");
                        if (0 == d.length || 0 == b.length) return !0;
                        var e = !0;
                        return d.forEach(function(a) {
                            a = a.trim();
                            var c = !1;
                            b.forEach(function(b) {
                                c = validator.validateString(a, b) || c;
                            }), e = e && c;
                        }), e;
                    };
                    f = h(g, c);
                } else f = validator.validateString(g, c);
                -1 != d && (f = f && g.length == d);
            } catch (i) {
                f = !1;
            }
            b = f && b;
        }), a.is(":checkbox") && (a = a.parent()), b ? a.removeClass("failed-validation") : a.addClass("failed-validation"), 
        b;
    }
};

InviteView = Backbone.View.extend({
    template: JST["inviteReport.html"],
    inviteId: null,
    initialize: function(a) {
        this.options = a || {}, this.inviteId = this.options.id;
    },
    render: function(a) {
        this.inviteId = a.invite_id, null == this.inviteId && console.error("Invite Id is null, check routing"), 
        this.$el.html(this.template()), $.ajax({
            url: "/api/invite/" + this.inviteId,
            type: "GET",
            cache: !1,
            success: function(a) {
                var b = $(".invite-title"), c = $(".invite-date"), d = $(".invite-table");
                b.html(a.title), c.html(a.when);
                var e = "            <div id='contact{3}' class='row contact-row small-margin' data-contact='{0},{1},{2}' >                     <div class='col-sm-2'> {0} </div>                     <div class='col-sm-2'>  {1} </div>                     <div class='col-sm-2'> {2}</div>                     <div class='col-sm-2'> {3}</div>                     <div class='col-sm-2'> {4}</div>                     <div class='col-sm-2'> {5}</div>             </div> ";
                a.contacts.forEach(function(a) {
                    d.append(e.format(a.name || "N/A", a.phone || "N/A", a.email || "N/A", a.sms_response || '<span class="text-danger">N/A</span>', a.voice_response || '<span class="text-danger">N/A</span>', a.email_response || '<span class="text-danger">N/A</span>'));
                });
            }
        });
    }
}), InviteModel = Backbone.Model.extend({
    defaults: {
        title: "",
        "start-date": "",
        "start-time": "",
        "end-date": "",
        "end-time": "",
        description: "",
        address: {
            street: "",
            suite: "",
            city: "",
            state: "",
            zip: ""
        },
        contacts: []
    }
}), testModel = new InviteModel({
    title: "WHATEVER",
    "start-date": "03/02/2014",
    "start-time": "2:05 AM",
    "end-date": "03/02/2014",
    "end-time": "2:05 AM",
    description: "Lorem Ipsum",
    address: {
        street: "29 Navarre Ave",
        suite: "7",
        city: "Miami",
        state: "FL",
        zip: "33125"
    },
    contacts: []
});

var inviteBindings = {
    ".event-name": "title",
    ".event-start-date": "start-date",
    ".event-start-time": "start-time",
    ".event-end-date": "end-date",
    ".event-end-time": "end-time",
    ".event-description": "description",
    ".event-address-street": "address.street",
    ".event-address-suite": "address.suite",
    ".event-address-city": "address.city",
    ".event-address-zip": "address.zip",
    ".event-address-state": {
        observe: "address.state",
        selectOptions: {
            collection: function() {
                return [ {
                    value: null,
                    label: ""
                }, {
                    value: "FL",
                    label: "Florida"
                }, {
                    value: "02",
                    label: "February"
                }, {
                    value: "03",
                    label: "March"
                }, {
                    value: "04",
                    label: "April"
                }, {
                    value: "05",
                    label: "May"
                }, {
                    value: "06",
                    label: "June"
                }, {
                    value: "07",
                    label: "July"
                }, {
                    value: "08",
                    label: "August"
                }, {
                    value: "09",
                    label: "September"
                }, {
                    value: "10",
                    label: "October"
                }, {
                    value: "11",
                    label: "November"
                }, {
                    value: "12",
                    label: "December"
                } ];
            }
        }
    },
    ".event-start-date-formatted": {
        observe: [ "start-date", "start-time" ],
        onGet: function(a) {
            return Date.parse(a[0] + " " + a[1]) ? "From: " + a[0] + " " + a[1] : void 0;
        }
    },
    ".event-end-date-formatted": {
        observe: [ "end-date", "end-time" ],
        onGet: function(a) {
            return "To: " + a[0] + " " + a[1];
        }
    },
    ".event-address-state-city": {
        observe: [ "address.state", "address.city" ],
        onGet: function(a) {
            var b = a[0] || "", c = a[1] || "";
            return null == b && null == c ? "" : c + ", " + b;
        }
    },
    ".event-address-street-with-number": {
        observe: [ "address.street", "address.suite" ],
        onGet: function(a) {
            var b = a[0] || "", c = a[1] || "";
            return b + " " + c;
        }
    }
};

ReportView = Backbone.View.extend({
    bindings: inviteBindings,
    new_contact_string: "            <li id='contact{2}' class='contact-row' data-contact='{0};{1};{2}'>                {0} - {1}             </li>",
    initialize: function(a) {
        this.options = a || {}, this.model = this.options.model;
    },
    template: JST["invite_report.html"],
    render: function() {
        return this.$el.html(this.template()), this.$report_table = this.$el.find(".contact-read-table"), 
        this.stickit(), this;
    },
    addContact: function(a) {
        this.$report_table.append(this.new_contact_string.format(a.name, a.address, a.index));
    },
    removeContact: function(a) {
        this.$report_table.find(a).remove();
    }
}), ModalView = Backbone.View.extend({
    childView: null,
    template: null,
    initialize: function(a) {
        this.options = a || {}, this.childView = this.options.childView, this.template = this.options.template, 
        (null == Backbone.pubSub._events || null == Backbone.pubSub._events.childClose) && Backbone.pubSub.on("childClose", this.onChildClose, this);
    },
    render: function(a) {
        this.$el;
        var b = this;
        if (null != this.options.templateId) {
            var c = _.template($(this.options.templateId).html(), {});
            this.$el.html(c);
        } else null != this.template && this.$el.html(this.template());
        return null != this.childView && this.childView.render(a), this.$el.find(".close-modal").click(function() {
            b.onChildClose({
                view: b.childView
            });
        }), console.log(this.$el), this.$el.show(), this;
    },
    onChildClose: function() {
        null != this.$el && this.$el.hide(), Backbone.history.navigate("", !0);
    }
}), UserProfileView = Backbone.View.extend({
    template: JST["editProfile.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .save-profile": "save"
    },
    render: function() {
        this.$el.html(this.template()), this.$editProfileForm = this.$el.find("#editProfileForm"), 
        this.$name = this.$el.find("#edit-profile-name"), this.$username = this.$el.find("#edit-profile-username"), 
        this.$password = this.$el.find("#edit_profile_password"), this.$email = this.$el.find("#edit-profile-email");
        var a = this;
        $.ajax({
            url: "/api/profile/" + currentUser.id,
            type: "GET",
            cache: !1,
            success: function(b) {
                null != b.email && (a.$email.html(b.email), a.$email.parent().addClass("floating-label-form-group-with-value")), 
                null != b.username && (a.$username.val(b.username), a.$username.parent().addClass("floating-label-form-group-with-value")), 
                null != b.name && (a.$name.val(b.name + " " + b.last_name), a.$name.parent().addClass("floating-label-form-group-with-value"));
            }
        });
    },
    save: function() {
        if (this.$editProfileForm.validate({
            rules: {
                edit_profile_password: {
                    minlength: 5
                },
                edit_profile_password_confirm: {
                    minlength: 5,
                    equalTo: "#edit_profile_password"
                }
            }
        }), this.$editProfileForm.valid()) {
            var a = {
                username: this.$username.val(),
                password: this.$password.val()
            };
            null != this.$name.val() && (a.name = this.$name.val().split(" ")[0], a.last_name = this.$name.val().split(" ")[1]);
            var b = this;
            $.ajax({
                url: "/api/profile/" + currentUser.id,
                type: "POST",
                data: JSON.stringify(a),
                cache: !1,
                success: function() {
                    Backbone.pubSub.trigger("childClose", {
                        view: b
                    });
                }
            });
        }
    }
}), SearchView = Backbone.View.extend({
    template: JST["search.html"],
    invite_string: "            <div class='row'>                     <div class='col-sm-3 col-md-offset-2'>  <a href='#' class='navigate' data-action='modal' data-where='view/{0}'>{1}</a> </div>                     <div class='col-sm-3'>  {2} </div>                     <div class='col-sm-1'> <button type='button' class='navigate btn btn-info form-control' data-where='new/from/{0}'>Copy</button></div>             </div> ",
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .search": "search",
        "keypress #searchBox": "type_key"
    },
    render: function() {
        this.$el.html(this.template()), this.$searchBox = this.$el.find("#searchBox"), this.search();
    },
    type_key: function(a) {
        return 13 == a.keyCode ? (this.search(), a.preventDefault(), !1) : void 0;
    },
    search: function() {
        var a = this;
        $.ajax({
            url: "/api/invite/search/" + currentUser.id + "?term=" + this.$searchBox.val(),
            type: "GET",
            cache: !1,
            success: function(b) {
                if (null != b) {
                    var c = $(".search-result");
                    c.empty(), b.forEach(function(b) {
                        c.append(a.invite_string.format(b.unique_id, b.title, b.when));
                    });
                }
            }
        });
    }
}), UserRegisterView = Backbone.View.extend({
    template: JST["register.html"],
    initialize: function(a) {
        this.options = a || {};
    },
    events: {
        "click .submit-register": "registerEmail"
    },
    render: function() {
        this.$el.html(this.template()), this.$registerForm = this.$el.find("#registerForm"), 
        this.$email = this.$el.find(".register-email");
    },
    registerEmail: function() {
        if (this.$registerForm.validate(), this.$registerForm.valid()) {
            var a = this;
            $.ajax({
                url: "/register/email/" + this.$email.val(),
                type: "POST",
                cache: !1,
                success: function() {
                    Backbone.pubSub.trigger("childClose", {
                        view: a
                    });
                },
                error: function(a) {
                    alert_notification([ {
                        alertType: "danger",
                        message: a.responseText
                    } ]);
                }
            });
        }
    }
}), SimpleView = Backbone.View.extend({
    initialize: function(a) {
        this.options = a || {};
    },
    render: function() {
        if ($("#body-container").hide(), null != this.options.templateId) {
            var a = _.template($(this.options.templateId).html(), {});
            this.$el.html(a), this.$el.show();
        }
    }
}), $(function() {
    String.prototype.format || (String.prototype.format = function() {
        var a = arguments;
        return this.replace(/{(\d+)}/g, function(b, c) {
            return "undefined" != typeof a[c] ? a[c] : b;
        });
    }), init_app();
});